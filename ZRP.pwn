#define SERVER_GM_TEXT "zG:RP v1.13c (June 4)"
#define SERVER_GM_UPDATER "iRage"


// Includes
#include <a_samp>
#include <a_players>
#include <dini>
#include <dudb>
#include <dutils>
#pragma unused ret_memcpy
#include <foreach>
#include <sscanf2>
#include <zcmd>
#include <streamer>
#include <OPSP>
#include <progress>
#include <gvc>
#define SpeedCheck(%0,%1,%2,%3,%4) floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1) ) *%3*1.6)
native WP_Hash(_buffer[], len, const str[]);


#define MAX_CONNECTIONS_FROM_IP 4
// Marker Colors
#define TRANSPARENT_WHITE 0xFFFFFF00
#define TRANSPARENT_GREY 0xAFAFAF00
#define TRANSPARENT_BLUE 0x2641FE00
#define TRANSPARENT_ORANGE 0xFF990000
#define TRANSPARENT_PURPLE 0xC2A2DA00
#define TRANSPARENT_VIP 0xC93CCE00
// POLICE
#define MARKER_LIGHTBLUE 0x33CCFFFF

// Colors
#define COLOR_WHITE 0xFFFFFFFF
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_PM1 0xA65FC7FF
#define COLOR_PM2 0xD35FC7FF
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
#define COLOR_OOC 0xE0FFFFFF
#define COLOR_GREY 0xAFAFAFFF
#define COLOR_LIGHTGREEN 0xADFF2FFF
#define COLOR_LIGHTRED 0xFF6347FF
#define COLOR_DARKRED 0xAA3333FF
#define COLOR_RED 0xFF0606FF
#define COLOR_LIGHTBLUE 0x33CCFFFF
#define COLOR_GREEN 0x33AA33FF
#define COLOR_YELLOW 0xFFFF00FF
#define COLOR_PURPLE 0xC2A2DAFF
#define COLOR_ORANGE 0xFF9900FF
#define COLOR_REPORT 0xFFFF91FF
#define COLOR_RADIO 0x8D8DFFFF
#define COLOR_DEPTRADIO 0xFFD700FF
#define COLOR_BLUE 0x2641FEFF
#define COLOR_MEDIC 0xFF8282FF
#define COLOR_NEWBIE 0x7DAEFFFF
#define COLOR_LIME 0x00FF00FF
#define COLOR_NEWS 0x049C7100
#define COLOR_CYAN 0x01FCFFFF
#define COLOR_VIP 0xC93CCEFF

// Custom Defines
#define MAX_FACTIONS 5 // 0 = civilian | 1 = SAPD | 2 = Government | 3 = Hitman Agency | 4 = SA News
#define MAX_FAMILIES 11 // 1 to 10, ignore 0
#define MAX_BIZ 51 // Ignore 0
#define MAX_HOUSES 301 // Ignore 0
#define MAX_DOORS 200
#define MAX_MAPICONS 100
#define MAX_MUSIC 3
#define MAX_ADS 50
#define MAX_CUSTOM_VEHICLES 50
#define MAX_POINTS 6
#define MAX_DVEHICLES 800
#define MAX_SPIKESTRIPS 200
#define MAX_GATES 201 // Ignore 0

// 911
new Call911[MAX_PLAYERS];
new D911[MAX_PLAYERS][128];

// Gates
// gedit: object - closed - opened - speed - password
new gEdit[MAX_PLAYERS]; // 1 = closed | 2 = opened
new gEditID[MAX_PLAYERS]; // Object's ID
new Float:gPos[MAX_PLAYERS][3];
new Float:gRot[MAX_PLAYERS][3];

// News
new NewsMoney;

// Refunding
new Refund[MAX_PLAYERS];

// Toys
new toyslot[MAX_PLAYERS];

// loyalty
new LHealth;
new LFix;
new LRefill;

// Stoned Timer
new StonedTimer[MAX_PLAYERS];

// Fishes
new Fished[MAX_PLAYERS];
new FishTime[MAX_PLAYERS];

// Falseban fix
new FalseBan[MAX_PLAYERS];

// News
new LiveBy[MAX_PLAYERS];
new LiveRequest[MAX_PLAYERS];
new Live[MAX_PLAYERS];
new LiveConference;

// Bank Robbery
new Text:Textdraw0;
new Text:Textdraw1;
new Text:Textdraw2;
new Text:Textdraw3;
new Text:Textdraw4;
new Text:Textdraw5;
new BankRobbery;
new BankRobbersCount;
new BankRobbers[5][MAX_PLAYER_NAME];
new BankRobber[MAX_PLAYERS];
new RobberyRequest[MAX_PLAYERS];
new BankC4;
new RobberyStarted;
new DeliverMoney[MAX_PLAYERS];
new TotalRobbers;
new TotalStolen;
new BankRobberyTime;
new BankBlock;


// Boxing
new Boxing[MAX_PLAYERS]; // Boxing[playerid] = 1;
new BoxBy[MAX_PLAYERS]; // BoxOffer[playerb] = playerid;
new Boxer[3]; // 1 = /fight | 2 = /accept
new pBoxer[MAX_PLAYERS]; // playerb = 1 | playerid = 2
new BoxTime; // Global boxing countdown
new BoxingMatch; // 1 = going on | 0 = none
new BoxerBid[3]; // 1 = /fight | 2 = /accept
new BidAmount[MAX_PLAYERS]; // /bid
new BidBoxer[MAX_PLAYERS]; // 1/2
new BoxTimer; // For SetTime

// Family skins
new pskin[MAX_PLAYERS], fskin[MAX_PLAYERS];

// Parachute
new Parachute;

// Join Messages
new JoinMessages[MAX_PLAYERS];

// GMX
new GMX[MAX_PLAYERS];

// Spikes
enum sInfo
{
	sCreated,
    Float:sX,
    Float:sY,
    Float:sZ,
    sObject,
};
new SpikeInfo[MAX_SPIKESTRIPS][sInfo];

// Sirens
new Siren[MAX_VEHICLES];
new SirenObject[MAX_VEHICLES];

// Truck Packages
new TruckPackages[MAX_VEHICLES];

// Fuel
new Fuel[MAX_VEHICLES];
new FuelVar[MAX_VEHICLES];
new fMeter[MAX_PLAYERS];
new Refill[MAX_PLAYERS];

// Family Vehicles
new Fam[MAX_VEHICLES];


// VIP Tag
new VIPTag[MAX_PLAYERS];
new Text3D:VIPText[MAX_PLAYERS];
// VIP Dialog
new VIP[MAX_PLAYERS];
// VIP Name
new VIPName[MAX_PLAYERS][MAX_PLAYER_NAME];
new Approve[MAX_PLAYERS];

// Dragging
new Drag[MAX_PLAYERS];
new Dragged[MAX_PLAYERS];

// Anti CS
#define MAX_SLOTS 48
new NotMoving[MAX_PLAYERS];
new WeaponID[MAX_PLAYERS];
new CheckCrouch[MAX_PLAYERS];
new Ammo[MAX_PLAYERS][MAX_SLOTS];

// DMV
new DMVCar[5];
new LicenseTest[MAX_PLAYERS];
new CP[MAX_PLAYERS];

// AntiAFK
new AFK[MAX_PLAYERS];
new Float:OldPos[MAX_PLAYERS][3];
new Float:NewPos[MAX_PLAYERS][3];
new IsAFK[MAX_PLAYERS];
new Text3D:AFKText[MAX_PLAYERS];

// Event
new Float:ePos[3];
new eInt, eVW;
new Event[MAX_PLAYERS];
new EventOn;
new EventLocked;
new EventWep[3];
new Float:EventHealth;
new Float:EventArmor;

// Helper Chat
new Chat[MAX_PLAYERS];

// Speedlimit
new Speedlimit[MAX_PLAYERS];

// Listening
new Whispers[MAX_PLAYERS];
new SMSes[MAX_PLAYERS];
new PMs[MAX_PLAYERS];

// Points
new Capturer = -1;
new CapturerFam = -1;

// Alt-Tab Detection
new AltTabbed[MAX_PLAYERS];
new Tabbed[MAX_PLAYERS];
new Text3D:AltTabText[MAX_PLAYERS];
new HasText[MAX_PLAYERS];

// AntiTP
new AntiTP[MAX_PLAYERS];
new AntiTPTimer[MAX_PLAYERS];

// Paycheck
new PayChecks;

// HH Check
new HHcheckUsed = 0;
new Float:HHcheckFloats[MAX_PLAYERS][6];
new HHcheckInt[MAX_PLAYERS];
new HHcheckVW[MAX_PLAYERS];

// MOTDS
new ServerMOTD[128];
new SAPDMOTD[128];
new GOVMOTD[128];
new HAMOTD[128];
new AdminMOTD[128];

// Admin Duty
new aDuty[MAX_PLAYERS];
new Text3D:aDutyText[MAX_PLAYERS];

// Spam
new CommandSpamCount[MAX_PLAYERS];
new OldSpamCommand[MAX_PLAYERS][128];
new NewSpamCommand[MAX_PLAYERS][128];
new ChatSpamCount[MAX_PLAYERS];
new OldSpamChat[MAX_PLAYERS][128];
new NewSpamChat[MAX_PLAYERS][128];
// Drugs
new DrugTimeout[MAX_PLAYERS];

// Admin Mark
new Float:aMark[MAX_PLAYERS][3];
new aMarkInt[MAX_PLAYERS];
new aMarkVw[MAX_PLAYERS];

// Advertisements
#define TIMER_AD 60
new HasAD[MAX_PLAYERS];
new AdQueue;
new AD[MAX_ADS][128];
new iAD[MAX_ADS];
new iAdName[MAX_ADS][32];
new LastAd;
// Tutorial Timers
new Tut[MAX_PLAYERS];

// Job Defines
#define MAX_JOBS 12
#define JOB_NONE 0
#define JOB_MECHANIC 1
#define JOB_LAWYER 2
#define JOB_TRUCKER 3
#define JOB_FISHER 4
#define JOB_WDEALER 5
#define JOB_WSMUGGLER 6
#define JOB_DDEALER 7
#define JOB_DSMUGGLER 8
#define JOB_CARJACKER 9
#define JOB_BODYGUARD 10
#define JOB_BOXER 11
// Weed and Crack
new Weed;
new Text3D:WeedText;
new Crack;
new Text3D:CrackText;
// Products
new Products;
new Text3D:ProductsText;
// Website
new Text:WebTD;
// Time System
new tsec,tmin,thour;
new Text:TimeTD;
new Seconds[MAX_PLAYERS];
// Tutorial TD
new Text:TutorialTD;
// Togging VIP
new VIPOff[MAX_PLAYERS];
// Togging Phone
new PhoneOff[MAX_PLAYERS];
// Tickets
new TicketBy[MAX_PLAYERS];
new TicketPrice[MAX_PLAYERS][MAX_PLAYERS];

// Prison Cells
new Float:RandomPrison[][4] =
{
	{2489.9800,-1236.7056,1063.2562,182.2076},
	{2485.3955,-1236.9854,1063.2562,183.4610},
	{2481.2786,-1237.1069,1063.2562,181.5810},
	{2492.1582,-1260.8143,1063.2562,0.4726},
	{2488.5754,-1260.7708,1063.3862,7.9926},
	{2484.5596,-1261.0980,1063.2562,4.2326}
};
// Public variables
new Invited[MAX_PLAYERS];
new Inviter[MAX_PLAYERS];
new Faction[MAX_PLAYERS];
new fInvited[MAX_PLAYERS];
new fInviter[MAX_PLAYERS];
new Family[MAX_PLAYERS];
new Tazer[MAX_PLAYERS];
new ReplaceTazer[MAX_PLAYERS];
new Float:fPos[3];
new TazeTimeout[MAX_PLAYERS];
new TazeCountDown[MAX_PLAYERS];
new Tracking[MAX_PLAYERS];
new CuffTimeout[MAX_PLAYERS];
new CuffCountDown[MAX_PLAYERS];
new Uncuffed[MAX_PLAYERS];
new GunsBeingRemoved[MAX_PLAYERS];
new TempGuns[13];
new TempGunsAmmo[13];
new Tazed[MAX_PLAYERS];
new Cuffed[MAX_PLAYERS];
new HospitalCountDown[MAX_PLAYERS];
new Hospital[MAX_PLAYERS];
new HospitalTime[MAX_PLAYERS];
new LastCar[MAX_PLAYERS];
new Spec[MAX_PLAYERS];
new Specid[MAX_PLAYERS];
new NewbieTime[MAX_PLAYERS];
new Calling[MAX_PLAYERS];
new Called[MAX_PLAYERS];
new BeingCalled[MAX_PLAYERS];
new Caller[MAX_PLAYERS];
new CallTime[MAX_PLAYERS];
new Speedo[MAX_PLAYERS];
new Tied[MAX_PLAYERS];
new Blindfolded[MAX_PLAYERS];
new OldGun[MAX_PLAYERS];
new OldAmmo[MAX_PLAYERS];
new NoSprunk[MAX_PLAYERS];
new ReportTime[MAX_PLAYERS];
new HelpTime[MAX_PLAYERS];
new Float:hPos[MAX_PLAYERS][3];
new hPOS[MAX_PLAYERS][2];
// Materials
new SellMaterialsTo[MAX_PLAYERS];
new BuyMaterialsFrom[MAX_PLAYERS];
new BuyMaterialsAmount[MAX_PLAYERS];
new BuyMaterialsPrice[MAX_PLAYERS];
new BeenOfferedMaterials[MAX_PLAYERS];
// Weapons
new SellWeaponTo[MAX_PLAYERS];
new BuyWeaponFrom[MAX_PLAYERS];
new BuyWeaponPrice[MAX_PLAYERS];
new BeenOfferedWeapon[MAX_PLAYERS];
// Drugs
new WeedSeller[MAX_PLAYERS];
new WeedPrice[MAX_PLAYERS][MAX_PLAYERS];
new WeedAmount[MAX_PLAYERS][MAX_PLAYERS];
new CrackSeller[MAX_PLAYERS];
new CrackPrice[MAX_PLAYERS][MAX_PLAYERS];
new CrackAmount[MAX_PLAYERS][MAX_PLAYERS];

// Hitman
new Hitman[MAX_PLAYERS];
// Defend and Free
new FreeBy[MAX_PLAYERS];
new FreePrice[MAX_PLAYERS][MAX_PLAYERS];
new FreeTime[MAX_PLAYERS];
new DefendBy[MAX_PLAYERS];
new DefendPrice[MAX_PLAYERS][MAX_PLAYERS];
new FreeTimeout[MAX_PLAYERS];
new DefendTimeout[MAX_PLAYERS];

// Vest
new VestPrice[MAX_PLAYERS][MAX_PLAYERS];
new VestBy[MAX_PLAYERS];


// Non-Player Variables
new SAPDLobby[4];
new SAPDLobbyStatus;
new SAPDCells[4];
new SAPDCellsStatus;
new SAPDBarrier;
new SAPDBarrierStatus;
new SAPDGate;
new SAPDGateStatus;
new SAPDOffice[2];
new SAPDOfficeStatus[2];
new SAPDChief[4];
new SAPDChiefStatus;
new OOCStatus;
new NewbieStatus = 1;
new BankVault;
new cVeh[MAX_CUSTOM_VEHICLES];
new TaxMoney;
new TaxPercent;
new TempTaxPercent;
new TaxRequester = -1;
new SAGate1;
new SAGateStatus1;
new SAGate2;
new SAGateStatus2;

// Animations
new gPlayerUsingLoopingAnim[MAX_PLAYERS];
new gPlayerAnimLibsPreloaded[MAX_PLAYERS];
new animation[MAX_PLAYERS];
new Text:txtAnimHelper;
#define SPECIAL_ACTION_PISSING 68
// Bars
new Bar:Download[MAX_PLAYERS];

// User settings
enum pInfo
{
	// Temp Values
	pLoggedIn,
	pSpawn,
	// Permanent Values
	pIP[16],
	pOwner,
	pLevel,
	pMinutes,
	pHours,
	pGender,
	pAge,
	pMoney,
	pBank,
	pModel,
	pAdmin,
	pBanned,
	Float:pX,
	Float:pY,
	Float:pZ,
	pInt,
	pVW,
	pFac,
	pFacRank,
	pFacLeader,
	pWeapon[13],
	pWeaponAmmo[13],
	pHospital,
	pFacDuty,
	pFacDiv,
	pFacDivLeader,
	pBiz,
	pVBiz,
	pHouse,
	pVHouse,
	pJob,
	pJobSkill[MAX_JOBS],
	pTPackages,
	pMPackages,
	pDPackages,
	pMaterials,
	pWeed,
	pCrack,
	pHasCellphone,
	pCellphone,
	pPhonebook,
	pDice,
	pCigar,
	pSpeedo,
	pSprunk,
	pSpray,
	pRope,
	pBlindfold,
	pWT,
	pWTC,
	pGas,
	pRadio,
	Float:pHealth,
	Float:pArmor,
	pInternet,
	pSong[MAX_MUSIC],
	pPrison,
	pPrisonTime,
	pPrisonReason[64],
	pPrisonBy[32],
	pWanted,
	pWanted1[64],
	pWanted2[64],
	pWanted3[64],
	pWanted4[64],
	pWanted5[64],
	pWanted6[64],
	pCrimes,
	pArrested,
	pContract,
	pContractBy[32],
	pTutorial,
	pWarns,
	pWarn1[64],
	pWarn2[64],
	pWarn3[64],
	pFlag[65],
	pNMute,
	pSpawnFreeze,
	pFam,
	pFamRank,
	pCSuccess,
	pCFail,
	pHelper,
	pVeh,
	vModel,
	Float:vX,
	Float:vY,
	Float:vZ,
	Float:vA,
	vC1,
	vC2,
	vPJ,
	pVehMod[14],
	vLocked,
	pGangMod,
	pFacMod,
	pBanAppealer,
	pCarLic,
	pAccent[16],
	// VIP
	pVIP,
	pVIPDay,
	pVIPMonth,
	pVIPHour,
	pVIPTemp,
	// VIP Job
	pVIPJob,
	// VIP Car
	pVVeh,
	vVModel,
	Float:vVX,
	Float:vVY,
	Float:vVZ,
	Float:vVA,
	vVC1,
	vVC2,
	vVPJ,
	pVVehMod[14],
	vVLocked,
	pVIPBuddy,
	pDeliverTruck,
	pNew,
	pRefPoints,
	pTester,
	pFightStyle,
	pScope,
	pCookies,
	pOldskool,
	// Toys
	pToyModel[10],
	Float:pToyX[10],
	Float:pToyY[10],
	Float:pToyZ[10],
	Float:pToyRX[10],
	Float:pToyRY[10],
	Float:pToyRZ[10],
 	Float:pToySX[10],
    Float:pToySY[10],
    Float:pToySZ[10],
    pReward,
    pFish[5],
    pLoyal,
    pLoyalTag,
    pLPoints,
    pStoned,
    pGate[3],
    pSafeAdmin
}
new PlayerInfo[MAX_PLAYERS][pInfo];


stock ClearChar(playerid)
{
	// Toys
	for(new i=0; i<10; i++)
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid, i))
	    {
	        RemovePlayerAttachedObject(playerid, i);
	    }
	}
    // Bank Robbery
	if(BankRobber[playerid])
    {
	    new Rob = BankRobber[playerid]-1, string[128];
	    DisablePlayerCheckpoint(playerid);
		BankRobbersCount --;
		format(BankRobbers[Rob], MAX_PLAYER_NAME, "");
		DeliverMoney[playerid] = 0;
		//
		foreach(Player, i)
		{
		    if(BankRobber[i] || PlayerInfo[i][pFac] == 1)
		    {
				if(Rob == 0) TextDrawHideForPlayer(i, Textdraw1);
				else if(Rob == 1) TextDrawHideForPlayer(i, Textdraw2);
				else if(Rob == 2) TextDrawHideForPlayer(i, Textdraw3);
				else if(Rob == 3) TextDrawHideForPlayer(i, Textdraw4);
				else if(Rob == 4) TextDrawHideForPlayer(i, Textdraw5);
			}
		}
		format(string, sizeof(string), "** %s has disconnected and has failed the robbery. **", RPN(playerid));
		SendRobberyMessage(COLOR_LIGHTRED, string);
		SendCopMessage(COLOR_LIGHTRED, string);
		BankRobber[playerid] = 0;
		if(BankRobbersCount == 0)
		{
			TextDrawHideForAll(Textdraw0);
			TextDrawHideForAll(Textdraw1);
			TextDrawHideForAll(Textdraw2);
			TextDrawHideForAll(Textdraw3);
			TextDrawHideForAll(Textdraw4);
			TextDrawHideForAll(Textdraw5);
			BankRobbery = 0;
			RobberyStarted = 0;
			format(string, sizeof(string), "** The bank robbery has ended, $%d were stolen and $%d were saved. **", TotalStolen*10000, (TotalRobbers*10000-(TotalStolen*10000)));
			SendClientMessageToAll(COLOR_YELLOW, string);
			TotalRobbers = 0;
			new copsonline;
			foreach(Player, i)
			{
			    if(IsACop(i)) copsonline++;
			}
			foreach(Player, i)
			{
			    if(IsACop(i))
			    {
					new Saved = (TotalRobbers*10000-(TotalStolen*10000));
					GiveZaiatMoney(i, Saved/copsonline);
					format(string, sizeof(string), "** You have received your cut from the saved money. ($%d)", Saved/copsonline);
					SendClientMessage(i, COLOR_LIME, string);
			    }
			}
		}
    }
	// 3D Text
	/*Delete3DTextLabel(AltTabText[playerid]);
	Delete3DTextLabel(AFKText[playerid]);
	Delete3DTextLabel(aDutyText[playerid]);
	Delete3DTextLabel(VIPText[playerid]);*/
	if(IsValidDynamic3DTextLabel(AltTabText[playerid])) DestroyDynamic3DTextLabel(AltTabText[playerid]);
	if(IsValidDynamic3DTextLabel(AFKText[playerid]))DestroyDynamic3DTextLabel(AFKText[playerid]);
	if(IsValidDynamic3DTextLabel(aDutyText[playerid]))DestroyDynamic3DTextLabel(aDutyText[playerid]);
	if(IsValidDynamic3DTextLabel(VIPText[playerid]))DestroyDynamic3DTextLabel(VIPText[playerid]);
	// Timers
	KillTimer(CuffCountDown[playerid]);
	KillTimer(TazeCountDown[playerid]);
	KillTimer(Tut[playerid]);
	KillTimer(HospitalCountDown[playerid]);
	KillTimer(AntiTPTimer[playerid]);
	KillTimer(StonedTimer[playerid]);
	// Vehicles
	if(PlayerInfo[playerid][vModel])
	{
		DestroyVehicle(PlayerInfo[playerid][pVeh]);
	}
	if(PlayerInfo[playerid][vVModel])
	{
		DestroyVehicle(PlayerInfo[playerid][pVVeh]);
	}
	// Tax Request
	if(TaxRequester == playerid) TaxRequester = -1;
	// Download bar
	DestroyProgressBar(Download[playerid]);
	// Prison Info
	format(PlayerInfo[playerid][pPrisonReason], 64, "");
	format(PlayerInfo[playerid][pPrisonBy], 32, "");
	format(PlayerInfo[playerid][pWanted1], 64, "");
	format(PlayerInfo[playerid][pWanted2], 64, "");
	format(PlayerInfo[playerid][pWanted3], 64, "");
	format(PlayerInfo[playerid][pWanted4], 64, "");
	format(PlayerInfo[playerid][pWanted5], 64, "");
	format(PlayerInfo[playerid][pWanted6], 64, "");
	// Contract
	format(PlayerInfo[playerid][pContractBy], 32, "");
	// Warns
	format(PlayerInfo[playerid][pWarn1], 64, "");
	format(PlayerInfo[playerid][pWarn2], 64, "");
	format(PlayerInfo[playerid][pWarn3], 64, "");
	// Spam
	format(OldSpamCommand[playerid], 128, "");
	format(NewSpamCommand[playerid], 128, "");
	format(OldSpamChat[playerid], 128, "");
	format(NewSpamChat[playerid], 128, "");
	// Flag
	format(PlayerInfo[playerid][pFlag], 64, "");
	// Accent
	format(PlayerInfo[playerid][pAccent], 16, "");
	// VIP Name
	format(VIPName[playerid], MAX_PLAYER_NAME, "");
	// Enum
    PlayerInfo[playerid][pLevel] = 1; PlayerInfo[playerid][pMinutes] = 0; PlayerInfo[playerid][pHours] = 0; PlayerInfo[playerid][pLoggedIn] = 0; PlayerInfo[playerid][pSpawn] = 0; PlayerInfo[playerid][pGender] = 0; PlayerInfo[playerid][pAge] = 0; PlayerInfo[playerid][pMoney] = 0; PlayerInfo[playerid][pModel] = 0;
	PlayerInfo[playerid][pAdmin] = 0; PlayerInfo[playerid][pBanned] = 0; PlayerInfo[playerid][pX]  = 0; PlayerInfo[playerid][pY] = 0; PlayerInfo[playerid][pZ] = 0; PlayerInfo[playerid][pInt] = 0; PlayerInfo[playerid][pVIP] = 0; PlayerInfo[playerid][pVIPDay] = 0; PlayerInfo[playerid][pVIPMonth] = 0; PlayerInfo[playerid][pVIPHour] = 0;
	PlayerInfo[playerid][pVW] = 0; PlayerInfo[playerid][pFac] = 0; PlayerInfo[playerid][pFacRank] = 0; PlayerInfo[playerid][pFacLeader] = 0; PlayerInfo[playerid][pHospital] = 0; PlayerInfo[playerid][pFacDuty] = 0; PlayerInfo[playerid][pFightStyle] = 0; PlayerInfo[playerid][pFacMod] = 0; PlayerInfo[playerid][pBanAppealer] = 0;
	PlayerInfo[playerid][pFacDiv] = 0; PlayerInfo[playerid][pFacDivLeader] = 0; PlayerInfo[playerid][pBiz] = 0; PlayerInfo[playerid][pVBiz] = 0; PlayerInfo[playerid][pJob] = 0; PlayerInfo[playerid][pVIPJob] = 0; PlayerInfo[playerid][pTPackages] = 0; PlayerInfo[playerid][pHasCellphone] = 0; PlayerInfo[playerid][pCookies] = 0;
	PlayerInfo[playerid][pCellphone] = 0; PlayerInfo[playerid][pPhonebook] = 0; PlayerInfo[playerid][pDice] = 0; PlayerInfo[playerid][pCigar] = 0; PlayerInfo[playerid][pSpeedo] = 0; PlayerInfo[playerid][pSprunk] = 0; PlayerInfo[playerid][pVIPTemp] = 0; PlayerInfo[playerid][pScope] = 0; PlayerInfo[playerid][pOldskool] = 0;
	PlayerInfo[playerid][pSpray] = 0; PlayerInfo[playerid][pRope] = 0; PlayerInfo[playerid][pBlindfold] = 0; PlayerInfo[playerid][pWT] = 0; PlayerInfo[playerid][pWTC] = 0; PlayerInfo[playerid][pGas] = 0; PlayerInfo[playerid][pRadio] = 0; PlayerInfo[playerid][pRefPoints] = 0; PlayerInfo[playerid][pReward] = 0; PlayerInfo[playerid][pLoyalTag] = 0;
	PlayerInfo[playerid][pInternet] = 0; PlayerInfo[playerid][pBank] = 0; PlayerInfo[playerid][pPrison] = 0; PlayerInfo[playerid][pPrisonTime] = 0; PlayerInfo[playerid][pWanted] = 0; PlayerInfo[playerid][pMPackages] = 0; PlayerInfo[playerid][pVIPBuddy] = 0; PlayerInfo[playerid][pTester] = 0; PlayerInfo[playerid][pLoyal] = 0;
	PlayerInfo[playerid][pMaterials] = 0; PlayerInfo[playerid][pOwner] = 0; PlayerInfo[playerid][pCrimes] = 0; PlayerInfo[playerid][pArrested] = 0; PlayerInfo[playerid][pHouse] = 0; PlayerInfo[playerid][pVHouse] = 0; PlayerInfo[playerid][pHelper] = 0; PlayerInfo[playerid][vPJ] = 0; PlayerInfo[playerid][pLPoints] = 0;
	PlayerInfo[playerid][pDPackages] = 0; PlayerInfo[playerid][pWeed] = 0; PlayerInfo[playerid][pCrack] = 0; PlayerInfo[playerid][pContract] = 0; PlayerInfo[playerid][pVeh] = 0; PlayerInfo[playerid][pVVeh] = 0; PlayerInfo[playerid][pGangMod] = 0; PlayerInfo[playerid][pCarLic] = 0;
	PlayerInfo[playerid][pTutorial] = 0; PlayerInfo[playerid][pWarns] = 0; PlayerInfo[playerid][pNMute] = 0; PlayerInfo[playerid][pSpawnFreeze] = 0; PlayerInfo[playerid][pFam] = 0; PlayerInfo[playerid][pFamRank] = 0; PlayerInfo[playerid][pCSuccess] = 0; PlayerInfo[playerid][pCFail] = 0;
	PlayerInfo[playerid][vModel] = 0; PlayerInfo[playerid][vX] = 0; PlayerInfo[playerid][vY] = 0; PlayerInfo[playerid][vZ] = 0; PlayerInfo[playerid][vA] = 0; PlayerInfo[playerid][vC1] = 0; PlayerInfo[playerid][vC2] = 0; PlayerInfo[playerid][vLocked] = 0; PlayerInfo[playerid][pNew] = 0;
	PlayerInfo[playerid][pGate][0] = 0; PlayerInfo[playerid][pGate][1] = 0; PlayerInfo[playerid][pGate][2] = 0; PlayerInfo[playerid][pSafeAdmin] = 0;
	for(new i=0; i<5; i++) // Fish
	{
	    PlayerInfo[playerid][pFish][i] = 0;
	}
    if(PlayerInfo[playerid][pDeliverTruck] != -1)
    {
	    TruckPackages[PlayerInfo[playerid][pDeliverTruck]] = -1;
		PlayerInfo[playerid][pDeliverTruck] = -1;
    }
    for(new i=0; i<10; i++) // Toys
    {
        PlayerInfo[playerid][pToyModel][i] = 0;
        PlayerInfo[playerid][pToyX][i] = 0;
		PlayerInfo[playerid][pToyY][i] = 0;
		PlayerInfo[playerid][pToyZ][i] = 0;
		PlayerInfo[playerid][pToyRX][i] = 0;
		PlayerInfo[playerid][pToyRY][i] = 0;
		PlayerInfo[playerid][pToyRZ][i] = 0;
	 	PlayerInfo[playerid][pToySX][i] = 0;
	    PlayerInfo[playerid][pToySY][i] = 0;
	    PlayerInfo[playerid][pToySZ][i] = 0;
    }
	for(new i=0; i<14; i++) // Vehicle Mods
	{
		PlayerInfo[playerid][pVehMod][i] = 0;
	}
	for(new i=0; i<13; i++) // Weapons
	{
	    PlayerInfo[playerid][pWeapon][i] = 0;
		TempGuns[i] = 0;
		TempGunsAmmo[i] = 0;
	}
	for(new i=0; i<13; i++) // Ammo
	{
	    PlayerInfo[playerid][pWeaponAmmo][i] = 0;
	}
	for(new i=0; i<MAX_JOBS; i++) // Jobs Skills
	{
	    PlayerInfo[playerid][pJobSkill][i] = 0;
	}
	for(new i=1; i<MAX_MUSIC; i++) // Downloaded Songs
	{
	    PlayerInfo[playerid][pSong][i] = 0;
	}
	for(new i=0; i<3; i++) // Admin Mark
	{
	    aMark[playerid][i] = 0;
	}
	// Public Variables
	Invited[playerid] = 0; Inviter[playerid] = 0; Faction[playerid] = 0; Tazer[playerid] = 0; ReplaceTazer[playerid] = 0; Chat[playerid] = -1; JoinMessages[playerid] = 0; Call911[playerid] = 0;
	fPos[0] = 0; fPos[1] = 0; fPos[2] = 0; TazeTimeout[playerid] = 0; TazeCountDown[playerid] = 0; Speedlimit[playerid] = 0; Drag[playerid] = -1; Dragged[playerid] = -1;
	Tracking[playerid] = -1; CuffTimeout[playerid] = 0; CuffCountDown[playerid] = 0; Uncuffed[playerid] = 0; GunsBeingRemoved[playerid] = 0; VIPOff[playerid] = 0; VIPTag[playerid] = 0;
	Tazed[playerid] = 0; Cuffed[playerid] = 0; HospitalCountDown[playerid] = 0; Hospital[playerid] = 0; HospitalTime[playerid] = 0; LastCar[playerid] = 0; Spec[playerid] = 0; Specid[playerid] = -1;
	gPlayerUsingLoopingAnim[playerid] = 0; gPlayerAnimLibsPreloaded[playerid] = 0; NewbieTime[playerid] = 0; Calling[playerid] = 0; Called[playerid] = -1; BeingCalled[playerid] = 0; Caller[playerid] = -1;
	CallTime[playerid] = 0; Speedo[playerid] = 0; Tied[playerid] = 0; Blindfolded[playerid] = 0; Seconds[playerid] = 0; HasAD[playerid] = 0; OldGun[playerid] = 0; OldAmmo[playerid] = 0;
	FreeBy[playerid] = 0; FreeTime[playerid] = 0; DefendBy[playerid] = 0; FreeTimeout[playerid] = 0; DefendTimeout[playerid] = 0; NoSprunk[playerid] = 0; Hitman[playerid] = -1; gEdit[playerid] = 0; gEditID[playerid] = 0;
    PhoneOff[playerid] = 0; TicketBy[playerid] = -1; CommandSpamCount[playerid] = 0; ChatSpamCount[playerid] = 0; aMarkInt[playerid] = 0; aMarkVw[playerid] = 0; DrugTimeout[playerid] = 0; aDuty[playerid] = 0;
	fInvited[playerid] = 0; fInviter[playerid] = 0; Family[playerid] = 0; VestBy[playerid] = -1; hPos[playerid][0] = 0; hPos[playerid][1] = 0; hPos[playerid][2] = 0; hPOS[playerid][0] = 0; hPOS[playerid][1] = 0;
	Whispers[playerid] = 0; SMSes[playerid] = 0; PMs[playerid] = 0; HelpTime[playerid] = 0; ReportTime[playerid] = 0; LicenseTest[playerid] = 0; CP[playerid] = 0; Approve[playerid] = 0; GMX[playerid] = 0;
    Boxing[playerid] = 0; BoxBy[playerid] = 0; pBoxer[playerid] = 0; BidAmount[playerid] = 0; BidBoxer[playerid] = 0; pskin[playerid] = 0; fskin[playerid] = 0; Refund[playerid] = 0; AntiTP[playerid] = 0;
    BankRobber[playerid] = 0; RobberyRequest[playerid] = 0; DeliverMoney[playerid] = 0; LiveBy[playerid] = -1; LiveRequest[playerid] = 0; Live[playerid] = 0; Fished[playerid] = 0; FishTime[playerid] = 0;
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i))
		{
		    TicketPrice[playerid][i] = 0;
		    TicketPrice[i][playerid] = 0;
			if(WeedSeller[i] == playerid)
			{
			    WeedSeller[i] = -1; WeedPrice[playerid][i] = 0; WeedAmount[playerid][i] = 0;
			    SendClientMessage(i, COLOR_YELLOW, "The player offering to sell you weed has disconnected from the server.");

			}
			if(CrackSeller[i] == playerid)
			{
			    CrackSeller[i] = -1; CrackPrice[playerid][i] = 0; CrackAmount[playerid][i] = 0;
			    SendClientMessage(i, COLOR_YELLOW, "The player offering to sell you crack has disconnected from the server.");

			}
		    if(SellMaterialsTo[playerid] == i && BuyMaterialsFrom[i] == playerid)
		    {
		        BuyMaterialsFrom[i] = -1; BuyMaterialsAmount[i] = 0; BuyMaterialsPrice[i] = 0; BeenOfferedMaterials[i] = 0;
		        SendClientMessage(i, COLOR_YELLOW, "The player offering to sell you materials has disconnected from the server.");
		    }
		    if(SellWeaponTo[playerid] == i && BuyWeaponFrom[i] == playerid)
		    {
		        BuyWeaponFrom[i] = -1; BuyWeaponPrice[i] = 0; BeenOfferedWeapon[i] = 0;
		        SendClientMessage(i, COLOR_YELLOW, "The player offering to sell you a weapon has disconnected from the server.");
		    }
		    if(VestBy[playerid] == i)
		    {
		        VestBy[i] = -1;
			    SendClientMessage(i, COLOR_YELLOW, "The player offering to sell you a vest has disconnected from the server.");

		    }
		   	FreePrice[playerid][i] = 0;
			DefendPrice[playerid][i] = 0;
			VestPrice[playerid][i] = 0;
		}
	}
	SellMaterialsTo[playerid] = -1; BuyMaterialsFrom[playerid] = -1; BuyMaterialsAmount[playerid] = 0; BuyMaterialsPrice[playerid] = 0; BeenOfferedMaterials[playerid] = 0;
	SellWeaponTo[playerid] = -1; BuyWeaponFrom[playerid] = -1; BuyWeaponPrice[playerid] = 0; BeenOfferedWeapon[playerid] = 0; WeedSeller[playerid] = -1; CrackSeller[playerid] = -1;
	// Clearing Caller
	if(BeingCalled[playerid] || Calling[playerid])
	{
	    if(BeingCalled[playerid]) SendClientMessage(Caller[playerid], COLOR_ORANGE, " The line went dead...");
    	else if(Calling[playerid]) SendClientMessage(Called[playerid], COLOR_ORANGE, " The line went dead...");
	    new params[1];
	    cmd_hangup(playerid, params);
	}
	ResetPlayerWeapons(playerid);
	ResetZaiatWeapons(playerid);
	return 1;
}

// Arrest Point
new Float:ap[3];
new Text3D:apt;

stock SaveArrestPoint()
{
	new file[16];
	format(file, sizeof(file), "arrest.cfg");
	if(!dini_Exists(file)) dini_Create(file);
	dini_FloatSet(file, "X", ap[0]);
	dini_FloatSet(file, "Y", ap[1]);
	dini_FloatSet(file, "Z", ap[2]);
	print("Arrest Point saved successfully.");
	return 1;
}

stock LoadArrestPoint()
{
	new file[16];
	format(file, sizeof(file), "arrest.cfg");
	if(!dini_Exists(file)) dini_Create(file);
	ap[0] = dini_Float(file, "X");
	ap[1] = dini_Float(file, "Y");
	ap[2] = dini_Float(file, "Z");
	apt = CreateDynamic3DTextLabel("Arrest Point\n{FFFF00}/arrest to arrest a suspect", COLOR_RED, ap[0], ap[1], ap[2], 12);
	print("Arrest Point loaded successfully.");
	return 1;
}

// Factions Settings
enum facInfo
{
	fRank0[32],
	fRank1[32],
	fRank2[32],
	fRank3[32],
	fRank4[32],
	fRank5[32],
	fRank6[32],
	fCars[26],
	fDiv1[8],
	fDiv2[8],
	fDiv3[8],
	fDiv4[8]

}
new FacInfo[MAX_FACTIONS][facInfo];

stock SaveFactions()
{
	// SAPD
	new file[64];
	format(file, sizeof(file), "factions/SAPD.ini");
	if(!dini_Exists(file)) dini_Create(file);
	dini_Set(file, "Rank0", FacInfo[1][fRank0]);
	dini_Set(file, "Rank1", FacInfo[1][fRank1]);
	dini_Set(file, "Rank2", FacInfo[1][fRank2]);
	dini_Set(file, "Rank3", FacInfo[1][fRank3]);
	dini_Set(file, "Rank4", FacInfo[1][fRank4]);
	dini_Set(file, "Rank5", FacInfo[1][fRank5]);
	dini_Set(file, "Rank6", FacInfo[1][fRank6]);
	dini_Set(file, "Div1", FacInfo[1][fDiv1]);
	dini_Set(file, "Div2", FacInfo[1][fDiv2]);
	dini_Set(file, "Div3", FacInfo[1][fDiv3]);
	dini_Set(file, "Div4", FacInfo[1][fDiv4]);
	print("SAPD files saved successfully.");
	// Government
	format(file, sizeof(file), "factions/GOV.ini");
	if(!dini_Exists(file)) dini_Create(file);
	dini_Set(file, "Rank0", FacInfo[2][fRank0]);
	dini_Set(file, "Rank1", FacInfo[2][fRank1]);
	dini_Set(file, "Rank2", FacInfo[2][fRank2]);
	dini_Set(file, "Rank3", FacInfo[2][fRank3]);
	dini_Set(file, "Rank4", FacInfo[2][fRank4]);
	dini_Set(file, "Rank5", FacInfo[2][fRank5]);
	dini_Set(file, "Rank6", FacInfo[2][fRank6]);
    dini_IntSet(file, "TaxPercent", TaxPercent);
	dini_IntSet(file, "TaxVault", TaxMoney);
	print("Government files saved successfully.");
	// Hitman Agency
	format(file, sizeof(file), "factions/HA.ini");
	if(!dini_Exists(file)) dini_Create(file);
	dini_Set(file, "Rank0", FacInfo[3][fRank0]);
	dini_Set(file, "Rank1", FacInfo[3][fRank1]);
	dini_Set(file, "Rank2", FacInfo[3][fRank2]);
	dini_Set(file, "Rank3", FacInfo[3][fRank3]);
	dini_Set(file, "Rank4", FacInfo[3][fRank4]);
	dini_Set(file, "Rank5", FacInfo[3][fRank5]);
	dini_Set(file, "Rank6", FacInfo[3][fRank6]);
	print("Hitman Agency files saved successfully.");
	// News Agency
	format(file, sizeof(file), "factions/NA.ini");
	if(!dini_Exists(file)) dini_Create(file);
	dini_Set(file, "Rank0", FacInfo[4][fRank0]);
	dini_Set(file, "Rank1", FacInfo[4][fRank1]);
	dini_Set(file, "Rank2", FacInfo[4][fRank2]);
	dini_Set(file, "Rank3", FacInfo[4][fRank3]);
	dini_Set(file, "Rank4", FacInfo[4][fRank4]);
	dini_Set(file, "Rank5", FacInfo[4][fRank5]);
	dini_Set(file, "Rank6", FacInfo[4][fRank6]);
	dini_IntSet(file, "Vault", NewsMoney);
	print("News Agency files saved successfully.");
	return 1;
}

stock LoadFactions()
{
	// SAPD
    new file[64];
	format(file, sizeof(file), "factions/SAPD.ini");
	format(FacInfo[1][fRank0], 32, "%s", dini_Get(file, "Rank0"));
	format(FacInfo[1][fRank1], 32, "%s", dini_Get(file, "Rank1"));
	format(FacInfo[1][fRank2], 32, "%s", dini_Get(file, "Rank2"));
	format(FacInfo[1][fRank3], 32, "%s", dini_Get(file, "Rank3"));
	format(FacInfo[1][fRank4], 32, "%s", dini_Get(file, "Rank4"));
	format(FacInfo[1][fRank5], 32, "%s", dini_Get(file, "Rank5"));
	format(FacInfo[1][fRank6], 32, "%s", dini_Get(file, "Rank6"));
	format(FacInfo[1][fDiv1], 8, "%s", dini_Get(file, "Div1"));
	format(FacInfo[1][fDiv2], 8, "%s", dini_Get(file, "Div2"));
	format(FacInfo[1][fDiv3], 8, "%s", dini_Get(file, "Div3"));
	format(FacInfo[1][fDiv4], 8, "%s", dini_Get(file, "Div4"));
	print("SAPD files loaded successfully.");
	// Government
	format(file, sizeof(file), "factions/GOV.ini");
	format(FacInfo[2][fRank0], 32, "%s", dini_Get(file, "Rank0"));
	format(FacInfo[2][fRank1], 32, "%s", dini_Get(file, "Rank1"));
	format(FacInfo[2][fRank2], 32, "%s", dini_Get(file, "Rank2"));
	format(FacInfo[2][fRank3], 32, "%s", dini_Get(file, "Rank3"));
	format(FacInfo[2][fRank4], 32, "%s", dini_Get(file, "Rank4"));
	format(FacInfo[2][fRank5], 32, "%s", dini_Get(file, "Rank5"));
	format(FacInfo[2][fRank6], 32, "%s", dini_Get(file, "Rank6"));
	TaxPercent = dini_Int(file, "TaxPercent");
	TaxMoney = dini_Int(file, "TaxVault");
	print("Government files loaded successfully.");
	// Hitman Agency
	format(file, sizeof(file), "factions/HA.ini");
	format(FacInfo[3][fRank0], 32, "%s", dini_Get(file, "Rank0"));
	format(FacInfo[3][fRank1], 32, "%s", dini_Get(file, "Rank1"));
	format(FacInfo[3][fRank2], 32, "%s", dini_Get(file, "Rank2"));
	format(FacInfo[3][fRank3], 32, "%s", dini_Get(file, "Rank3"));
	format(FacInfo[3][fRank4], 32, "%s", dini_Get(file, "Rank4"));
	format(FacInfo[3][fRank5], 32, "%s", dini_Get(file, "Rank5"));
	format(FacInfo[3][fRank6], 32, "%s", dini_Get(file, "Rank6"));
	print("Hitman Agency files loaded successfully.");
	// News Agency
	format(file, sizeof(file), "factions/NA.ini");
	format(FacInfo[4][fRank0], 32, "%s", dini_Get(file, "Rank0"));
	format(FacInfo[4][fRank1], 32, "%s", dini_Get(file, "Rank1"));
	format(FacInfo[4][fRank2], 32, "%s", dini_Get(file, "Rank2"));
	format(FacInfo[4][fRank3], 32, "%s", dini_Get(file, "Rank3"));
	format(FacInfo[4][fRank4], 32, "%s", dini_Get(file, "Rank4"));
	format(FacInfo[4][fRank5], 32, "%s", dini_Get(file, "Rank5"));
	format(FacInfo[4][fRank6], 32, "%s", dini_Get(file, "Rank6"));
	NewsMoney = dini_Int(file, "Vault");
	print("News Agency files loaded successfully.");
	return 1;
}

// Families
enum famInfo
{
	fTaken,
	fName[32],
	fMOTD[64],
	fColor,
	fLeader[MAX_PLAYER_NAME],
	fMembers,
	Float:fSafeX,
	Float:fSafeY,
	Float:fSafeZ,
	fMoney,
	fMats,
	fWeed,
	fCrack,
	fRank1[32],
	fRank2[32],
	fRank3[32],
	fRank4[32],
	fRank5[32],
	fRank6[32],
	fSkins[7],
	fStrikes,
	Text3D:fText,
	fPickup,
	fVeh[5],
	fVehType[5],
	Float:fVehCoX[5],
	Float:fVehCoY[5],
	Float:fVehCoZ[5],
	fVehCol1[5],
	fVehCol2[5],
	Float:fVehRot[5]
}
new FamInfo[MAX_FAMILIES][famInfo];


stock SaveFamilies()
{
	new idx = 1, File:file;
	new string[1300];
	while(idx < MAX_FAMILIES)
	{
	    format(string, sizeof(string), "%d|%s|%s|%d|%s|%d|%f|%f|%f|%d|%d|%d|%d|%s|%s|%s|%s|%s|%s|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d\r\n",
		FamInfo[idx][fTaken],
		FamInfo[idx][fName],
		FamInfo[idx][fMOTD],
		FamInfo[idx][fColor],
		FamInfo[idx][fLeader],
		FamInfo[idx][fMembers],
		FamInfo[idx][fSafeX],
		FamInfo[idx][fSafeY],
		FamInfo[idx][fSafeZ],
		FamInfo[idx][fMoney],
		FamInfo[idx][fMats],
		FamInfo[idx][fWeed],
		FamInfo[idx][fCrack],
		FamInfo[idx][fRank1],
		FamInfo[idx][fRank2],
		FamInfo[idx][fRank3],
		FamInfo[idx][fRank4],
		FamInfo[idx][fRank5],
		FamInfo[idx][fRank6],
		FamInfo[idx][fSkins][0],
		FamInfo[idx][fSkins][1],
		FamInfo[idx][fSkins][2],
		FamInfo[idx][fSkins][3],
		FamInfo[idx][fSkins][4],
		FamInfo[idx][fSkins][5],
		FamInfo[idx][fSkins][6],
		FamInfo[idx][fStrikes],
		FamInfo[idx][fVehType][0], // Veh 1
		FamInfo[idx][fVehType][1], // Veh 2
		FamInfo[idx][fVehType][2], // Veh 3
		FamInfo[idx][fVehType][3], // Veh 4
		FamInfo[idx][fVehType][4], // Veh 5
		FamInfo[idx][fVehCoX][0], // Veh 1 Coords
		FamInfo[idx][fVehCoY][0],
		FamInfo[idx][fVehCoZ][0],
		FamInfo[idx][fVehCoX][1], // Veh 2 Coords
		FamInfo[idx][fVehCoY][1],
		FamInfo[idx][fVehCoZ][1],
		FamInfo[idx][fVehCoX][2], // Veh 3 Coords
		FamInfo[idx][fVehCoY][2],
		FamInfo[idx][fVehCoZ][2],
		FamInfo[idx][fVehCoX][3], // Veh 4 Coords
		FamInfo[idx][fVehCoY][3],
		FamInfo[idx][fVehCoZ][3],
		FamInfo[idx][fVehCoX][4], // Veh 5 Coords
		FamInfo[idx][fVehCoY][4],
		FamInfo[idx][fVehCoZ][4],
		FamInfo[idx][fVehRot][0],
		FamInfo[idx][fVehRot][1],
		FamInfo[idx][fVehRot][2],
		FamInfo[idx][fVehRot][3],
		FamInfo[idx][fVehRot][4],
		FamInfo[idx][fVehCol1][0],
		FamInfo[idx][fVehCol1][1],
		FamInfo[idx][fVehCol1][2],
		FamInfo[idx][fVehCol1][3],
		FamInfo[idx][fVehCol1][4],
		FamInfo[idx][fVehCol2][0],
		FamInfo[idx][fVehCol2][1],
		FamInfo[idx][fVehCol2][2],
		FamInfo[idx][fVehCol2][3],
		FamInfo[idx][fVehCol2][4]);
	    if(idx == 1)
	    {
	        file = fopen("families.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("families.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Families saved successfully.");
}

stock LoadFamilies()
{
	new finfo[62][48];
	new string[512];
	new File:file = fopen("families.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_FAMILIES)
		{
		    fread(file, string);
		    split(string, finfo, '|');
			FamInfo[idx][fTaken] = strval(finfo[0]);
			format(FamInfo[idx][fName], 32, "%s", finfo[1]);
			format(FamInfo[idx][fMOTD], 64, "%s", finfo[2]);
			FamInfo[idx][fColor] = strval(finfo[3]);
			format(FamInfo[idx][fLeader], MAX_PLAYER_NAME, "%s", finfo[4]);
			FamInfo[idx][fMembers] = strval(finfo[5]);
			FamInfo[idx][fSafeX] = floatstr(finfo[6]);
			FamInfo[idx][fSafeY] = floatstr(finfo[7]);
			FamInfo[idx][fSafeZ] = floatstr(finfo[8]);
			FamInfo[idx][fMoney] = strval(finfo[9]);
			FamInfo[idx][fMats] = strval(finfo[10]);
			FamInfo[idx][fWeed] = strval(finfo[11]);
			FamInfo[idx][fCrack] = strval(finfo[12]);
			format(FamInfo[idx][fRank1], 32, "%s", finfo[13]);
			format(FamInfo[idx][fRank2], 32, "%s", finfo[14]);
			format(FamInfo[idx][fRank3], 32, "%s", finfo[15]);
			format(FamInfo[idx][fRank4], 32, "%s", finfo[16]);
			format(FamInfo[idx][fRank5], 32, "%s", finfo[17]);
			format(FamInfo[idx][fRank6], 32, "%s", finfo[18]);
			FamInfo[idx][fSkins][0] = strval(finfo[19]);
			FamInfo[idx][fSkins][1] = strval(finfo[20]);
			FamInfo[idx][fSkins][2] = strval(finfo[21]);
			FamInfo[idx][fSkins][3] = strval(finfo[22]);
			FamInfo[idx][fSkins][4] = strval(finfo[23]);
			FamInfo[idx][fSkins][5] = strval(finfo[24]);
			FamInfo[idx][fSkins][6] = strval(finfo[25]);
			FamInfo[idx][fStrikes] = strval(finfo[26]);
			FamInfo[idx][fVehType][0] = strval(finfo[27]);
			FamInfo[idx][fVehType][1] = strval(finfo[28]);
			FamInfo[idx][fVehType][2] = strval(finfo[29]);
			FamInfo[idx][fVehType][3] = strval(finfo[30]);
			FamInfo[idx][fVehType][4] = strval(finfo[31]);
			FamInfo[idx][fVehCoX][0] = floatstr(finfo[32]);
			FamInfo[idx][fVehCoY][0] = floatstr(finfo[33]);
			FamInfo[idx][fVehCoZ][0] = floatstr(finfo[34]);
			FamInfo[idx][fVehCoX][1] = floatstr(finfo[35]);
			FamInfo[idx][fVehCoY][1] = floatstr(finfo[36]);
			FamInfo[idx][fVehCoZ][1] = floatstr(finfo[37]);
			FamInfo[idx][fVehCoX][2] = floatstr(finfo[38]);
			FamInfo[idx][fVehCoY][2] = floatstr(finfo[39]);
			FamInfo[idx][fVehCoZ][2] = floatstr(finfo[40]);
			FamInfo[idx][fVehCoX][3] = floatstr(finfo[41]);
			FamInfo[idx][fVehCoY][3] = floatstr(finfo[42]);
			FamInfo[idx][fVehCoZ][3] = floatstr(finfo[43]);
			FamInfo[idx][fVehCoX][4] = floatstr(finfo[44]);
			FamInfo[idx][fVehCoY][4] = floatstr(finfo[45]);
			FamInfo[idx][fVehCoZ][4] = floatstr(finfo[46]);
			FamInfo[idx][fVehRot][0] = strval(finfo[47]); // Rot
			FamInfo[idx][fVehRot][1] = strval(finfo[48]);
			FamInfo[idx][fVehRot][2] = strval(finfo[49]);
			FamInfo[idx][fVehRot][3] = strval(finfo[50]);
			FamInfo[idx][fVehRot][4] = strval(finfo[51]);
			FamInfo[idx][fVehCol1][0] = strval(finfo[52]); // Colors
			FamInfo[idx][fVehCol1][1] = strval(finfo[53]);
			FamInfo[idx][fVehCol1][2] = strval(finfo[54]);
			FamInfo[idx][fVehCol1][3] = strval(finfo[55]);
			FamInfo[idx][fVehCol1][4] = strval(finfo[56]);
			FamInfo[idx][fVehCol2][0] = strval(finfo[57]);
			FamInfo[idx][fVehCol2][1] = strval(finfo[58]);
			FamInfo[idx][fVehCol2][2] = strval(finfo[59]);
			FamInfo[idx][fVehCol2][3] = strval(finfo[60]);
			FamInfo[idx][fVehCol2][4] = strval(finfo[61]);

			if(FamInfo[idx][fSafeX] != 0 && FamInfo[idx][fSafeY] != 0 && FamInfo[idx][fSafeZ] != 0)
			{
			    FamInfo[idx][fPickup] = CreateDynamicPickup(1239, 1, FamInfo[idx][fSafeX], FamInfo[idx][fSafeY], FamInfo[idx][fSafeZ], -1);
				format(string, sizeof(string), "%s's Safe", FamInfo[idx][fName]);
		    	FamInfo[idx][fText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, FamInfo[idx][fSafeX], FamInfo[idx][fSafeY], FamInfo[idx][fSafeZ]+0.3, 15);
			}
			for(new i=0; i<5; i++)
			{
			    if(FamInfo[idx][fVehType][i])
			    {
			        FamInfo[idx][fVeh][i] = CreateVehicle(FamInfo[idx][fVehType][i], FamInfo[idx][fVehCoX][i], FamInfo[idx][fVehCoY][i], FamInfo[idx][fVehCoZ][i], FamInfo[idx][fVehRot][i], FamInfo[idx][fVehCol1][i], FamInfo[idx][fVehCol2][i], 1200);
                   	ChangeVehicleColor(FamInfo[idx][fVeh][i], FamInfo[idx][fVehCol1][i], FamInfo[idx][fVehCol2][i]);
                   	Fam[FamInfo[idx][fVeh][i]] = idx;
			    }
			}
			idx++;
	    }
	}
	print("Families loaded successfully.");
	return 1;
}

stock SaveChar(playerid)
{
	if(IsPlayerLoggedIn(playerid))
	{
	    if(PlayerInfo[playerid][pTutorial])
	    {
		    new file[64];
			format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
			if(!dini_Exists(file)) dini_Create(file);
			if(!Event[playerid])
			{
				PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
				PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
				GetPlayerPos(playerid, PlayerInfo[playerid][pX], PlayerInfo[playerid][pY], PlayerInfo[playerid][pZ]);
				GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
				GetPlayerArmour(playerid, PlayerInfo[playerid][pArmor]);
			}
			if(PlayerInfo[playerid][pLevel] == 0) PlayerInfo[playerid][pLevel] = 1;
			PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
			if(PlayerInfo[playerid][vModel])
			{
				GetVehiclePos(PlayerInfo[playerid][pVeh],PlayerInfo[playerid][vX], PlayerInfo[playerid][vY], PlayerInfo[playerid][vZ]);
				GetVehicleZAngle(PlayerInfo[playerid][pVeh],PlayerInfo[playerid][vA]);
			}
			if(PlayerInfo[playerid][vVModel])
			{
				GetVehiclePos(PlayerInfo[playerid][pVVeh],PlayerInfo[playerid][vVX], PlayerInfo[playerid][vVY], PlayerInfo[playerid][vVZ]);
				GetVehicleZAngle(PlayerInfo[playerid][pVVeh],PlayerInfo[playerid][vVA]);
			}
			SaveZaiatAmmo(playerid);
			// Save
			dini_Set(file, "IP", PlayerInfo[playerid][pIP]);
			dini_IntSet(file, "Gender", PlayerInfo[playerid][pGender]);
			dini_IntSet(file, "Level", PlayerInfo[playerid][pLevel]);
			dini_IntSet(file, "Minutes", PlayerInfo[playerid][pMinutes]);
			dini_IntSet(file, "Hours", PlayerInfo[playerid][pHours]);
			dini_IntSet(file, "Age", PlayerInfo[playerid][pAge]);
			dini_IntSet(file, "Cash", PlayerInfo[playerid][pMoney]);
			dini_IntSet(file, "Bank", PlayerInfo[playerid][pBank]);
			dini_IntSet(file, "Model", PlayerInfo[playerid][pModel]);
			dini_IntSet(file, "Admin", PlayerInfo[playerid][pAdmin]);
			dini_IntSet(file, "pBanned", PlayerInfo[playerid][pBanned]);
			dini_FloatSet(file, "X", PlayerInfo[playerid][pX]);
			dini_FloatSet(file, "Y", PlayerInfo[playerid][pY]);
			dini_FloatSet(file, "Z", PlayerInfo[playerid][pZ]);
			dini_IntSet(file, "Int", PlayerInfo[playerid][pInt]);
			dini_IntSet(file, "VW", PlayerInfo[playerid][pVW]);
			dini_IntSet(file, "Fac", PlayerInfo[playerid][pFac]);
			dini_IntSet(file, "FacRank", PlayerInfo[playerid][pFacRank]);
			dini_IntSet(file, "FacLeader", PlayerInfo[playerid][pFacLeader]);
			dini_IntSet(file, "FacDiv", PlayerInfo[playerid][pFacDiv]);
			dini_IntSet(file, "FacDivLeader", PlayerInfo[playerid][pFacDivLeader]);
			dini_IntSet(file, "Duty", PlayerInfo[playerid][pFacDuty]);
			dini_IntSet(file, "wSlot0", PlayerInfo[playerid][pWeapon][0]);
			dini_IntSet(file, "wSlot0Ammo", PlayerInfo[playerid][pWeaponAmmo][0]);
			dini_IntSet(file, "wSlot1", PlayerInfo[playerid][pWeapon][1]);
			dini_IntSet(file, "wSlot1Ammo", PlayerInfo[playerid][pWeaponAmmo][1]);
			dini_IntSet(file, "wSlot2", PlayerInfo[playerid][pWeapon][2]);
			dini_IntSet(file, "wSlot2Ammo", PlayerInfo[playerid][pWeaponAmmo][2]);
			dini_IntSet(file, "wSlot3", PlayerInfo[playerid][pWeapon][3]);
			dini_IntSet(file, "wSlot3Ammo", PlayerInfo[playerid][pWeaponAmmo][3]);
			dini_IntSet(file, "wSlot4", PlayerInfo[playerid][pWeapon][4]);
			dini_IntSet(file, "wSlot4Ammo", PlayerInfo[playerid][pWeaponAmmo][4]);
			dini_IntSet(file, "wSlot5", PlayerInfo[playerid][pWeapon][5]);
	        dini_IntSet(file, "wSlot5Ammo", PlayerInfo[playerid][pWeaponAmmo][5]);
			dini_IntSet(file, "wSlot6", PlayerInfo[playerid][pWeapon][6]);
			dini_IntSet(file, "wSlot6Ammo", PlayerInfo[playerid][pWeaponAmmo][6]);
			dini_IntSet(file, "wSlot7", PlayerInfo[playerid][pWeapon][7]);
			dini_IntSet(file, "wSlot7Ammo", PlayerInfo[playerid][pWeaponAmmo][7]);
			dini_IntSet(file, "wSlot8", PlayerInfo[playerid][pWeapon][8]);
			dini_IntSet(file, "wSlot8Ammo", PlayerInfo[playerid][pWeaponAmmo][8]);
			dini_IntSet(file, "wSlot9", PlayerInfo[playerid][pWeapon][9]);
			dini_IntSet(file, "wSlot9Ammo", PlayerInfo[playerid][pWeaponAmmo][9]);
			dini_IntSet(file, "wSlot10", PlayerInfo[playerid][pWeapon][10]);
			dini_IntSet(file, "wSlot10Ammo", PlayerInfo[playerid][pWeaponAmmo][10]);
			dini_IntSet(file, "wSlot11", PlayerInfo[playerid][pWeapon][11]);
			dini_IntSet(file, "wSlot11Ammo", PlayerInfo[playerid][pWeaponAmmo][11]);
			dini_IntSet(file, "wSlot12", PlayerInfo[playerid][pWeapon][12]);
			dini_IntSet(file, "wSlot12Ammo", PlayerInfo[playerid][pWeaponAmmo][12]);
			dini_IntSet(file, "Hospital", PlayerInfo[playerid][pHospital]);
			dini_IntSet(file, "Business", PlayerInfo[playerid][pBiz]);
			dini_IntSet(file, "VBusiness", PlayerInfo[playerid][pVBiz]);
			dini_IntSet(file, "House", PlayerInfo[playerid][pHouse]);
			dini_IntSet(file, "HouseOwner", PlayerInfo[playerid][pSafeAdmin]);
			dini_IntSet(file, "vHouse", PlayerInfo[playerid][pVHouse]);
			dini_IntSet(file, "BizOwner", PlayerInfo[playerid][pOwner]);
			dini_IntSet(file, "Job", PlayerInfo[playerid][pJob]);
			dini_IntSet(file, "Mechanic", PlayerInfo[playerid][pJobSkill][JOB_MECHANIC]);
			dini_IntSet(file, "Lawyer", PlayerInfo[playerid][pJobSkill][JOB_LAWYER]);
			dini_IntSet(file, "Trucker", PlayerInfo[playerid][pJobSkill][JOB_TRUCKER]);
			dini_IntSet(file, "Fisher", PlayerInfo[playerid][pJobSkill][JOB_FISHER]);
			dini_IntSet(file, "WDealer", PlayerInfo[playerid][pJobSkill][JOB_WDEALER]);
			dini_IntSet(file, "WSmuggler", PlayerInfo[playerid][pJobSkill][JOB_WSMUGGLER]);
			dini_IntSet(file, "DDealer", PlayerInfo[playerid][pJobSkill][JOB_DDEALER]);
			dini_IntSet(file, "DSmuggler", PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER]);
			dini_IntSet(file, "CarJacker", PlayerInfo[playerid][pJobSkill][JOB_CARJACKER]);
			dini_IntSet(file, "Boxer", PlayerInfo[playerid][pJobSkill][JOB_BOXER]);
			dini_IntSet(file, "Fisher", PlayerInfo[playerid][pJobSkill][JOB_FISHER]);
			dini_IntSet(file, "TPackages", PlayerInfo[playerid][pTPackages]);
			dini_IntSet(file, "WPackages", PlayerInfo[playerid][pMPackages]);
			dini_IntSet(file, "Materials", PlayerInfo[playerid][pMaterials]);
			dini_IntSet(file, "HasCellphone", PlayerInfo[playerid][pHasCellphone]);
			dini_IntSet(file, "Cellphone", PlayerInfo[playerid][pCellphone]);
			dini_IntSet(file, "Phonebook", PlayerInfo[playerid][pPhonebook]);
			dini_IntSet(file, "Dice", PlayerInfo[playerid][pDice]);
			dini_IntSet(file, "Cigar", PlayerInfo[playerid][pCigar]);
			dini_IntSet(file, "Speedo", PlayerInfo[playerid][pSpeedo]);
			dini_IntSet(file, "Sprunk", PlayerInfo[playerid][pSprunk]);
			dini_IntSet(file, "Spray", PlayerInfo[playerid][pSpray]);
			dini_IntSet(file, "Rope", PlayerInfo[playerid][pRope]);
			dini_IntSet(file, "Blindfold", PlayerInfo[playerid][pBlindfold]);
			dini_IntSet(file, "WT", PlayerInfo[playerid][pWT]);
			dini_IntSet(file, "WTC", PlayerInfo[playerid][pWTC]);
			dini_IntSet(file, "Gas", PlayerInfo[playerid][pGas]);
			dini_IntSet(file, "Radio", PlayerInfo[playerid][pRadio]);
			dini_FloatSet(file, "Health", PlayerInfo[playerid][pHealth]);
			dini_FloatSet(file, "Armor", PlayerInfo[playerid][pArmor]);
			dini_IntSet(file, "Internet", PlayerInfo[playerid][pInternet]);
			dini_IntSet(file, "Song1", PlayerInfo[playerid][pSong][1]);
			dini_IntSet(file, "Song2", PlayerInfo[playerid][pSong][2]);
			dini_IntSet(file, "Prison", PlayerInfo[playerid][pPrison]);
			dini_IntSet(file, "PrisonTime", PlayerInfo[playerid][pPrisonTime]);
			dini_Set(file, "PrisonReason", PlayerInfo[playerid][pPrisonReason]);
			dini_Set(file, "PrisonBy", PlayerInfo[playerid][pPrisonBy]);
			dini_IntSet(file, "Wanted", PlayerInfo[playerid][pWanted]);
			dini_Set(file, "Wanted1", PlayerInfo[playerid][pWanted1]);
			dini_Set(file, "Wanted2", PlayerInfo[playerid][pWanted2]);
			dini_Set(file, "Wanted3", PlayerInfo[playerid][pWanted3]);
			dini_Set(file, "Wanted4", PlayerInfo[playerid][pWanted4]);
			dini_Set(file, "Wanted5", PlayerInfo[playerid][pWanted5]);
			dini_Set(file, "Wanted6", PlayerInfo[playerid][pWanted6]);
			dini_IntSet(file, "Crimes", PlayerInfo[playerid][pCrimes]);
			dini_IntSet(file, "Arrested", PlayerInfo[playerid][pArrested]);
			dini_IntSet(file, "DPackages", PlayerInfo[playerid][pDPackages]);
			dini_IntSet(file, "Weed", PlayerInfo[playerid][pWeed]);
			dini_IntSet(file, "Crack", PlayerInfo[playerid][pCrack]);
			dini_IntSet(file, "Contract", PlayerInfo[playerid][pContract]);
			dini_Set(file, "ContractBy", PlayerInfo[playerid][pContractBy]);
			dini_IntSet(file, "Tutorial", PlayerInfo[playerid][pTutorial]);
			dini_IntSet(file, "Warns", PlayerInfo[playerid][pWarns]);
			dini_Set(file, "Warn1", PlayerInfo[playerid][pWarn1]);
			dini_Set(file, "Warn2", PlayerInfo[playerid][pWarn2]);
			dini_Set(file, "Warn3", PlayerInfo[playerid][pWarn3]);
			dini_Set(file, "Flag", PlayerInfo[playerid][pFlag]);
			dini_IntSet(file, "NMute", PlayerInfo[playerid][pNMute]);
			dini_IntSet(file, "SpawnFreeze", PlayerInfo[playerid][pSpawnFreeze]);
			dini_IntSet(file, "Fam", PlayerInfo[playerid][pFam]);
			dini_IntSet(file, "FamRank", PlayerInfo[playerid][pFamRank]);
			dini_IntSet(file, "CSuccess", PlayerInfo[playerid][pCSuccess]);
			dini_IntSet(file, "CFail", PlayerInfo[playerid][pCFail]);
			dini_IntSet(file, "Helper", PlayerInfo[playerid][pHelper]);
			dini_IntSet(file, "vModel", PlayerInfo[playerid][vModel]);
			dini_FloatSet(file, "vX", PlayerInfo[playerid][vX]);
			dini_FloatSet(file, "vY", PlayerInfo[playerid][vY]);
			dini_FloatSet(file, "vZ", PlayerInfo[playerid][vZ]);
			dini_FloatSet(file, "vA", PlayerInfo[playerid][vA]);
			dini_IntSet(file, "vC1", PlayerInfo[playerid][vC1]);
			dini_IntSet(file, "vC2", PlayerInfo[playerid][vC2]);
			dini_IntSet(file, "vPJ", PlayerInfo[playerid][vPJ]);
			dini_IntSet(file, "vLocked", PlayerInfo[playerid][vLocked]);
			dini_IntSet(file, "GangMod", PlayerInfo[playerid][pGangMod]);
			dini_IntSet(file, "FacMod", PlayerInfo[playerid][pFacMod]);
			dini_IntSet(file, "BanAppealer", PlayerInfo[playerid][pBanAppealer]);
			dini_IntSet(file, "CarLicense", PlayerInfo[playerid][pCarLic]);
			dini_Set(file, "Accent", PlayerInfo[playerid][pAccent]);
		 	dini_IntSet(file, "vModSlot0",PlayerInfo[playerid][pVehMod][0]);
			dini_IntSet(file, "vModSlot1",PlayerInfo[playerid][pVehMod][1]);
			dini_IntSet(file, "vModSlot2",PlayerInfo[playerid][pVehMod][2]);
			dini_IntSet(file, "vModSlot3",PlayerInfo[playerid][pVehMod][3]);
			dini_IntSet(file, "vModSlot4",PlayerInfo[playerid][pVehMod][4]);
			dini_IntSet(file, "vModSlot5",PlayerInfo[playerid][pVehMod][5]);
			dini_IntSet(file, "vModSlot6",PlayerInfo[playerid][pVehMod][6]);
			dini_IntSet(file, "vModSlot7",PlayerInfo[playerid][pVehMod][7]);
			dini_IntSet(file, "vModSlot8",PlayerInfo[playerid][pVehMod][8]);
			dini_IntSet(file, "vModSlot9",PlayerInfo[playerid][pVehMod][9]);
			dini_IntSet(file, "vModSlot10",PlayerInfo[playerid][pVehMod][10]);
			dini_IntSet(file, "vModSlot11",PlayerInfo[playerid][pVehMod][11]);
			dini_IntSet(file, "vModSlot12",PlayerInfo[playerid][pVehMod][12]);
			dini_IntSet(file, "vModSlot13",PlayerInfo[playerid][pVehMod][13]);
			dini_IntSet(file, "VIP", PlayerInfo[playerid][pVIP]);
			dini_IntSet(file, "VIPBuddy", PlayerInfo[playerid][pVIPBuddy]);
			dini_IntSet(file, "VIPDay", PlayerInfo[playerid][pVIPDay]);
			dini_IntSet(file, "VIPMonth", PlayerInfo[playerid][pVIPMonth]);
			dini_IntSet(file, "VIPHour", PlayerInfo[playerid][pVIPHour]);
			dini_IntSet(file, "VIPJob", PlayerInfo[playerid][pVIPJob]);
			dini_IntSet(file, "VIPTemp", PlayerInfo[playerid][pVIPTemp]);
			// VIP CAR
			dini_IntSet(file, "vVModel", PlayerInfo[playerid][vVModel]);
			dini_FloatSet(file, "vVX", PlayerInfo[playerid][vVX]);
			dini_FloatSet(file, "vVY", PlayerInfo[playerid][vVY]);
			dini_FloatSet(file, "vVZ", PlayerInfo[playerid][vVZ]);
			dini_FloatSet(file, "vVA", PlayerInfo[playerid][vVA]);
			dini_IntSet(file, "vVC1", PlayerInfo[playerid][vVC1]);
			dini_IntSet(file, "vVC2", PlayerInfo[playerid][vVC2]);
			dini_IntSet(file, "vVPJ", PlayerInfo[playerid][vVPJ]);
			dini_IntSet(file, "vVLocked", PlayerInfo[playerid][vVLocked]);
		 	dini_IntSet(file, "vVModSlot0",PlayerInfo[playerid][pVVehMod][0]);
			dini_IntSet(file, "vVModSlot1",PlayerInfo[playerid][pVVehMod][1]);
			dini_IntSet(file, "vVModSlot2",PlayerInfo[playerid][pVVehMod][2]);
			dini_IntSet(file, "vVModSlot3",PlayerInfo[playerid][pVVehMod][3]);
			dini_IntSet(file, "vVModSlot4",PlayerInfo[playerid][pVVehMod][4]);
			dini_IntSet(file, "vVModSlot5",PlayerInfo[playerid][pVVehMod][5]);
			dini_IntSet(file, "vVModSlot6",PlayerInfo[playerid][pVVehMod][6]);
			dini_IntSet(file, "vVModSlot7",PlayerInfo[playerid][pVVehMod][7]);
			dini_IntSet(file, "vVModSlot8",PlayerInfo[playerid][pVVehMod][8]);
			dini_IntSet(file, "vVModSlot9",PlayerInfo[playerid][pVVehMod][9]);
			dini_IntSet(file, "vVModSlot10",PlayerInfo[playerid][pVVehMod][10]);
			dini_IntSet(file, "vVModSlot11",PlayerInfo[playerid][pVVehMod][11]);
			dini_IntSet(file, "vVModSlot12",PlayerInfo[playerid][pVVehMod][12]);
			dini_IntSet(file, "vVModSlot13",PlayerInfo[playerid][pVVehMod][13]);
			dini_IntSet(file, "DeliverTruck", PlayerInfo[playerid][pDeliverTruck]);
			dini_IntSet(file, "New", PlayerInfo[playerid][pNew]);
			dini_IntSet(file, "RefPoints", PlayerInfo[playerid][pRefPoints]);
			dini_IntSet(file, "Tester", PlayerInfo[playerid][pTester]);
			dini_IntSet(file, "FightStyle", PlayerInfo[playerid][pFightStyle]);
			dini_IntSet(file, "Scope", PlayerInfo[playerid][pScope]);
			dini_IntSet(file, "Cookies", PlayerInfo[playerid][pCookies]);
			dini_IntSet(file, "Oldskool", PlayerInfo[playerid][pOldskool]);
			dini_IntSet(file, "Reward", PlayerInfo[playerid][pReward]);
			dini_IntSet(file, "Fish1", PlayerInfo[playerid][pFish][0]);
			dini_IntSet(file, "Fish2", PlayerInfo[playerid][pFish][1]);
			dini_IntSet(file, "Fish3", PlayerInfo[playerid][pFish][2]);
			dini_IntSet(file, "Fish4", PlayerInfo[playerid][pFish][3]);
			dini_IntSet(file, "Fish5", PlayerInfo[playerid][pFish][4]);
			SaveToys(playerid, file);
			dini_IntSet(file, "Loyal", PlayerInfo[playerid][pLoyal]);
			dini_IntSet(file, "LoyalTag", PlayerInfo[playerid][pLoyalTag]);
			dini_IntSet(file, "LPoints", PlayerInfo[playerid][pLPoints]);
			dini_IntSet(file, "Gate1", PlayerInfo[playerid][pGate][0]);
			dini_IntSet(file, "Gate2", PlayerInfo[playerid][pGate][1]);
			dini_IntSet(file, "Gate3", PlayerInfo[playerid][pGate][2]);
		}
		// All Saved
		//SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}Your character files have saved successfully.");
	}
	return 1;
}

stock LoadChar(playerid)
{
    new file[64];
	format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
	// Logged in
	PlayerInfo[playerid][pLoggedIn] = 1;
	PlayerInfo[playerid][pSpawn] = 1;
	// Load
	format(PlayerInfo[playerid][pIP], 16, "%s", dini_Get(file, "IP"));
	PlayerInfo[playerid][pGender] = dini_Int(file, "Gender");
	PlayerInfo[playerid][pLevel] = dini_Int(file, "Level");
	if(PlayerInfo[playerid][pLevel] == 0) PlayerInfo[playerid][pLevel] = 1;
	PlayerInfo[playerid][pMinutes] = dini_Int(file, "Minutes");
	PlayerInfo[playerid][pHours] = dini_Int(file, "Hours");
	PlayerInfo[playerid][pAge] = dini_Int(file, "Age");
	PlayerInfo[playerid][pMoney] = dini_Int(file, "Cash");
	PlayerInfo[playerid][pBank] = dini_Int(file, "Bank");
	PlayerInfo[playerid][pModel] = dini_Int(file, "Model");
	PlayerInfo[playerid][pAdmin] = dini_Int(file, "Admin");
	PlayerInfo[playerid][pBanned] = dini_Int(file, "pBanned");
	PlayerInfo[playerid][pX]  = dini_Float(file, "X");
	PlayerInfo[playerid][pY] = dini_Float(file, "Y");
	PlayerInfo[playerid][pZ] = dini_Float(file, "Z");
	PlayerInfo[playerid][pInt] = dini_Int(file, "Int");
	PlayerInfo[playerid][pVW] = dini_Int(file, "VW");
	PlayerInfo[playerid][pFac] = dini_Int(file, "Fac");
	PlayerInfo[playerid][pFacRank] = dini_Int(file, "FacRank");
	PlayerInfo[playerid][pFacLeader] = dini_Int(file, "FacLeader");
	PlayerInfo[playerid][pFacDiv] = dini_Int(file, "FacDiv");
	PlayerInfo[playerid][pFacDivLeader] = dini_Int(file, "FacDivLeader");
	PlayerInfo[playerid][pFacDuty] = dini_Int(file, "Duty");
	PlayerInfo[playerid][pWeapon][0] = dini_Int(file, "wSlot0");
	PlayerInfo[playerid][pWeaponAmmo][0] = dini_Int(file, "wSlot0Ammo");
	PlayerInfo[playerid][pWeapon][1] = dini_Int(file, "wSlot1");
	PlayerInfo[playerid][pWeaponAmmo][1] = dini_Int(file, "wSlot1Ammo");
	PlayerInfo[playerid][pWeapon][2] = dini_Int(file, "wSlot2");
	PlayerInfo[playerid][pWeaponAmmo][2] = dini_Int(file, "wSlot2Ammo");
	PlayerInfo[playerid][pWeapon][3] = dini_Int(file, "wSlot3");
	PlayerInfo[playerid][pWeaponAmmo][3] = dini_Int(file, "wSlot3Ammo");
	PlayerInfo[playerid][pWeapon][4] = dini_Int(file, "wSlot4");
	PlayerInfo[playerid][pWeaponAmmo][4] = dini_Int(file, "wSlot4Ammo");
	PlayerInfo[playerid][pWeapon][5] = dini_Int(file, "wSlot5");
	PlayerInfo[playerid][pWeaponAmmo][5] = dini_Int(file, "wSlot5Ammo");
	PlayerInfo[playerid][pWeapon][6] = dini_Int(file, "wSlot6");
	PlayerInfo[playerid][pWeaponAmmo][6] = dini_Int(file, "wSlot6Ammo");
	PlayerInfo[playerid][pWeapon][7] = dini_Int(file, "wSlot7");
	PlayerInfo[playerid][pWeaponAmmo][7] = dini_Int(file, "wSlot7Ammo");
	PlayerInfo[playerid][pWeapon][8] = dini_Int(file, "wSlot8");
	PlayerInfo[playerid][pWeaponAmmo][8] = dini_Int(file, "wSlot8Ammo");
	PlayerInfo[playerid][pWeapon][9] = dini_Int(file, "wSlot9");
	PlayerInfo[playerid][pWeaponAmmo][9] = dini_Int(file, "wSlot9Ammo");
	PlayerInfo[playerid][pWeapon][10] = dini_Int(file, "wSlot10");
	PlayerInfo[playerid][pWeaponAmmo][10] = dini_Int(file, "wSlot10Ammo");
	PlayerInfo[playerid][pWeapon][11] = dini_Int(file, "wSlot11");
	PlayerInfo[playerid][pWeaponAmmo][11] = dini_Int(file, "wSlot11Ammo");
	PlayerInfo[playerid][pWeapon][12] = dini_Int(file, "wSlot12");
	PlayerInfo[playerid][pWeaponAmmo][12] = dini_Int(file, "wSlot12Ammo");
	PlayerInfo[playerid][pHospital] = dini_Int(file, "Hospital");
	PlayerInfo[playerid][pBiz] = dini_Int(file, "Business");
	PlayerInfo[playerid][pSafeAdmin] = dini_Int(file, "HouseOwner");
	PlayerInfo[playerid][pVBiz] = dini_Int(file, "VBusiness");
	PlayerInfo[playerid][pOwner] = dini_Int(file, "BizOwner");
	PlayerInfo[playerid][pJob] = dini_Int(file, "Job");
	PlayerInfo[playerid][pJobSkill][JOB_MECHANIC] = dini_Int(file, "Mechanic");
	PlayerInfo[playerid][pJobSkill][JOB_LAWYER] = dini_Int(file, "Lawyer");
	PlayerInfo[playerid][pJobSkill][JOB_TRUCKER] = dini_Int(file, "Trucker");
	PlayerInfo[playerid][pJobSkill][JOB_FISHER] = dini_Int(file, "Fisher");
	PlayerInfo[playerid][pJobSkill][JOB_WDEALER] = dini_Int(file, "WDealer");
	PlayerInfo[playerid][pJobSkill][JOB_WSMUGGLER] = dini_Int(file, "WSmuggler");
	PlayerInfo[playerid][pJobSkill][JOB_DDEALER] = dini_Int(file, "DDealer");
	PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] = dini_Int(file, "DSmuggler");
	PlayerInfo[playerid][pJobSkill][JOB_CARJACKER] = dini_Int(file, "CarJacker");
    PlayerInfo[playerid][pJobSkill][JOB_BOXER] = dini_Int(file, "Boxer");
    PlayerInfo[playerid][pJobSkill][JOB_FISHER] = dini_Int(file, "Fisher");
	PlayerInfo[playerid][pTPackages] = dini_Int(file, "TPackages");
	PlayerInfo[playerid][pMPackages] = dini_Int(file, "WPackages");
	PlayerInfo[playerid][pHasCellphone] = dini_Int(file, "HasCellphone");
	PlayerInfo[playerid][pCellphone] = 	dini_Int(file, "Cellphone");
	PlayerInfo[playerid][pPhonebook] = 	dini_Int(file, "Phonebook");
	PlayerInfo[playerid][pDice] = dini_Int(file, "Dice");
	PlayerInfo[playerid][pCigar] = dini_Int(file, "Cigar");
	PlayerInfo[playerid][pSpeedo] = dini_Int(file, "Speedo");
	PlayerInfo[playerid][pSprunk] = dini_Int(file, "Sprunk");
	PlayerInfo[playerid][pSpray] = dini_Int(file, "Spray");
	PlayerInfo[playerid][pRope] = dini_Int(file, "Rope");
	PlayerInfo[playerid][pBlindfold] = dini_Int(file, "Blindfold");
	PlayerInfo[playerid][pMaterials] = dini_Int(file, "Materials");
 	PlayerInfo[playerid][pWT] = dini_Int(file, "WT");
	PlayerInfo[playerid][pWTC] = dini_Int(file, "WTC");
	PlayerInfo[playerid][pGas] = dini_Int(file, "Gas");
	PlayerInfo[playerid][pRadio] = dini_Int(file, "Radio");
	PlayerInfo[playerid][pHealth] = dini_Float(file, "Health");
	PlayerInfo[playerid][pArmor] = dini_Float(file, "Armor");
	PlayerInfo[playerid][pInternet] = dini_Int(file, "Internet");
	PlayerInfo[playerid][pSong][1] = dini_Int(file, "Song1");
	PlayerInfo[playerid][pSong][2] = dini_Int(file, "Song2");
	PlayerInfo[playerid][pPrison] = dini_Int(file, "Prison");
	PlayerInfo[playerid][pPrisonTime] = dini_Int(file, "PrisonTime");
	format(PlayerInfo[playerid][pPrisonReason], 64, "%s", dini_Get(file, "PrisonReason"));
	format(PlayerInfo[playerid][pPrisonBy], 32, "%s", dini_Get(file, "PrisonBy"));
	PlayerInfo[playerid][pWanted] = dini_Int(file, "Wanted");
	format(PlayerInfo[playerid][pWanted1], 64, "%s", dini_Get(file, "Wanted1"));
	format(PlayerInfo[playerid][pWanted2], 64, "%s", dini_Get(file, "Wanted2"));
	format(PlayerInfo[playerid][pWanted3], 64, "%s", dini_Get(file, "Wanted3"));
	format(PlayerInfo[playerid][pWanted4], 64, "%s", dini_Get(file, "Wanted4"));
	format(PlayerInfo[playerid][pWanted5], 64, "%s", dini_Get(file, "Wanted5"));
	format(PlayerInfo[playerid][pWanted6], 64, "%s", dini_Get(file, "Wanted6"));
	PlayerInfo[playerid][pCrimes] = dini_Int(file, "Crimes");
	PlayerInfo[playerid][pArrested] = dini_Int(file, "Arrested");
	PlayerInfo[playerid][pDPackages] = dini_Int(file, "DPackages");
	PlayerInfo[playerid][pWeed] = dini_Int(file, "Weed");
	PlayerInfo[playerid][pCrack] = dini_Int(file, "Crack");
	PlayerInfo[playerid][pContract] = dini_Int(file, "Contract");
	format(PlayerInfo[playerid][pContractBy], 32, "%s", dini_Get(file, "ContractBy"));
	PlayerInfo[playerid][pTutorial] = dini_Int(file, "Tutorial");
	PlayerInfo[playerid][pWarns] = dini_Int(file, "Warns");
	format(PlayerInfo[playerid][pWarn1], 64, "%s", dini_Get(file, "Warn1"));
	format(PlayerInfo[playerid][pWarn2], 64, "%s", dini_Get(file, "Warn2"));
	format(PlayerInfo[playerid][pWarn3], 64, "%s", dini_Get(file, "Warn3"));
	format(PlayerInfo[playerid][pFlag], 64, "%s", dini_Get(file, "Flag"));
	PlayerInfo[playerid][pNMute] = dini_Int(file, "NMute");
	PlayerInfo[playerid][pSpawnFreeze] = dini_Int(file, "SpawnFreeze");
	PlayerInfo[playerid][pFam] = dini_Int(file, "Fam");
	PlayerInfo[playerid][pFamRank] = dini_Int(file, "FamRank");
	PlayerInfo[playerid][pCSuccess] = dini_Int(file, "CSuccess");
	PlayerInfo[playerid][pCFail] = dini_Int(file, "CFail");
	PlayerInfo[playerid][pHouse] = dini_Int(file, "House");
	PlayerInfo[playerid][pVHouse] = dini_Int(file, "vHouse");
	PlayerInfo[playerid][pHelper] = dini_Int(file, "Helper");
	PlayerInfo[playerid][vModel] = dini_Int(file, "vModel");
	PlayerInfo[playerid][vX] = dini_Float(file, "vX");
	PlayerInfo[playerid][vY] = dini_Float(file, "vY");
	PlayerInfo[playerid][vZ] = dini_Float(file, "vZ");
	PlayerInfo[playerid][vA] = dini_Float(file, "vA");
	PlayerInfo[playerid][vC1] = dini_Int(file, "vC1");
	PlayerInfo[playerid][vC2] = dini_Int(file, "vC2");
	PlayerInfo[playerid][vPJ] = dini_Int(file, "vPJ");
	PlayerInfo[playerid][vLocked] = dini_Int(file, "vLocked");
	PlayerInfo[playerid][pVehMod][0] = dini_Int(file, "vModSlot0");
	PlayerInfo[playerid][pVehMod][1] = dini_Int(file, "vModSlot1");
	PlayerInfo[playerid][pVehMod][2] = dini_Int(file, "vModSlot2");
	PlayerInfo[playerid][pVehMod][3] = dini_Int(file, "vModSlot3");
	PlayerInfo[playerid][pVehMod][4] = dini_Int(file, "vModSlot4");
	PlayerInfo[playerid][pVehMod][5] = dini_Int(file, "vModSlot5");
	PlayerInfo[playerid][pVehMod][6] = dini_Int(file, "vModSlot6");
	PlayerInfo[playerid][pVehMod][7] = dini_Int(file, "vModSlot7");
	PlayerInfo[playerid][pVehMod][8] = dini_Int(file, "vModSlot8");
	PlayerInfo[playerid][pVehMod][9] = dini_Int(file, "vModSlot9");
	PlayerInfo[playerid][pVehMod][10] = dini_Int(file, "vModSlot10");
	PlayerInfo[playerid][pVehMod][11] = dini_Int(file, "vModSlot11");
	PlayerInfo[playerid][pVehMod][12] = dini_Int(file, "vModSlot12");
	PlayerInfo[playerid][pVehMod][13] = dini_Int(file, "vModSlot13");
	// VIP CAR
	PlayerInfo[playerid][vVModel] = dini_Int(file, "vVModel");
	PlayerInfo[playerid][vVX] = dini_Float(file, "vVX");
	PlayerInfo[playerid][vVY] = dini_Float(file, "vVY");
	PlayerInfo[playerid][vVZ] = dini_Float(file, "vVZ");
	PlayerInfo[playerid][vVA] = dini_Float(file, "vVA");
	PlayerInfo[playerid][vVC1] = dini_Int(file, "vVC1");
	PlayerInfo[playerid][vVC2] = dini_Int(file, "vVC2");
	PlayerInfo[playerid][vVPJ] = dini_Int(file, "vVPJ");
	PlayerInfo[playerid][vVLocked] = dini_Int(file, "vVLocked");
	PlayerInfo[playerid][pVVehMod][0] = dini_Int(file, "vVModSlot0");
	PlayerInfo[playerid][pVVehMod][1] = dini_Int(file, "vVModSlot1");
	PlayerInfo[playerid][pVVehMod][2] = dini_Int(file, "vVModSlot2");
	PlayerInfo[playerid][pVVehMod][3] = dini_Int(file, "vVModSlot3");
	PlayerInfo[playerid][pVVehMod][4] = dini_Int(file, "vVModSlot4");
	PlayerInfo[playerid][pVVehMod][5] = dini_Int(file, "vVModSlot5");
	PlayerInfo[playerid][pVVehMod][6] = dini_Int(file, "vVModSlot6");
	PlayerInfo[playerid][pVVehMod][7] = dini_Int(file, "vVModSlot7");
	PlayerInfo[playerid][pVVehMod][8] = dini_Int(file, "vVModSlot8");
	PlayerInfo[playerid][pVVehMod][9] = dini_Int(file, "vVModSlot9");
	PlayerInfo[playerid][pVVehMod][10] = dini_Int(file, "vVModSlot10");
	PlayerInfo[playerid][pVVehMod][11] = dini_Int(file, "vVModSlot11");
	PlayerInfo[playerid][pVVehMod][12] = dini_Int(file, "vVModSlot12");
	PlayerInfo[playerid][pVVehMod][13] = dini_Int(file, "vVModSlot13");
	if(PlayerInfo[playerid][vModel])
	{
	    PlayerInfo[playerid][pVeh] = CreateVehicle(PlayerInfo[playerid][vModel], PlayerInfo[playerid][vX],PlayerInfo[playerid][vY],PlayerInfo[playerid][vZ],PlayerInfo[playerid][vA],PlayerInfo[playerid][vC1],PlayerInfo[playerid][vC2],1200);
        ChangeVehiclePaintjob(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][vPJ]);
        if(PlayerInfo[playerid][vLocked]) SetVehicleParamsEx(PlayerInfo[playerid][pVeh], 0, 0, 0, 1, 0, 0, 0);
        for(new i=0; i<14; i++)
		{
		    AddVehicleComponent(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][pVehMod][i]);
		}
	}
	if(PlayerInfo[playerid][vVModel])
	{
	    PlayerInfo[playerid][pVVeh] = CreateVehicle(PlayerInfo[playerid][vVModel], PlayerInfo[playerid][vVX],PlayerInfo[playerid][vVY],PlayerInfo[playerid][vVZ],PlayerInfo[playerid][vVA],PlayerInfo[playerid][vVC1],PlayerInfo[playerid][vVC2],1200);
        ChangeVehiclePaintjob(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][vVPJ]);
        if(PlayerInfo[playerid][vVLocked]) SetVehicleParamsEx(PlayerInfo[playerid][pVVeh], 0, 0, 0, 1, 0, 0, 0);
        for(new i=0; i<14; i++)
		{
		    AddVehicleComponent(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][pVVehMod][i]);
		}
	}
	PlayerInfo[playerid][pGangMod] = dini_Int(file, "GangMod");
	PlayerInfo[playerid][pFacMod] = dini_Int(file, "FacMod");
	PlayerInfo[playerid][pBanAppealer] = dini_Int(file, "BanAppealer");
	PlayerInfo[playerid][pCarLic] = dini_Int(file, "CarLicense");
	format(PlayerInfo[playerid][pAccent], 16, "%s", dini_Get(file, "Accent"));
	PlayerInfo[playerid][pVIP] = dini_Int(file, "VIP");
	PlayerInfo[playerid][pVIPBuddy] = dini_Int(file, "VIPBuddy");
	PlayerInfo[playerid][pVIPDay] = dini_Int(file, "VIPDay");
	PlayerInfo[playerid][pVIPMonth] = dini_Int(file, "VIPMonth");
	PlayerInfo[playerid][pVIPHour] = dini_Int(file, "VIPDayHour");
	PlayerInfo[playerid][pVIPTemp] = dini_Int(file, "VIPTemp");
	PlayerInfo[playerid][pVIPJob] = dini_Int(file, "VIPJob");
	PlayerInfo[playerid][pDeliverTruck] = dini_Int(file, "DeliverTruck");
	PlayerInfo[playerid][pNew] = dini_Int(file, "New");
	PlayerInfo[playerid][pRefPoints] = dini_Int(file, "RefPoints");
	PlayerInfo[playerid][pTester] = dini_Int(file, "Tester");
	PlayerInfo[playerid][pFightStyle] = dini_Int(file, "FightStyle");
	SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);
	PlayerInfo[playerid][pScope] = dini_Int(file, "Scope");
	PlayerInfo[playerid][pCookies] = dini_Int(file, "Cookies");
	PlayerInfo[playerid][pOldskool] = dini_Int(file, "Oldskool");
	PlayerInfo[playerid][pReward] = dini_Int(file, "Reward");
	PlayerInfo[playerid][pFish][0] = dini_Int(file, "Fish1");
	PlayerInfo[playerid][pFish][1] = dini_Int(file, "Fish2");
	PlayerInfo[playerid][pFish][2] = dini_Int(file, "Fish3");
	PlayerInfo[playerid][pFish][3] = dini_Int(file, "Fish4");
	PlayerInfo[playerid][pFish][4] = dini_Int(file, "Fish5");
	PlayerInfo[playerid][pLoyal] = dini_Int(file, "Loyal");
	PlayerInfo[playerid][pLoyalTag] = dini_Int(file, "LoyalTag");
	PlayerInfo[playerid][pLPoints] = dini_Int(file, "LPoints");
	PlayerInfo[playerid][pGate][0] = dini_Int(file, "Gate1");
	PlayerInfo[playerid][pGate][1] = dini_Int(file, "Gate2");
	PlayerInfo[playerid][pGate][2] = dini_Int(file, "Gate3");
	LoadToys(playerid, file);
	// All Loaded
	print("Character file loaded successfuly.");
	//SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}Your character files have loaded successfully.");
	new string[128];
	// Messages
	SendClientMessage(playerid, COLOR_LIGHTRED, "Welcome to zGaming Roleplay.");
    // Welcome
    format(string, sizeof(string), "SERVER: {FFFFFF}Welcome, {FF6347}%s{FFFFFF}. (Your last successful login was from %s)", RPN(playerid), PlayerInfo[playerid][pIP]);
	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	// Player
	format(string, sizeof(string), "SERVER: {FFFFFF}You are logged in as level %d player.", PlayerInfo[playerid][pLevel]);
    SendClientMessage(playerid, COLOR_LIGHTRED, string);
    // Helper
    if(PlayerInfo[playerid][pHelper]){
    format(string, sizeof(string), "SERVER: {FFFFFF}You are logged in as level %d helper.", PlayerInfo[playerid][pHelper]);
    SendClientMessage(playerid, COLOR_LIGHTRED, string);}
    // Admin
    if(PlayerInfo[playerid][pAdmin]){
	format(string, sizeof(string), "SERVER: {FFFFFF}You are logged in as level %d administrator.", PlayerInfo[playerid][pAdmin]);
    SendClientMessage(playerid, COLOR_LIGHTRED, string);}
    // Helper Messages
    if(PlayerInfo[playerid][pHelper]){
    format(string, sizeof(string), "HelpLogin: Helper %s has logged in. (Level %d)", RPN(playerid), PlayerInfo[playerid][pHelper]);
    SendAdminMessage(COLOR_DARKRED, 1, string);}
    // Admin Messages
    if(PlayerInfo[playerid][pAdmin]){
	format(string, sizeof(string), "AdmLogin: Administrator %s has logged in. (Level %d)", RPN(playerid), PlayerInfo[playerid][pAdmin]);
    SendAdminMessage(COLOR_DARKRED, 1, string);}
    // Flag Messages
    if(strlen(PlayerInfo[playerid][pFlag]) > 0)
    {
        format(string, sizeof(string), "AdmWarn: %s has logged in. (Flagged player)", RPN(playerid));
        SendAdminMessage(COLOR_DARKRED, 1, string);
    }
    // MOTDs
    SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER MOTD: {FFFFFF}Want to know what's new? Check /updates.");
    if(strlen(ServerMOTD) > 0){
	format(string, sizeof(string), "SERVER MOTD: {FFFFFF}%s", ServerMOTD);
    SendClientMessage(playerid, COLOR_LIGHTRED, string);}
    if(strlen(FamInfo[PlayerInfo[playerid][pFam]][fMOTD]) > 0){
	format(string, sizeof(string), "FAMILY MOTD: {FFFFFF}%s", FamInfo[PlayerInfo[playerid][pFam]][fMOTD]);
    SendClientMessage(playerid, COLOR_LIGHTRED, string);}
    if(strlen(AdminMOTD) > 0 && PlayerInfo[playerid][pAdmin]){
	format(string, sizeof(string), "ADMIN MOTD: {FFFFFF}%s", AdminMOTD);
    SendClientMessage(playerid, COLOR_LIGHTRED, string);}
	return 1;
}

// Jobs Settings
// Legal Jobs: 1) Mechanic | 2) Lawyer | 3) Trucker | 4) Fisher (NOT NOW)
// Illegal Jobs: 5) Weapons Dealer | 6) Weapons Smuggler | 7) Drugs Dealer | 8) Drugs Smuggler | 9) Car Jacker (NOT NOW) | 10) Bodyguard

enum jobInfo
{
	jCars[9],
	jTrailers[9]
}
new JobInfo[MAX_JOBS][jobInfo];


// House Settings
enum houseInfo
{
	hLevel,
	hPrice,
	hStatus,
	hOwner[32],
	Float:hX,
	Float:hY,
	Float:hZ,
	hMoney,
	hMaterials,
	hWeed,
	hCrack,
	hGun[5],
	hGunAmmo[5],
	hPickup,
	Text3D:hText
}
new HouseInfo[MAX_HOUSES][houseInfo];

stock LoadHouses()
{
	new binfo[21][32];
	new string[256];
	new File:file = fopen("houses.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_HOUSES)
		{
		    fread(file, string);
		    split(string, binfo, '|');
		    HouseInfo[idx][hLevel] = strval(binfo[0]);
		    HouseInfo[idx][hPrice] = strval(binfo[1]);
		    HouseInfo[idx][hStatus] = strval(binfo[2]);
		    format(HouseInfo[idx][hOwner], 32, "%s", binfo[3]);
		    HouseInfo[idx][hX] = floatstr(binfo[4]);
		    HouseInfo[idx][hY] = floatstr(binfo[5]);
		    HouseInfo[idx][hZ] = floatstr(binfo[6]);
		    HouseInfo[idx][hMoney] = strval(binfo[7]);
		    HouseInfo[idx][hMaterials] = strval(binfo[8]);
		    HouseInfo[idx][hWeed] = strval(binfo[9]);
		    HouseInfo[idx][hCrack] = strval(binfo[10]);
			HouseInfo[idx][hGun][0] = strval(binfo[11]);
			HouseInfo[idx][hGunAmmo][0] = strval(binfo[12]);
			HouseInfo[idx][hGun][1] = strval(binfo[13]);
			HouseInfo[idx][hGunAmmo][1] = strval(binfo[14]);
			HouseInfo[idx][hGun][2] = strval(binfo[15]);
			HouseInfo[idx][hGunAmmo][2] = strval(binfo[16]);
			HouseInfo[idx][hGun][3] = strval(binfo[17]);
			HouseInfo[idx][hGunAmmo][3] = strval(binfo[18]);
			HouseInfo[idx][hGun][4] = strval(binfo[19]);
			HouseInfo[idx][hGunAmmo][4] = strval(binfo[20]);
			if(HouseInfo[idx][hLevel])
			{
			    HouseInfo[idx][hPickup] = CreateDynamicPickup(1273, 1, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ], 0);
                if(!strcmp("The State", HouseInfo[idx][hOwner])) format(string, sizeof(string), "ID: %d\nHouse (Lvl: %d)\nOwner: %s\nStatus: For Sale\nPrice: $%d", idx, HouseInfo[idx][hLevel], HouseInfo[idx][hOwner], HouseInfo[idx][hPrice]);
				else format(string, sizeof(string), "ID: %d\nHouse (Lvl: %d)\nOwner: %s\nStatus: %s", idx, HouseInfo[idx][hLevel], HouseInfo[idx][hOwner], RHS(idx));
				HouseInfo[idx][hText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]+0.3, 15);

			}
			idx++;
	    }
	}
	print("Houses loaded successfully.");
	return 1;
}

stock SaveHouses()
{
	new idx = 1, File:file;
	new string[256];
	while(idx < MAX_HOUSES)
	{
	    format(string, sizeof(string), "%d|%d|%d|%s|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d\r\n",
	    HouseInfo[idx][hLevel],
	    HouseInfo[idx][hPrice],
	    HouseInfo[idx][hStatus],
	    HouseInfo[idx][hOwner],
	    HouseInfo[idx][hX],
	    HouseInfo[idx][hY],
	    HouseInfo[idx][hZ],
	    HouseInfo[idx][hMoney],
	    HouseInfo[idx][hMaterials],
	    HouseInfo[idx][hWeed],
	    HouseInfo[idx][hCrack],
		HouseInfo[idx][hGun][0],
		HouseInfo[idx][hGunAmmo][0],
		HouseInfo[idx][hGun][1],
		HouseInfo[idx][hGunAmmo][1],
		HouseInfo[idx][hGun][2],
		HouseInfo[idx][hGunAmmo][2],
		HouseInfo[idx][hGun][3],
		HouseInfo[idx][hGunAmmo][3],
		HouseInfo[idx][hGun][4],
		HouseInfo[idx][hGunAmmo][4]
		);
	    if(idx == 1)
	    {
	        file = fopen("houses.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("houses.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Houses saved successfully.");
}

// Business Settings
enum bizInfo
{
	bType,
	bStatus,
	bOwner[32],
	Float:bX,
	Float:bY,
	Float:bZ,
	bPickup,
	bMoney,
	bProducts,
	Text3D:bText,
	bSold,
	bLevel,
	bPrice,
	bAP
}
new BizInfo[MAX_BIZ][bizInfo];

stock LoadBiz()
{
    if(!fexist("biz.cfg")) fcreate("biz.cfg");
	new binfo[12][32];
	new string[256];
	new File:file = fopen("biz.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_BIZ)
		{
		    fread(file, string);
		    split(string, binfo, '|');
		    BizInfo[idx][bType] = strval(binfo[0]);
		    BizInfo[idx][bStatus] = strval(binfo[1]);
		    format(BizInfo[idx][bOwner], 32, "%s", binfo[2]);
		    BizInfo[idx][bX] = floatstr(binfo[3]);
		    BizInfo[idx][bY] = floatstr(binfo[4]);
		    BizInfo[idx][bZ] = floatstr(binfo[5]);
		    BizInfo[idx][bMoney] = strval(binfo[6]);
		    BizInfo[idx][bProducts] = strval(binfo[7]);
		    BizInfo[idx][bSold] = strval(binfo[8]);
		    BizInfo[idx][bLevel] = strval(binfo[9]);
		    BizInfo[idx][bPrice] = strval(binfo[10]);
		    BizInfo[idx][bAP] = strval(binfo[11]);
		    if(BizInfo[idx][bType]) // If Business is owned
		    {
		    	BizInfo[idx][bPickup] = CreateDynamicPickup(1272, 1, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ], 0);
		    	if(!strcmp("The State", BizInfo[idx][bOwner])) format(string, sizeof(string), "ID: %d\n%s\nOwner: %s\nStatus: For Sale\nPrice: $%d", idx, RBT(idx), BizInfo[idx][bOwner], BizInfo[idx][bPrice]);
				else format(string, sizeof(string), "ID: %d\n%s\nOwner: %s\nStatus: %s", idx, RBT(idx), BizInfo[idx][bOwner], RBS(idx));
		    	BizInfo[idx][bText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]+0.3, 15);
			}
			idx++;
	    }
	}
	print("Businesses loaded successfully.");
	return 1;
}

stock SaveBiz()
{
    if(!fexist("biz.cfg")) fcreate("biz.cfg");
	new idx = 1, File:file;
	new string[256];
	while(idx < MAX_BIZ)
	{
	    format(string, sizeof(string), "%d|%d|%s|%f|%f|%f|%d|%d|%d|%d|%d|%d\r\n", BizInfo[idx][bType], BizInfo[idx][bStatus], BizInfo[idx][bOwner], BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ], BizInfo[idx][bMoney], BizInfo[idx][bProducts], BizInfo[idx][bSold], BizInfo[idx][bLevel], BizInfo[idx][bPrice], BizInfo[idx][bAP]);
	    if(idx == 1)
	    {
	        file = fopen("biz.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("biz.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Businesses saved successfully.");
}


enum gateInfo
{
	gGate,
	Text3D:gText,
	gModel,
	Float:gCX,
	Float:gCY,
	Float:gCZ,
	Float:gCRX,
	Float:gCRY,
	Float:gCRZ,
	Float:gOX,
	Float:gOY,
	Float:gOZ,
	Float:gORX,
	Float:gORY,
	Float:gORZ,
	gPassword[256],
	Float:gSpeed,
	gStatus
}
new GateInfo[MAX_GATES][gateInfo];

stock LoadGates()
{
	new dinfo[15][128];
	new string[256];
	new File:file = fopen("gates.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_GATES)
		{
		    fread(file, string);
		    split(string, dinfo, '|');
			GateInfo[idx][gModel] = strval(dinfo[0]);
			GateInfo[idx][gCX] = floatstr(dinfo[1]);
			GateInfo[idx][gCY] = floatstr(dinfo[2]);
			GateInfo[idx][gCZ] = floatstr(dinfo[3]);
			GateInfo[idx][gCRX] = floatstr(dinfo[4]);
			GateInfo[idx][gCRY] = floatstr(dinfo[5]);
			GateInfo[idx][gCRZ] = floatstr(dinfo[6]);
			GateInfo[idx][gOX] = floatstr(dinfo[7]);
			GateInfo[idx][gOY] = floatstr(dinfo[8]);
			GateInfo[idx][gOZ] = floatstr(dinfo[9]);
			GateInfo[idx][gORX] = floatstr(dinfo[10]);
			GateInfo[idx][gORY] = floatstr(dinfo[11]);
			GateInfo[idx][gORZ] = floatstr(dinfo[12]);
			format(GateInfo[idx][gPassword], 256, "%s", dinfo[13]);
			GateInfo[idx][gSpeed] = floatstr(dinfo[14]);
			if(GateInfo[idx][gModel]) // If gate exists
			{
			    format(string, sizeof(string), "Gate ID: %d", idx);
				GateInfo[idx][gGate] = CreateDynamicObject(GateInfo[idx][gModel], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
				GateInfo[idx][gText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], 10);
				GateInfo[idx][gStatus] = 0;
			}
			idx++;
	    }
	}
	print("Gates loaded successfully.");
	return 1;
}

stock SaveGates()
{
	new idx = 1, File:file;
	new string[256];
	while(idx < MAX_GATES)
	{
	    format(string, sizeof(string), "%d|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%s|%f\r\n",
		GateInfo[idx][gModel],
		GateInfo[idx][gCX],
		GateInfo[idx][gCY],
		GateInfo[idx][gCZ],
		GateInfo[idx][gCRX],
		GateInfo[idx][gCRY],
		GateInfo[idx][gCRZ],
		GateInfo[idx][gOX],
		GateInfo[idx][gOY],
		GateInfo[idx][gOZ],
		GateInfo[idx][gORX],
		GateInfo[idx][gORY],
		GateInfo[idx][gORZ],
		GateInfo[idx][gPassword],
		GateInfo[idx][gSpeed]);
		GateInfo[idx][gStatus] = 0;
	    if(idx == 1)
	    {
	        file = fopen("gates.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("gates.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Gates saved successfully.");
	return 1;
}

enum doorInfo
{
	dPickup,
	dType,
	Float:dOX,
	Float:dOY,
	Float:dOZ,
	Float:dIX,
	Float:dIY,
	Float:dIZ,
	dOInt,
	dOVW,
	dIInt,
	dIVW,
	dCInt,
	dCExt,
	Float:dIA,
	Float:dOA,
	Text3D:dTextID,
	dText[128],

}
new DoorInfo[MAX_DOORS][doorInfo];

stock LoadDoors()
{
	new dinfo[16][128];
	new string[256];
	new File:file = fopen("doors.cfg", io_read);
	if(file)
	{
	    new idx = 0;
		while(idx < MAX_DOORS)
		{
		    fread(file, string);
		    split(string, dinfo, '|');
		    DoorInfo[idx][dType] = strval(dinfo[0]);
			DoorInfo[idx][dOX] = floatstr(dinfo[1]);
			DoorInfo[idx][dOY] = floatstr(dinfo[2]);
			DoorInfo[idx][dOZ] = floatstr(dinfo[3]);
			DoorInfo[idx][dIX] = floatstr(dinfo[4]);
			DoorInfo[idx][dIY] = floatstr(dinfo[5]);
			DoorInfo[idx][dIZ] = floatstr(dinfo[6]);
			DoorInfo[idx][dOInt] = strval(dinfo[7]);
			DoorInfo[idx][dOVW] = strval(dinfo[8]);
			DoorInfo[idx][dIInt] = strval(dinfo[9]);
			DoorInfo[idx][dIVW] = strval(dinfo[10]);
			DoorInfo[idx][dCInt] = strval(dinfo[11]);
			DoorInfo[idx][dCExt] = strval(dinfo[12]);
			DoorInfo[idx][dIA] = floatstr(dinfo[13]);
			format(DoorInfo[idx][dText], 128, "%s", dinfo[14]);
			DoorInfo[idx][dOA] = floatstr(dinfo[15]);
			if(DoorInfo[idx][dType]) // If door exists
			{
                DoorInfo[idx][dPickup] = CreateDynamicPickup(DoorInfo[idx][dType], 1, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ], DoorInfo[idx][dOVW], DoorInfo[idx][dOInt]);
				format(string, sizeof(string), "ID: %d\n%s", idx, DoorInfo[idx][dText]);
				DoorInfo[idx][dTextID] = CreateDynamic3DTextLabel(string, COLOR_WHITE, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]+0.3, 15);
			}
			idx++;
	    }
	}
	print("Doors loaded successfully.");
	return 1;
}

stock SaveDoors()
{
	new idx = 0, File:file;
	new string[256];
	while(idx < MAX_DOORS)
	{
	    format(string, sizeof(string), "%d|%f|%f|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%f|%s|%f\r\n",
  		DoorInfo[idx][dType],
		DoorInfo[idx][dOX],
		DoorInfo[idx][dOY],
		DoorInfo[idx][dOZ],
		DoorInfo[idx][dIX],
		DoorInfo[idx][dIY],
		DoorInfo[idx][dIZ],
		DoorInfo[idx][dOInt],
		DoorInfo[idx][dOVW],
		DoorInfo[idx][dIInt],
		DoorInfo[idx][dIVW],
		DoorInfo[idx][dCInt],
		DoorInfo[idx][dCExt],
		DoorInfo[idx][dIA],
		DoorInfo[idx][dText],
		DoorInfo[idx][dOA]);
	    if(idx == 0)
	    {
	        file = fopen("doors.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("doors.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Doors saved successfully.");
}

enum mapiconInfo
{
	mpID,
	mpType,
	Float:mpX,
	Float:mpY,
	Float:mpZ
}
new MapIconInfo[MAX_MAPICONS][mapiconInfo];

stock SaveMapIcons()
{
	new idx = 0, File:file;
	new string[256];
	while(idx < MAX_MAPICONS)
	{
	    format(string, sizeof(string), "%d|%f|%f|%f\r\n",
		MapIconInfo[idx][mpType],
		MapIconInfo[idx][mpX],
		MapIconInfo[idx][mpY],
		MapIconInfo[idx][mpZ]);
	    if(idx == 0)
	    {
	        file = fopen("mapicons.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("mapicons.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Mapicons saved successfully.");
}

stock LoadMapIcons()
{
	new dinfo[4][128];
	new string[256];
	new File:file = fopen("mapicons.cfg", io_read);
	if(file)
	{
	    new idx = 0;
		while(idx < MAX_MAPICONS)
		{
		    fread(file, string);
		    split(string, dinfo, '|');
		    MapIconInfo[idx][mpType] = strval(dinfo[0]);
			MapIconInfo[idx][mpX] = floatstr(dinfo[1]);
			MapIconInfo[idx][mpY] = floatstr(dinfo[2]);
			MapIconInfo[idx][mpZ] = floatstr(dinfo[3]);
			if(MapIconInfo[idx][mpType]) // If mapicon exists
			{
			    MapIconInfo[idx][mpID] = CreateDynamicMapIcon(MapIconInfo[idx][mpX], MapIconInfo[idx][mpY], MapIconInfo[idx][mpZ], MapIconInfo[idx][mpType], 0 ,0);
			}
			idx++;
	    }
	}
	print("Doors loaded successfully.");
	return 1;
}

// Drugs Depot - Drugs House - Crack Lab - Materials Pickup - Materials Factory
new PointTimer;
new Capturing;
new Float:Capture[3];
new PointBC[MAX_POINTS];

enum pointInfo
{
	pName[32],
	pTime,
	pOwner,
	Float:pX,
	Float:pY,
	Float:pZ,
	pProfit,
	pPickup,
	Text3D:pText
}
new PointInfo[MAX_POINTS][pointInfo];

stock SavePoints()
{
	new idx = 0, File:file;
	new string[256];
	while(idx < MAX_POINTS)
	{
	    format(string, sizeof(string), "%s|%d|%d|%f|%f|%f|%d\r\n",
		PointInfo[idx][pName],
		PointInfo[idx][pTime],
		PointInfo[idx][pOwner],
		PointInfo[idx][pX],
		PointInfo[idx][pY],
		PointInfo[idx][pZ],
		PointInfo[idx][pProfit]);
	    if(idx == 0)
	    {
	        file = fopen("points.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("points.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Points saved successfully.");
}

stock LoadPoints()
{
	new dinfo[7][128];
	new string[256];
	new File:file = fopen("points.cfg", io_read);
	if(file)
	{
	    new idx = 0;
		while(idx < MAX_POINTS)
		{
		    fread(file, string);
		    split(string, dinfo, '|');
			format(PointInfo[idx][pName], 32, "%s", dinfo[0]);
			PointInfo[idx][pTime] = strval(dinfo[1]);
			PointInfo[idx][pOwner] = strval(dinfo[2]);
			PointInfo[idx][pX] = floatstr(dinfo[3]);
			PointInfo[idx][pY] = floatstr(dinfo[4]);
			PointInfo[idx][pZ] = floatstr(dinfo[5]);
			PointInfo[idx][pProfit] = strval(dinfo[6]);
			if(!PointInfo[idx][pTime]) // If point time is 0
			{
			    DestroyDynamicPickup(PointInfo[idx][pPickup]);
			    DestroyDynamic3DTextLabel(PointInfo[idx][pText]);
			    PointInfo[idx][pProfit] = 0;
			    PointInfo[idx][pPickup] = CreateDynamicPickup(1239, 1, PointInfo[idx][pX], PointInfo[idx][pY], PointInfo[idx][pZ]);
		    	PointInfo[idx][pText] = CreateDynamic3DTextLabel("Point\n/capture", COLOR_WHITE, PointInfo[idx][pX], PointInfo[idx][pY], PointInfo[idx][pZ]+0.3, 15);
				format(string, sizeof(string), "The %s is available to be captured.", PointInfo[idx][pName]);
			    SendClientMessageToAll(COLOR_YELLOW, string);
			}
			idx++;
	    }
	}
	print("Points loaded successfully.");
	return 1;
}


main()
{
	print("\n----------------------------------");
	print("    zGaming Roleplay  -  By Zaiat");
	print("----------------------------------\n");
}


stock CheckFiles()
{
	if(!dini_Exists("arrest.cfg")) dini_Create("arrest.cfg");
	if(!dini_Exists("ban.cfg")) dini_Create("ban.cfg");
	if(!dini_Exists("biz.cfg")) dini_Create("biz.cfg");
	if(!dini_Exists("bugs.cfg")) dini_Create("bugs.cfg");
	if(!dini_Exists("cellphones.cfg")) dini_Create("cellphones.cfg");
	if(!dini_Exists("doors.cfg")) dini_Create("doors.cfg");
	if(!dini_Exists("gates.cfg")) dini_Create("gates.cfg");
	if(!dini_Exists("drugs.cfg")) dini_Create("drugs.cfg");
	if(!dini_Exists("families.cfg")) dini_Create("families.cfg");
	if(!dini_Exists("houses.cfg")) dini_Create("houses.cfg");
	if(!dini_Exists("mapicons.cfg")) dini_Create("mapicons.cfg");
	if(!dini_Exists("motds.cfg")) dini_Create("motds.cfg");
	if(!dini_Exists("points.cfg")) dini_Create("points.cfg");
	if(!dini_Exists("products.cfg")) dini_Create("products.cfg");
	if(!dini_Exists("vehicles.cfg")) dini_Create("vehicles.cfg");
	return 1;
}

new NPCBus;
public OnGameModeInit()
{
	CheckFiles();
	SetGameModeText(SERVER_GM_TEXT);
	SendRconCommand("hostname zGaming Roleplay [Refunding Old Stats] [Unique]");
	SendRconCommand("weburl www.zGaming.org");
	SendRconCommand("mapname Script by: iRage");
	AddPlayerClass(0, 1958.3783, 1343.1572, 15.3746, 269.1425, 0, 0, 0, 0, 0, 0);
	EnableStuntBonusForAll(0);
	DisableInteriorEnterExits();
	ShowPlayerMarkers(1);
	UsePlayerPedAnims();
	LoadStaticVehicles();
	LoadObjects();
	LoadFactions();
	LoadFamilies();
	LoadPoints();
	LoadBiz();
	LoadHouses();
	LoadDoors();
	LoadGates();
	LoadMapIcons();
	LoadArrestPoint();
	LoadDrugs();
	LoadProducts();
	LoadPickups();
	LoadMOTDS();
	// Animations
	txtAnimHelper = TextDrawCreate(610.0, 400.0, "~r~~k~~PED_SPRINT~ ~w~to stop the animation");
	TextDrawUseBox(txtAnimHelper, 0);
	TextDrawFont(txtAnimHelper, 2);
	TextDrawSetShadow(txtAnimHelper,0); // no shadow
	TextDrawSetOutline(txtAnimHelper,1); // thickness 1
	TextDrawBackgroundColor(txtAnimHelper,0x000000FF);
	TextDrawColor(txtAnimHelper,0xFFFFFFFF);
	TextDrawAlignment(txtAnimHelper,3); // align right
	// report bug
	SetTimer("Bug", 600000, true);
	// Time
	TimeTD = TextDrawCreate(633.000000,428.000000,"Time");
	TextDrawFont(TimeTD,1);
	TextDrawSetShadow(TimeTD,0);
	TextDrawSetOutline(TimeTD,1);
	TextDrawAlignment(TimeTD,3);
	TextDrawLetterSize(TimeTD,0.399999,1.500000);
	TextDrawColor(TimeTD,0x00B2EEFF);
	// Website
	// Time
	WebTD = TextDrawCreate(633.000000,412.000000,"www.~b~~h~~h~z~w~Gaming.org");
	TextDrawFont(WebTD,1);
	TextDrawSetShadow(WebTD,0);
	TextDrawSetOutline(WebTD,1);
	TextDrawAlignment(WebTD,3);
	TextDrawLetterSize(WebTD,0.399999,1.500000);
	TextDrawColor(WebTD,COLOR_WHITE);
	// Tutorial Blackbox
	TutorialTD = TextDrawCreate(424.000000, 3.000000, "            ");
	TextDrawBackgroundColor(TutorialTD, 255);
	TextDrawFont(TutorialTD, 1);
	TextDrawLetterSize(TutorialTD, 0.500000, 1.000000);
	TextDrawColor(TutorialTD, -1);
	TextDrawSetOutline(TutorialTD, 0);
	TextDrawSetProportional(TutorialTD, 1);
	TextDrawSetShadow(TutorialTD, 1);
	TextDrawUseBox(TutorialTD, 1);
	TextDrawBoxColor(TutorialTD, 255);
	TextDrawTextSize(TutorialTD, 14.000000, 0.000000);
	// Bank Robbery
	Textdraw0 = TextDrawCreate(490.000000, 155.000000, "~r~Bank Robbers:");
	TextDrawBackgroundColor(Textdraw0, 255);
	TextDrawFont(Textdraw0, 1);
	TextDrawLetterSize(Textdraw0, 0.450000, 1.300000);
	TextDrawColor(Textdraw0, -1);
	TextDrawSetOutline(Textdraw0, 1);
	TextDrawSetProportional(Textdraw0, 1);

	Textdraw1 = TextDrawCreate(490.000000, 171.000000, "Robber 1");
	TextDrawBackgroundColor(Textdraw1, 255);
	TextDrawFont(Textdraw1, 1);
	TextDrawLetterSize(Textdraw1, 0.450000, 1.300000);
	TextDrawColor(Textdraw1, -1);
	TextDrawSetOutline(Textdraw1, 1);
	TextDrawSetProportional(Textdraw1, 1);

	Textdraw2 = TextDrawCreate(490.000000, 185.000000, "Robber 2");
	TextDrawBackgroundColor(Textdraw2, 255);
	TextDrawFont(Textdraw2, 1);
	TextDrawLetterSize(Textdraw2, 0.450000, 1.300000);
	TextDrawColor(Textdraw2, -1);
	TextDrawSetOutline(Textdraw2, 1);
	TextDrawSetProportional(Textdraw2, 1);

	Textdraw3 = TextDrawCreate(490.000000, 199.000000, "Robber 3");
	TextDrawBackgroundColor(Textdraw3, 255);
	TextDrawFont(Textdraw3, 1);
	TextDrawLetterSize(Textdraw3, 0.450000, 1.300000);
	TextDrawColor(Textdraw3, -1);
	TextDrawSetOutline(Textdraw3, 1);
	TextDrawSetProportional(Textdraw3, 1);

	Textdraw4 = TextDrawCreate(490.000000, 213.000000, "Robber 4");
	TextDrawBackgroundColor(Textdraw4, 255);
	TextDrawFont(Textdraw4, 1);
	TextDrawLetterSize(Textdraw4, 0.450000, 1.300000);
	TextDrawColor(Textdraw4, -1);
	TextDrawSetOutline(Textdraw4, 1);
	TextDrawSetProportional(Textdraw4, 1);

	Textdraw5 = TextDrawCreate(490.000000, 227.000000, "Robber 5");
	TextDrawBackgroundColor(Textdraw5, 255);
	TextDrawFont(Textdraw5, 1);
	TextDrawLetterSize(Textdraw5, 0.450000, 1.300000);
	TextDrawColor(Textdraw5, -1);
	TextDrawSetOutline(Textdraw5, 1);
	TextDrawSetProportional(Textdraw5, 1);
	// Timers
	SetTimer("Clock", 1000, true);
	SetTimer("ADTimer", 1000, true);
	SetTimer("NOPSetPlayerPos", 1000, true);
	SetTimer("SaveServer", 3600000, true);
	SetTimer("AltTabTimer", 1000, true);
	SetTimer("WeaponCheat", 1000, true);
	SetTimer("FuelTimer", 1000, true);
	SetTimer("PrisonTimer", 1000, true);
	SetTimer("LoyalFeatures", 60000, true);
	for(new i=0; i<MAX_VEHICLES; i++)
	{
	    Fuel[i] = 100;
	    SetVehicleToRespawn(i);
	}
	ConnectNPC("BusDriver", "NPCBus");
	NPCBus = CreateVehicle(431, 0.0, 0.0, 5.0, 0.0, 3, 3, 5000);
	return 1;
}

public OnGameModeExit()
{
	foreach(Player, i)
    {
       	SaveChar(i);
       	ClearChar(i);
    }
	SaveFactions();
	SaveFamilies();
	SavePoints();
	SaveBiz();
	SaveHouses();
	SaveDoors();
	SaveGates();
	SaveMapIcons();
	SaveArrestPoint();
	SaveDrugs();
	SaveProducts();
	SaveMOTDS();
	return 1;
}

new Text3D: BusText;

public OnPlayerConnect(playerid)
{
	new string[128];
    format(string,sizeof(string), "http://translate.google.com/translate_tts?q=%s has connected to the server", RPN(playerid));
    foreach(Player, i)
    {
        if(JoinMessages[i])
        {
        	PlayAudioStreamForPlayer(i, string);
        }
    }
	ResetPlayerWeapons(playerid);
	ResetZaiatWeapons(playerid);
    RemoveBuildingForPlayer(playerid, 1302, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1209, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 955, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 956, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1775, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1776, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1977, 0.0, 0.0, 0.0, 6000.0);
    if(IsPlayerNPC(playerid))
	{
		SetPlayerColor(playerid, TRANSPARENT_WHITE);
		/*BusText = Create3DTextLabel("[NPC] Bus Driver", COLOR_YELLOW, 0, 0, -20, 25, -1, 1);
		Attach3DTextLabelToPlayer(BusText, playerid, 0, 0, 0.25);*/
		BusText = CreateDynamic3DTextLabel("[NPC] Bus Driver", COLOR_YELLOW, 0, 0, -20, 25, playerid);
		Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, BusText , E_STREAMER_ATTACH_OFFSET_Z, 0.25);
		return 1;
	}
	// MAX IPS
	new connecting_ip[32+1];
	GetPlayerIp(playerid,connecting_ip,32);
	new num_players_on_ip = GetNumberOfPlayersOnThisIP(connecting_ip);

	if(num_players_on_ip > MAX_CONNECTIONS_FROM_IP) {
		printf("MAXIPs: Connecting player(%d) exceeded %d IP connections from %s.", playerid, MAX_CONNECTIONS_FROM_IP, connecting_ip);
        SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You have exceeded the max IPs limit.");
	    Kick(playerid);
	    return 1;
	}
	// DONE
	ClearChar(playerid);
	// NAME CHECK
	new playername[32], pfile[64];
	format(pfile, sizeof(pfile), "users/%s.ini", RPNU(playerid));
	if(!dini_Exists(pfile))
	{
	    GetPlayerName(playerid, playername, sizeof(playername));
	    // Has numbers
	    if(strfind(playername, "0", true) != -1 || strfind(playername, "1", true) != -1 || strfind(playername, "2", true) != -1 || strfind(playername, "3", true) != -1 || strfind(playername, "4", true) != -1 || strfind(playername, "5", true) != -1
		|| strfind(playername, "6", true) != -1 || strfind(playername, "7", true) != -1 || strfind(playername, "8", true) != -1 || strfind(playername, "9", true) != -1 || strfind(playername, "[", true) != -1 || strfind(playername, "]", true) != -1)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}This is a RP Server, please reconnect using Firstname_Lastname format.");
			SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}Also, please remove the numbers and/or tags in your name.");
			Kick(playerid);
		}
	    // No Underscore
		if(strfind( playername, "_", true) == -1)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}This is a RP Server, please reconnect using Firstname_Lastname format.");
			Kick(playerid);
		}
	}
	// Done
    PlayerInfo[playerid][pLoggedIn] = 0;
    PlayerInfo[playerid][pSpawn] = 0;
    PlayerInfo[playerid][pTutorial] = 0;
    SetPlayerColor(playerid, TRANSPARENT_GREY);
    new file[64];
	format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
	// Checking for rangeban
	new range[4][4];
	split(RPIP(playerid), range, '.');
	format(string, sizeof(string), "%s.%s.*.*", range[0], range[1]);
	if(CheckBan(string) == 1 && !dini_Int(file, "Whitelisted"))
	{
	    SetPlayerName(playerid, "BannedPlayer");
	    SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}Your range is banned from this server. (Request getting whitelisted at www.zGaming.org)");
		Kick(playerid);
		return 1;
	}
	// Checking for IP ban
	if(CheckBan(RPIP(playerid)) == 1)
	{
	    SetPlayerName(playerid, "BannedPlayer");
	    SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You are banned from this server. (Make a ban appeal at www.zGaming.org)");
		Kick(playerid);
		return 1;
	}
	// Checking for character ban
	if(dini_Int(file, "pBanned") == 1)
	{
	    SetPlayerName(playerid, "BannedPlayer");
	    SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You are banned from this server. (Make a ban appeal at www.zGaming.org)");
	    AddBan(playerid);
	    Kick(playerid);
	    return 1;
	}
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    SetPlayerVirtualWorld(playerid, 973942);
    if(IsPlayerNPC(playerid)) {SetPlayerVirtualWorld(playerid, 0); SpawnPlayer(playerid); return 1;}
    if(!PlayerInfo[playerid][pLoggedIn])
	{
		SetPlayerPos(playerid, 1975.203002, 3779.311523, -50.243506);
		SetPlayerCameraPos(playerid, 1975.203002, 3779.311523, 100.243506);
		SetPlayerCameraLookAt(playerid, 1975.203002, 3779.311523, -0.243506);
	    SetSpawnInfo(playerid, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
	    new file[64];
		format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
	    // Player isn't banned
	    if(dini_Int(file, "AdminAccount") == 1)
		{
		    format(file, sizeof(file), "users/%s.ini",RPNU(playerid));
		    SetPlayerName(playerid, dini_Get(file, "OldName"));
		    format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
		    ShowDialog(playerid, 2);
		}
		if(!dini_Exists(file))
		{
		    ShowDialog(playerid, 1);
		    return 1;
		}
		else
		{
			ShowDialog(playerid, 2);
		}
		return 1;
	}
	else
	{
		SetPlayerPos(playerid, 1975.203002, 3779.311523, -50.243506);
		SetPlayerCameraPos(playerid, 1975.203002, 3779.311523, 100.243506);
		SetPlayerCameraLookAt(playerid, 1975.203002, 3779.311523, -0.243506);
	    SetSpawnInfo(playerid, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
		SpawnPlayer(playerid);
	}
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	// Bank Robbery
	if(BankRobber[playerid])
    {
	    new Rob = BankRobber[playerid]-1, string[128];
	    DisablePlayerCheckpoint(playerid);
		BankRobbersCount --;
		format(BankRobbers[Rob], MAX_PLAYER_NAME, "");
		DeliverMoney[playerid] = 0;
		//
		foreach(Player, i)
		{
		    if(BankRobber[i] || PlayerInfo[i][pFac] == 1)
		    {
				if(Rob == 0) TextDrawHideForPlayer(i, Textdraw1);
				else if(Rob == 1) TextDrawHideForPlayer(i, Textdraw2);
				else if(Rob == 2) TextDrawHideForPlayer(i, Textdraw3);
				else if(Rob == 3) TextDrawHideForPlayer(i, Textdraw4);
				else if(Rob == 4) TextDrawHideForPlayer(i, Textdraw5);
			}
		}
		format(string, sizeof(string), "** %s has disconnected and has failed the robbery. **", RPN(playerid));
		SendRobberyMessage(COLOR_LIGHTRED, string);
		SendCopMessage(COLOR_LIGHTRED, string);
		BankRobber[playerid] = 0;
		if(BankRobbersCount == 0)
		{
			TextDrawHideForAll(Textdraw0);
			TextDrawHideForAll(Textdraw1);
			TextDrawHideForAll(Textdraw2);
			TextDrawHideForAll(Textdraw3);
			TextDrawHideForAll(Textdraw4);
			TextDrawHideForAll(Textdraw5);
			BankRobbery = 0;
			RobberyStarted = 0;
			format(string, sizeof(string), "** The bank robbery has ended, $%d were stolen and $%d were saved. **", TotalStolen*10000, (TotalRobbers*10000-(TotalStolen*10000)));
			SendClientMessageToAll(COLOR_YELLOW, string);
			TotalRobbers = 0;
			new copsonline;
			foreach(Player, i)
			{
			    if(IsACop(i)) copsonline++;
			}
			foreach(Player, i)
			{
			    if(IsACop(i))
			    {
					new Saved = (TotalRobbers*10000-(TotalStolen*10000));
					GiveZaiatMoney(i, Saved/copsonline);
					format(string, sizeof(string), "** You have received your cut from the saved money. ($%d)", Saved/copsonline);
					SendClientMessage(i, COLOR_LIME, string);
			    }
			}
		}
    }
	// Boxing
	new string[128];
	if(Boxing[playerid])
	{
        // Getting other boxer's ID
		new playerb = -1;
        foreach(Player, i)
        {
            if(Boxing[i] && i != playerid) playerb = i;
        }
        if(playerb != -1)
        {
            format(string, sizeof(string), "Boxing Ring: The boxing match has ended, %s has won the match.", RPN(playerb));
    		SendGymMessage(COLOR_WHITE, string);
            // Putting them out of the ring
            SetPlayerPos(playerb, 760.9759,4.7187,1000.7084);
            SetPlayerFacingAngle(playerb, 268.9407);
            SetPlayerPos(playerid, 760.9759,6.1794,1000.7093);
            SetPlayerFacingAngle(playerid, 268.9407);
            // Giving the winner extra skill point
            new oldj = strval(RPJL(playerb, JOB_BOXER));
            PlayerInfo[playerb][pJobSkill][JOB_BOXER] ++;
			new newj = strval(RPJL(playerb, JOB_BOXER));
		    if(oldj < newj)
			{
			    format(string, sizeof(string), "** Your Boxer level is now %d, you can now cause %d more damage. **", newj, (newj*2)-2);
				SendClientMessage(playerb, COLOR_YELLOW, string);
			}
			//
			SendClientMessage(playerb, COLOR_LIME, " You have won the boxing match.");
			SendClientMessage(playerid, COLOR_LIGHTRED, " You have lost the boxing match.");
			// Giving Bids
			new winner = pBoxer[playerb];
			foreach(Player, i)
			{
			    if(BidBoxer[i] == winner)
			    {
			        new percent, profit;
			        percent = (BidAmount[i]/BoxerBid[winner]) * 100;
			        profit = (percent * BoxerBid[pBoxer[playerid]]) / 100;
			        GiveZaiatMoney(i, BidAmount[i] + profit);
			        format(string, sizeof(string), " You have won $%d from bidding in the match, the money you bid has been returned as well.", profit);
			        SendClientMessage(i, COLOR_LIME, string);
			    }
				BidAmount[i] = 0;
				BidBoxer[i] = 0;
			}
			for(new w = 0; w < 13; w++)
			{
			    GiveZaiatWeapon(playerb, PlayerInfo[playerb][pWeapon][w], PlayerInfo[playerb][pWeaponAmmo][w]);
			}
        }
        for(new w = 0; w < 13; w++)
		{
		    GiveZaiatWeapon(playerid, PlayerInfo[playerid][pWeapon][w], PlayerInfo[playerid][pWeaponAmmo][w]);
		}
        // Resetting Values
		BoxingMatch = 0;
		Boxer[1] = -1;
		pBoxer[playerb] = 0;
		Boxer[2] = -1;
		pBoxer[playerid] = 0;
		Boxing[playerb] = 0;
		Boxing[playerid] = 0;
		BoxerBid[1] = 0;
		BoxerBid[2] = 0;
	    if(BoxTime)
	    {
			TogglePlayerControllable(playerb, 1);
	    	KillTimer(BoxTimer);
	    }
    }
	// The rest
	if(IsPlayerLoggedIn(playerid)) {SaveChar(playerid);}
	switch(reason)
	{
	    case 0: format(string, sizeof(string), "* %s has left the server. (Timeout)", RPN(playerid));
	    case 1: format(string, sizeof(string), "* %s has left the server. (Leaving)", RPN(playerid));
	    case 2: format(string, sizeof(string), "* %s has left the server. (Kicked/Banned)", RPN(playerid));
	}
	SendNearbyMessage(playerid, 10, string, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);
	foreach(Player, i)
	{
	    if(Specid[i] == playerid)
	    {
	        Spec[i] = 0;
			Specid[i] = -1;
	    	TogglePlayerSpectating(i, 0);
			SetPlayerVirtualWorld(i, PlayerInfo[playerid][pVW]);
			SetPlayerInterior(i, PlayerInfo[playerid][pInt]);
			SetPlayerPos(i, PlayerInfo[playerid][pX], PlayerInfo[playerid][pY], PlayerInfo[playerid][pZ]);
			SendClientMessage(i, COLOR_WHITE, " You have stopped spectating players.");
	    }
	}
	// Clearing AD
	for(new i=0; i<MAX_ADS; i++)
	{
		if(strfind(AD[i], RPN(playerid)) != -1)
   		{
   		    format(AD[i], 128, "");
   		}
   	}
	// End of Clearing AD
	ClearChar(playerid);
	return 1;
}


public OnPlayerSpawn(playerid)
{
	// Anti F4 Bug - Logging/Registering
	if(!PlayerInfo[playerid][pLoggedIn] && !IsPlayerNPC(playerid))
	{
		if(IsPlayerNPC(playerid)) return 1;
		SetPlayerPos(playerid, 1975.203002, 3779.311523, -50.243506);
		SetPlayerCameraPos(playerid, 1975.203002, 3779.311523, 100.243506);
		SetPlayerCameraLookAt(playerid, 1975.203002, 3779.311523, -0.243506);
	    SetSpawnInfo( playerid, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
	    new file[64];
		format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
	    // Player isn't banned
	    if(dini_Int(file, "AdminAccount") == 1)
		{
		    format(file, sizeof(file), "users/%s.ini",RPNU(playerid));
		    SetPlayerName(playerid, dini_Get(file, "OldName"));
		    format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
		    ShowDialog(playerid, 2);
		}
		if(!dini_Exists(file))
		{
		    ShowDialog(playerid, 1);
		    return 1;
		}
		else
		{
			ShowDialog(playerid, 2);
		}
		return 1;
	}
	// Actual Spawning
    ResetPlayerWeapons(playerid);
	if(IsPlayerNPC(playerid)) //Checks if the player that just spawned is an NPC.
	{
	  new npcname[MAX_PLAYER_NAME];
	  GetPlayerName(playerid, npcname, sizeof(npcname)); //Getting the NPC's name.
	  if(!strcmp(npcname, "BusDriver", true)) //Checking if the NPC's name is BusDriver
	  {
	    PutPlayerInVehicle(playerid, NPCBus, 0); //Putting the NPC into the vehicle we created for it.
	    return 1;
	  }
	  return 1;
	}
    if(PlayerInfo[playerid][pLoggedIn] && PlayerInfo[playerid][pSpawn])
    {
        FalseBan[playerid] = 0;
        SetTimerEx("FalseBanFix", 6000, false, "i", playerid);
    	SpawnChar(playerid);
    }
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(IsPlayerLoggedIn(playerid))
	{
	    new string[128];
	    if(BankRobber[playerid])
	    {
    	    new Rob = BankRobber[playerid]-1;
		    DisablePlayerCheckpoint(playerid);
			BankRobbersCount --;
			format(BankRobbers[Rob], MAX_PLAYER_NAME, "");
			DeliverMoney[playerid] = 0;
			//
			foreach(Player, i)
			{
			    if(BankRobber[i] || PlayerInfo[i][pFac] == 1)
			    {
					if(Rob == 0) TextDrawHideForPlayer(i, Textdraw1);
					else if(Rob == 1) TextDrawHideForPlayer(i, Textdraw2);
					else if(Rob == 2) TextDrawHideForPlayer(i, Textdraw3);
					else if(Rob == 3) TextDrawHideForPlayer(i, Textdraw4);
					else if(Rob == 4) TextDrawHideForPlayer(i, Textdraw5);
				}
			}
			format(string, sizeof(string), "** %s has been hospitalized and has failed the robbery. **", RPN(playerid));
			SendRobberyMessage(COLOR_LIGHTRED, string);
			SendCopMessage(COLOR_LIGHTRED, string);
			BankRobber[playerid] = 0;
			if(BankRobbersCount == 0)
			{
				TextDrawHideForAll(Textdraw0);
				TextDrawHideForAll(Textdraw1);
				TextDrawHideForAll(Textdraw2);
				TextDrawHideForAll(Textdraw3);
				TextDrawHideForAll(Textdraw4);
				TextDrawHideForAll(Textdraw5);
				BankRobbery = 0;
				RobberyStarted = 0;
				format(string, sizeof(string), "** The bank robbery has ended, $%d were stolen and $%d were saved. **", TotalStolen*10000, (TotalRobbers*10000-(TotalStolen*10000)));
				SendClientMessageToAll(COLOR_YELLOW, string);
				TotalRobbers = 0;
				new copsonline;
				foreach(Player, i)
				{
				    if(IsACop(i)) copsonline++;
				}
				foreach(Player, i)
				{
				    if(IsACop(i))
				    {
						new Saved = (TotalRobbers*10000-(TotalStolen*10000));
						GiveZaiatMoney(i, Saved/copsonline);
						format(string, sizeof(string), "** You have received your cut from the saved money. ($%d)", Saved/copsonline);
						SendClientMessage(i, COLOR_LIME, string);
				    }
				}
			}
	    }
	    if(!IsAFK[playerid])
	    {
	        if(Event[playerid])
	        {
	        	format(string, sizeof(string), "OnEventDeath: %s has killed %s using %s.", RPN(killerid), RPN(playerid), RWN(reason));
				foreach(Player, i)
				{
				    if(Event[i]) SendClientMessage(i, COLOR_REPORT, string);
				}
				Event[playerid] = 0;
	        }
			else
			{
			    PlayerInfo[playerid][pHospital] = 1;
				PlayerInfo[playerid][pArmor] = 0;
			    if(IsPlayerLoggedIn(killerid))
			    {
					format(string, sizeof(string), "OnPlayerDeath: %s has killed %s using %s.", RPN(killerid), RPN(playerid), RWN(reason));
					SendAdminMessage(COLOR_DARKRED, 1, string);
					Log("logs/kill.log", string);
					if(Hitman[killerid] == playerid)
					{
					    format(string, sizeof(string), " You have been critically injured by a hitman and lost $%d, the contrat on your head was cleared.", PlayerInfo[playerid][pContract]/2);
					    SendClientMessage(playerid, COLOR_YELLOW, string);
					    format(string, sizeof(string), "HitmanWarn: %s has fulfilled the contract on %s's head and collected $%d.", RPN(killerid), RPN(playerid), PlayerInfo[playerid][pContract]/2);
						SendHitmanMessage(COLOR_YELLOW, string);
						GiveZaiatMoney(playerid, -PlayerInfo[playerid][pContract]/2);
						GiveZaiatMoney(killerid, PlayerInfo[playerid][pContract]/2);
						PlayerInfo[playerid][pContract] = 0;
						format(PlayerInfo[playerid][pContract], 32, "");
						Hitman[killerid] = -1;
						PlayerInfo[killerid][pCSuccess] ++;
					}
					if(Hitman[playerid] == killerid)
					{
					    format(string, sizeof(string), " You have critically injured a hitman and collected $%d, the contrat on your head was cleared.", PlayerInfo[killerid][pContract]);
					    SendClientMessage(killerid, COLOR_YELLOW, string);
					    format(string, sizeof(string), "HitmanWarn: %s has failed the contract on %s's head and lost $%d.", RPN(playerid), RPN(killerid), PlayerInfo[killerid][pContract]);
						SendHitmanMessage(COLOR_YELLOW, string);
						GiveZaiatMoney(playerid, -PlayerInfo[killerid][pContract]);
						GiveZaiatMoney(killerid, PlayerInfo[killerid][pContract]);
						PlayerInfo[killerid][pContract] = 0;
						format(PlayerInfo[killerid][pContract], 32, "");
						Hitman[playerid] = -1;
						PlayerInfo[playerid][pCFail] ++;
					}
				}
			}
			if(BeingCalled[playerid] || Calling[playerid])
			{
			    if(BeingCalled[playerid]) SendClientMessage(Caller[playerid], COLOR_ORANGE, " The line went dead...");
		    	else if(Calling[playerid]) SendClientMessage(Called[playerid], COLOR_ORANGE, " The line went dead...");
			    new params[1];
			    cmd_hangup(playerid, params);
			}
		}
		else
		{
		    GetPlayerPos(playerid, PlayerInfo[playerid][pX], PlayerInfo[playerid][pY], PlayerInfo[playerid][pZ]);
		   	ClearZaiatWantedLevels(killerid);
		    SetPlayerColor(killerid, TRANSPARENT_ORANGE);
			PlayerInfo[killerid][pPrison] = 2;
			PlayerInfo[killerid][pPrisonTime] = AFK[playerid];
			format(PlayerInfo[killerid][pPrisonReason], 64, "Killing AFK Players");
			format(PlayerInfo[killerid][pPrisonBy], 32, "AutoPrison");
			SetPlayerInterior(killerid, 2);
			SetPlayerVirtualWorld(killerid, 1);
			new RandomCell = random(sizeof(RandomPrison));
			SetPlayerFacingAngle(killerid, RandomPrison[RandomCell][3]);
			TogglePlayerControllable(killerid, 0);
			SetTimerEx("EnterExitTimer", 5000, false, "i", killerid);
			SetPlayerPos(killerid, RandomPrison[RandomCell][0], RandomPrison[RandomCell][1], RandomPrison[RandomCell][2]);
			SetCameraBehindPlayer(killerid);
			format(string, sizeof(string), "AdmCmd: %s has been auto-prisoned, reason: Killing AFK Players [%d Minutes]", RPN(killerid), AFK[playerid]/60);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			Log("logs/prison.log", string);
			format(string, sizeof(string), " You have been auto-prisoned for %d minutes (%d seconds)", PlayerInfo[killerid][pPrisonTime]/60, PlayerInfo[killerid][pPrisonTime]);
			SendClientMessage(killerid, COLOR_LIGHTBLUE, string);
		}
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	if(vehicleid != 509 && vehicleid != 481 && vehicleid != 510)
	{
	    SetVehicleParamsEx(vehicleid, 0, 0, 0, 0, 0, 0, 0);
		foreach(Player, i)
		{
		    if(vehicleid == PlayerInfo[i][pVeh])
		    {
		        if(PlayerInfo[i][vLocked]) SetVehicleParamsEx(vehicleid, 0, 0, 0, 1, 0, 0, 0);
	            ChangeVehiclePaintjob(PlayerInfo[i][pVeh], PlayerInfo[i][vPJ]);
				for(new x=0; x<14; i++)
				{
				    AddVehicleComponent(PlayerInfo[i][pVeh], PlayerInfo[i][pVehMod][x]);
				}
		    }
		    if(vehicleid == PlayerInfo[i][pVVeh])
		    {
		        if(PlayerInfo[i][vVLocked]) SetVehicleParamsEx(vehicleid, 0, 0, 0, 1, 0, 0, 0);
	            ChangeVehiclePaintjob(PlayerInfo[i][pVVeh], PlayerInfo[i][vVPJ]);
				for(new x=0; x<14; i++)
				{
				    AddVehicleComponent(PlayerInfo[i][pVVeh], PlayerInfo[i][pVVehMod][x]);
				}
		    }
		}
		if(IsTruckerVehicle(vehicleid))
		{
		    TruckPackages[vehicleid] = -1;
		}
		if(Siren[vehicleid])
		{
			Siren[vehicleid] = 0;
	        DestroyDynamicObject(SirenObject[vehicleid]);
        }
    }
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	return 1;
}


public OnPlayerText(playerid, text[])
{
	// Anti Adv
    if(AntiAdv(playerid, text)) return 0;
	// The Rest
	new string[128];
    // Normal Calling
	if(BeingCalled[playerid] == 2 || Calling[playerid] == 2 || Call911[playerid])
	{
		if(strlen(PlayerInfo[playerid][pAccent])) format(string, sizeof(string), "[Cellphone] %s: [%s Accent] %s", RPN(playerid), PlayerInfo[playerid][pAccent], text);
	    else format(string, sizeof(string), "[Cellphone] %s: %s", RPN(playerid), text);
	    if(!Call911[playerid])
	    {
		    if(BeingCalled[playerid] == 2) SendClientMessage(Caller[playerid], COLOR_YELLOW, string);
		    else if(Calling[playerid] == 2) SendClientMessage(Called[playerid], COLOR_YELLOW, string);
	    }
	}
	else if(Live[playerid])
	{
		if(IsNewsVehicle(GetPlayerVehicleID(playerid)))
		{
			format(string, sizeof(string), "** [Live News]: %s: %s", RPN(playerid), text);
			SendClientMessageToAll(COLOR_LIGHTGREEN, string);
		}
	}
	else
	{
		if(strlen(PlayerInfo[playerid][pAccent])) format(string, sizeof(string), "%s says: [%s Accent] %s", RPN(playerid), PlayerInfo[playerid][pAccent], text);
		else format(string, sizeof(string), "%s says: %s", RPN(playerid), text);
	}
	SendNearbyMessage(playerid, 10, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	Log("logs/chat.log", string);
	// 911
    if(Calling[playerid] && Call911[playerid])
    {
        if(Call911[playerid] == 1)
        {
            format(D911[playerid], 12, "%s", text);
            Call911[playerid] = 2;
            SendClientMessage(playerid, COLOR_YELLOW, "[Cellphone]: What is your current location?");
        }
        else if(Call911[playerid] == 2)
        {
            Call911[playerid] = 0;
            Calling[playerid] = 0;
            SendClientMessage(playerid, COLOR_YELLOW, "[Cellphone]: Alright, we have received your emergency call and a unit will be there shortly.");
            SendClientMessage(Caller[playerid], COLOR_ORANGE, " They hungup the line.");
            format(string, sizeof(string), "{2641FE}Dispatch: {FFFFFF}We have received an emergency call from the phone number %d (( /track %d ))", PlayerInfo[playerid][pCellphone], playerid);
            SendClientMessage(playerid, COLOR_WHITE, string);
            format(string, sizeof(string), "{2641FE}Emergency: {FFFFFF}%s", D911[playerid]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            format(string, sizeof(string), "{2641FE}Location: {FFFFFF}%s", text);
            SendClientMessage(playerid, COLOR_WHITE, string);
            format(D911[playerid], 128, "");
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
        }
    }
	/*format(OldSpamChat[playerid], 128, "%s", NewSpamChat[playerid]);
	format(NewSpamChat[playerid], 128, "%s", text);
	if(strlen(OldSpamChat[playerid]) > 0 && strlen(NewSpamChat[playerid]) > 0)
	{
		if(!strcmp(OldSpamChat[playerid], NewSpamChat[playerid], false))
		{
			ChatSpamCount[playerid] ++;
			if(ChatSpamCount[playerid] >= 8)
			{
				format(string, sizeof(string), "AdmCmd: %s has been autokicked, reason: Spam", RPN(playerid));
				SendClientMessageToAll(COLOR_LIGHTRED, string);
				ChatSpamCount[playerid] = 0;
				Kick(playerid);
			}
		}
		else
		{
		    ChatSpamCount[playerid] = 0;
		}
	}*/
	return 0;
}


public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid)
{
	if(weaponid == 0 && GetPlayerFightingStyle(playerid) == FIGHT_STYLE_BOXING || weaponid == 1 && GetPlayerFightingStyle(playerid) == FIGHT_STYLE_BOXING)
	{
	    new Float:hArmor; GetPlayerArmour(damagedid, hArmor);
	    if(hArmor <= 0)
	    {
		    new hit = strval(RPJL(playerid, JOB_BOXER));
			new Float:OldHP; GetPlayerHealth(damagedid, OldHP);
			SetPlayerHealth(damagedid, OldHP-((hit*2)-2));
		}
	}
	return 1;
}

public OnPlayerShootPlayer(Shooter,Target,Float:HealthLost,Float:ArmourLost)
{
	new string[128];
	if(GetPlayerWeapon(Shooter) == 34 && PlayerInfo[Shooter][pScope] && Hitman[Shooter] == Target)
	{
		SetPlayerHealth(Target, 0);
		if(Hitman[Shooter] == Target)
		{
		    format(string, sizeof(string), " You have been critically injured by a hitman and lost $%d, the contrat on your head was cleared.", PlayerInfo[Target][pContract]/2);
		    SendClientMessage(Target, COLOR_YELLOW, string);
		    format(string, sizeof(string), "HitmanWarn: %s has fulfilled the contract on %s's head and collected $%d.", RPN(Shooter), RPN(Target), PlayerInfo[Target][pContract]/2);
			SendHitmanMessage(COLOR_YELLOW, string);
			GiveZaiatMoney(Target, -PlayerInfo[Target][pContract]/2);
			GiveZaiatMoney(Shooter, PlayerInfo[Target][pContract]/2);
			PlayerInfo[Target][pContract] = 0;
			format(PlayerInfo[Target][pContract], 32, "");
			Hitman[Shooter] = -1;
			PlayerInfo[Shooter][pCSuccess] ++;
		}
		PlayerInfo[Shooter][pScope] --;
	}
	if(IsACop(Shooter))
	{
	    if(Tazer[Shooter])
	    {
	        if(GetPlayerWeapon(Shooter) == 23)
	        {
	            if(!IsPlayerTazed(Target) && !IsPlayerCuffed(Target) && !IsPlayerTied(Target))
	            {
		            new Float:HP, Float:Armor;
		            GetPlayerHealth(Target, HP);
		            GetPlayerArmour(Target, Armor);
		            SetPlayerHealth(Target, HealthLost+HP);
		            SetPlayerArmour(Target, ArmourLost+Armor);
		            if(!IsPlayerNearPlayer(Shooter, Target, 8)) return SendClientMessage(Shooter, COLOR_GREY, "You are too far away from that player.");
					if(IsHoldingFirearm(Target)) return SendClientMessage(Shooter, COLOR_GREY, "You can't taze someone with a gun in hand.");
					// Got Tazed
				    format(string, sizeof(string), "* %s aims their tazer on %s and tazes them.", RPN(Shooter), RPN(Target));
				    SendNearbyMessage(Shooter, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				    GameTextForPlayer(Target, "~r~Tazed", 3500, 3);
				    // Custom Freeze
				    ApplyAnimation(Target,"CRACK","crckdeth2",4.1,0,1,1,1,1,1);
					TogglePlayerControllable(Target, 0);
					// Tazed Detecting
					TogglePlayerTazed(Target, 1);
					// Tazer Timeout
					TazeTimeout[Target] = 11;
					TazeCountDown[Target] = SetTimerEx("TazeTimer", 1000, true, "d", Target);
				}

		    }
	    }
	}
	return 1;
}



public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	new string[128];
	format(string, sizeof(string), "[cmd] [%s]: %s", RPN(playerid), cmdtext);
 	print(string);
    if(!success)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}Unknown command, type /help for most available commands.");
	}
	/*if(strfind(cmdtext, "/next", true) == -1 || strfind(cmdtext, "/toys", true) == -1)
	{
		format(OldSpamCommand[playerid], 128, "%s", NewSpamCommand[playerid]);
		format(NewSpamCommand[playerid], 128, "%s", cmdtext);
		if(strlen(OldSpamCommand[playerid]) > 0 && strlen(NewSpamCommand[playerid]) > 0)
		{
			if(!strcmp(OldSpamCommand[playerid], NewSpamCommand[playerid], false))
			{
			    CommandSpamCount[playerid] ++;
			    if(CommandSpamCount[playerid] >= 8)
			    {
				    format(string, sizeof(string), "AdmCmd: %s has been autokicked, reason: Spam", RPN(playerid));
				    SendClientMessageToAll(COLOR_LIGHTRED, string);
				    CommandSpamCount[playerid] = 0;
				    Kick(playerid);
			    }
			}
			else
			{
			    CommandSpamCount[playerid] = 0;
			}
		}
	}*/
    return 1;
}


// OnPlayerCommandText
CMD:help(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	SendClientMessage(playerid, COLOR_YELLOW, "GENERAL: {FFFFFF}/stats /reportbug /serverstats /tog /call (/p)ickup (/h)angup /buysim /wtc /search /changepass /tabcheck /fuel");
	SendClientMessage(playerid, COLOR_YELLOW, "GENERAL: {FFFFFF}/pay (/un)blindfold (/un)tie /colorcar /paintcar /buy /phonebook /withdraw /deposit /wire /paycheck /id /afkcheck");
	SendClientMessage(playerid, COLOR_YELLOW, "GENERAL: {FFFFFF}/points /buycar /lock /park /locatecar /sellcartomarket /speedlimit /helpers /joinevent /quitevent /train /stuck");
	SendClientMessage(playerid, COLOR_YELLOW, "GENERAL: {FFFFFF}/bid /loyal /changeview");
	SendClientMessage(playerid, COLOR_YELLOW, "CHAT: {FFFFFF}/newbie /o /b /s /l /w /wt /f /r /d /call /sms /report /helpme /accent");
	SendClientMessage(playerid, COLOR_YELLOW, "INTERACTIONS: {FFFFFF}/me /do /enter /exit /drop /contract /engine /license /showlicense /refer /tow");
	SendClientMessage(playerid, COLOR_YELLOW, "BUSINESS: {FFFFFF}/buybiz /vault /lock /sellbiztomarket");
	SendClientMessage(playerid, COLOR_YELLOW, "HOUSE: {FFFFFF}/buyhouse /hdeposit /hwithdraw /lock /houseupgrade /sellhousetomarket");
	SendClientMessage(playerid, COLOR_YELLOW, "HELP: {FFFFFF}/animlist /vehhelp /bizhelp /househelp /jobhelp /factionhelp /familyhelp /helperhelp /viphelp /referhelp /cookieshelp");
	SendClientMessage(playerid, COLOR_YELLOW, "HELP: {FFFFFF}/robberyhelp /fishhelp /gatehelp");
	return 1;
}

CMD:loyal(playerid, params[])
{
	if(PlayerInfo[playerid][pLoyal] && PlayerInfo[playerid][pLevel] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not a Loyal player.");
	ShowDialog(playerid, 26);
	return 1;
}

CMD:gatehelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    SendClientMessage(playerid, COLOR_YELLOW, "DYNAMIC GATES HELP: {FFFFFF}/gate /changegatepass");
	return 1;
}

CMD:changegatepass(playerid, params[])
{
	new string[128], slot, password[256], idx;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "is[256]", slot, password)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /changegatepass [slot] [password]");
	if(slot < 1 || slot > 3) return SendClientMessage(playerid, COLOR_GREY, "Gate slots are between 1 and 3.");
	switch(slot)
	{
		case 1: idx = PlayerInfo[playerid][pGate][0];
		case 2: idx = PlayerInfo[playerid][pGate][1];
		case 3: idx = PlayerInfo[playerid][pGate][2];
	}
	if(!idx) return SendClientMessage(playerid, COLOR_GREY, "You don't have a gate registered to this slot.");
	format(GateInfo[idx][gPassword], 256, "%s", password);
 	format(string, sizeof(string), " You have changed your slot %d (ID: %d) gate's password to {FF6347}%s", slot, idx, password);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:fishhelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    SendClientMessage(playerid, COLOR_YELLOW, "FISH HELP: {FFFFFF}/fish /fishes /sellfish /drop");
	return 1;
}

CMD:sellfish(playerid, params[])
{
	new idx = GetPlayerVirtualWorld(playerid)-100, string[128], fish, price;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(idx > 0 && idx < MAX_BIZ && BizInfo[idx][bType] != 1 || idx < 1 || idx > MAX_BIZ) return SendClientMessage(playerid, COLOR_GREY, "You are not inside a 24/7 Market.");
	if(sscanf(params, "i", fish)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sellfish [fishslot]");
	if(fish < 1 || fish > 5) return SendClientMessage(playerid, COLOR_GREY, "Fishes are between 1 and 5.");
	fish = fish-1;
	if(!PlayerInfo[playerid][pFish][fish]) return SendClientMessage(playerid, COLOR_GREY, "You don't have any fish in this slot.");
	if(PlayerInfo[playerid][pFish][fish] < 20) return SendClientMessage(playerid, COLOR_GREY, "You can't sell fishes that weight less than 20 lbs.");
	price = PlayerInfo[playerid][pFish][fish] * 2;
	GiveZaiatMoney(playerid, price);
	PlayerInfo[playerid][pFish][fish] = 0;
	format(string, sizeof(string), "* %s has sold a fish to the 24/7 market.", RPN(playerid));
 	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), "* You have sold a {FF6347}%d lbs{33CCFF} fish for {FF6347}$%d{33CCFF}.", price/2, price);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:fishes(playerid, params[])
{
	new string[128];
    SendClientMessage(playerid, COLOR_GREEN, "____________________________");
	SendClientMessage(playerid, COLOR_ORANGE, "*** Your Fishes ***");
	for(new i=0; i<5; i++)
	{
		if(PlayerInfo[playerid][pFish][i]) format(string, sizeof(string), "%d) %d lbs.", i+1, PlayerInfo[playerid][pFish][i]);
		else format(string, sizeof(string), "%d) None.", i+1);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}


CMD:fish(playerid, params[])
{
	new string[128], done, fish;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsAtFishingSpot(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not at a fishing spot.");
	if(FishTime[playerid])
	{
	    format(string, sizeof(string), "You need to wait %d more seconds before fishing again.", FishTime[playerid]);
		SendClientMessage(playerid, COLOR_GREY, string);

	    return 1;
	}
	for(new i=0; i<5; i++) // Fish
	{
	    if(!done)
	    {
		    if(!PlayerInfo[playerid][pFish][i]) done = i+1;
	    }
	}
	if(!done) return SendClientMessage(playerid, COLOR_GREY, "You can't carry anymore fishes.");
	done = done-1;
	// Catching
	if(strval(RPJL(playerid, JOB_FISHER)) == 1) fish = random(25)+1;
	else if(strval(RPJL(playerid, JOB_FISHER)) == 2) fish = random(26)+5;
	else if(strval(RPJL(playerid, JOB_FISHER)) == 3) fish = random(31)+10;
	else if(strval(RPJL(playerid, JOB_FISHER)) == 4) fish = random(36)+15;
	else if(strval(RPJL(playerid, JOB_FISHER)) == 5) fish = random(41)+25;
	PlayerInfo[playerid][pFish][done] = fish;
	format(string, sizeof(string), "* %s attempts to catch a fish using the fishing rod.", RPN(playerid));
 	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), " You have caught a %d lbs fish.", fish);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	// Leveling
    new oldj = strval(RPJL(playerid, JOB_FISHER));
    PlayerInfo[playerid][pJobSkill][JOB_FISHER] ++;
	new newj = strval(RPJL(playerid, JOB_FISHER));
    if(oldj < newj)
	{
	    format(string, sizeof(string), "** Your Fisher level is now %d, you can now catch heavier fishes. **", newj);
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	Fished[playerid] ++;
	if(Fished[playerid] >= 5)
	{
		Fished[playerid] = 0;
		FishTime[playerid] = 60*5;
		SetTimerEx("FishingTime", 1000, false, "i", playerid);
	}
	return 1;
}

CMD:stuck(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(IsPlayerCuffed(playerid) || IsPlayerTazed(playerid) || IsPlayerTied(playerid) || Boxing[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You can't do that at this time.");
	TogglePlayerControllable(playerid, 1);
	return 1;
}

CMD:train(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 756.3295,5.6053,1000.6988)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the training spot inside the gym.");
	ShowDialog(playerid, 22);
	return 1;
}

CMD:tow(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if (!IsATowTruck(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_GREY, "You are not in a tow truck.");
    if  (IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) SendClientMessage(playerid, COLOR_GREY, "You are already towing a vehicle.");
    new Float:PPPX,Float:PPPY,Float:PPPZ;
    GetPlayerPos(playerid,PPPX,PPPY,PPPZ);
    new Float:VVVX,Float:VVVY,Float:VVVZ;
    new Found=0;
    new vid=0;
    while((vid<MAX_VEHICLES)&&(!Found))
    {
    	vid++;
        GetVehiclePos(vid,VVVX,VVVY,VVVZ);
        if  ((floatabs(PPPX-VVVX)<7.0)&&(floatabs(PPPY-VVVY)<7.0)&&(floatabs(PPPZ-VVVZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
        {
        	Found=1;
            AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
            format(string, sizeof(string), "* %s starts towing a vehicle.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
        }

    }
    if  (!Found)
    {
		SendClientMessage(playerid,COLOR_GREY,"There is no vehicle in range.");
    }
    return 1;
}

CMD:gascan(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pGas]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a gas can on you.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You are not driving a vehicle.");
    new vehicleid = GetPlayerVehicleID(playerid);
    if(Fuel[vehicleid] >= 150) return SendClientMessage(playerid, COLOR_GREY, "The gas tank is completely full.");
	SetVehicleParamsEx(vehicleid, 0, 0, 0, 0, 0, 0, 0);
	Fuel[vehicleid] = Fuel[vehicleid]+20;
	if(Fuel[vehicleid]> 150) Fuel[vehicleid] = 150;
	PlayerInfo[playerid][pGas] --;
	format(string, sizeof(string), "* %s completely turns off the vehicle and fills its tank with gas from a can.", RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:fuel(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You are not driving a vehicle.");
	if(!IsPlayerInRangeOfPoint(playerid, 5, 1941.7532,-1776.3621,13.6406) && !IsPlayerInRangeOfPoint(playerid, 5, 1941.7856,-1769.2583,13.6406)
	&& !IsPlayerInRangeOfPoint(playerid, 5, 1000.4276,-937.2377,42.3281) && !IsPlayerInRangeOfPoint(playerid, 5, 1007.4702,-936.3239,42.3281))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not near a gas station.");
	    return 1;
	}
	if(Fuel[GetPlayerVehicleID(playerid)] >= 100) return SendClientMessage(playerid, COLOR_GREY, "Your vehicle's fuel tank is full.");
	if(PlayerInfo[playerid][pMoney] <= 0) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you to do that.");
    new vehicleid = GetPlayerVehicleID(playerid);
	SetVehicleParamsEx(vehicleid, 0, 0, 0, 0, 0, 0, 0);
    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
    {SetVehicleParamsEx(vehicleid, 0, 0, 0, PlayerInfo[playerid][vLocked], 0, 0, 0);}
    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
    {SetVehicleParamsEx(vehicleid, 0, 0, 0, PlayerInfo[playerid][vVLocked], 0, 0, 0);}
    format(string, sizeof(string), "* %s completely turns the vehicle off and starts refilling it from the gas station.", RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SetTimerEx("RefillTimer", 1000, false, "i", playerid);
	return 1;
}

CMD:cookieshelp(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	format(string, sizeof(string), "* You have %d cookies.", PlayerInfo[playerid][pCookies]);
	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	SendClientMessage(playerid, COLOR_WHITE, " Full Health (2 Cookies) | Full Armor (3 Cookies) | 200 Bullets (5 Cookies)");
	SendClientMessage(playerid, COLOR_WHITE, " 50 Weed (8 Cookies) | 50 Crack (10 Cookies)");
	SendClientMessage(playerid, COLOR_LIGHTRED, " COOKIES USAGE: /usecookies [option]");
	SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	return 1;
}

CMD:usecookies(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /usecookies [option]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: Health | Armor | Bullets | Weed | Crack");
		return 1;
	}
	if(!strcmp(params, "health", true))
	{
	    if(PlayerInfo[playerid][pCookies] < 2) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough cookies on you for that.");
	    SetPlayerHealth(playerid, 100);
		PlayerInfo[playerid][pCookies] -= 2;
		format(string, sizeof(string), "* %s has used some cookies.", RPN(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 		format(string, sizeof(string), " You have used 2 cookies for full health.");
	}
	else if(!strcmp(params, "armor", true))
	{
	    if(PlayerInfo[playerid][pCookies] < 3) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough cookies on you for that.");
	    SetPlayerArmour(playerid, 100);
	    PlayerInfo[playerid][pCookies] -= 3;
	    format(string, sizeof(string), "* %s has used some cookies.", RPN(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 		format(string, sizeof(string), " You have used 2 cookies for full armor.");
	}
	else if(!strcmp(params, "bullets", true))
	{
	    if(PlayerInfo[playerid][pCookies] < 5) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough cookies on you for that.");
	    if(!IsHoldingBullets(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not holding a weapon with bullets.");
	    GiveZaiatWeapon(playerid, GetPlayerWeapon(playerid), 200);
	    PlayerInfo[playerid][pCookies] -= 5;
	    format(string, sizeof(string), "* %s has used some cookies.", RPN(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 		format(string, sizeof(string), " You have used 2 cookies for 200 bullets for the weapon you are holding.");
	}
	else if(!strcmp(params, "weed", true))
	{
	    if(PlayerInfo[playerid][pCookies] < 8) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough cookies on you for that.");
	    PlayerInfo[playerid][pWeed] += 50;
	    PlayerInfo[playerid][pCookies] -= 8;
	    format(string, sizeof(string), "* %s has used some cookies.", RPN(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 		format(string, sizeof(string), " You have used 2 cookies for 50 grams of weed.");
	}
	else if(!strcmp(params, "crack", true))
	{
	    if(PlayerInfo[playerid][pCookies] < 10) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough cookies on you for that.");
	    PlayerInfo[playerid][pCrack] += 50;
	    PlayerInfo[playerid][pCookies] -= 10;
	    format(string, sizeof(string), "* %s has used some cookies.", RPN(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 		format(string, sizeof(string), " You have used 2 cookies for 50 grams of crack.");
	}
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:refhelp(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	format(string, sizeof(string), "* You have %d referral points.", PlayerInfo[playerid][pRefPoints]);
	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	SendClientMessage(playerid, COLOR_WHITE, " Referral system is a way for players to gain prizes for inviting their friends to the server.");
	SendClientMessage(playerid, COLOR_WHITE, " Prizes for referral points can be found on www.zGaming.org");
	SendClientMessage(playerid, COLOR_WHITE, " When you invite someone to the server they have to gain 4 respect points before making you their refer.");
	SendClientMessage(playerid, COLOR_WHITE, " This is an attempt to prevent players from creating new accounts and giving theirselves referral points.");
	SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	return 1;
}

CMD:refer(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pHours] < 4) return SendClientMessage(playerid, COLOR_GREY, "You need to have at least 4 respect points before making someone your refer.");
	if(!PlayerInfo[playerid][pNew]) return SendClientMessage(playerid, COLOR_GREY, "You are not a new player or you've already made someone your refer.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /refer [playerid]");
	format(string, sizeof(string), "RefWarn: %s has made you their refer, you have gained a referral point.", RPN(playerid));
	SendClientMessage(playerid, COLOR_LIME, string);
	format(string, sizeof(string), "RefWarn: You have made %s your refer, he has gained a referral point.", RPN(playerb));
	SendClientMessage(playerid, COLOR_LIME, string);
	PlayerInfo[playerid][pNew] = 0;
	PlayerInfo[playerb][pRefPoints] ++;
	format(string, sizeof(string), "%s (%s) has made %s (%s) their refer.", RPN(playerid), RPIP(playerid), RPN(playerb), RPIP(playerb));
	Log("logs/referral.log", string);
	return 1;
}

CMD:viphelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pVIP]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	SendClientMessage(playerid, COLOR_YELLOW, "BRONZE VIP: {FFFFFF}/v /vip /vips /mech + /buyhealth /buyarmor + [VIP Lounge | Newbie Tag]");
	SendClientMessage(playerid, COLOR_YELLOW, "SILVER VIP: {FFFFFF}/buyviptoys + Bronze VIP + [2 Jobs | 2 Vehicles]");
	SendClientMessage(playerid, COLOR_YELLOW, "GOLD VIP: {FFFFFF}/vipbuddy + Silver VIP + [2 Houses]");
	SendClientMessage(playerid, COLOR_YELLOW, "Platinum VIP: {FFFFFF}/buygun + Gold VIP + [2 Businesses]");
	return 1;
}

CMD:buyarmor(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!PlayerInfo[playerid][pVIP]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 287.2132,-177.3140,999.6060)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the VIP armor spot.");
	if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you. ($100)");
	GiveZaiatMoney(playerid, -100);
	SetPlayerArmour(playerid, 100);
	return 1;
}

CMD:buyhealth(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!PlayerInfo[playerid][pVIP]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 285.0209,-177.3140,999.6060)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the VIP health spot.");
	if(PlayerInfo[playerid][pMoney] < 50) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you. ($50)");
	GiveZaiatMoney(playerid, -50);
	SetPlayerHealth(playerid, 100);
	return 1;
}

CMD:buygun(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!PlayerInfo[playerid][pVIP]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(PlayerInfo[playerid][pVIP] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not Platinum VIP.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 278.4188,-180.5654,999.6060)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the VIP Weapons Shop.");
	ShowDialog(playerid, 19);
	return 1;
}

CMD:vipbuddy(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pVIP] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(PlayerInfo[playerid][pVIPBuddy])
	{
	    format(string, sizeof(string), " You need to wait %d more hours before giving someone else Bronze VIP.", PlayerInfo[playerid][pVIPBuddy]);
	    SendClientMessage(playerid, COLOR_GREY, string);
	    return 1;
	}
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /vipbuddy [playerid]");
	if(PlayerInfo[playerb][pVIP]) return SendClientMessage(playerid, COLOR_GREY, "Player is already VIP");
	PlayerInfo[playerid][pVIPBuddy] = 12;
	PlayerInfo[playerb][pVIP] = 1;
	PlayerInfo[playerb][pVIPTemp] = 60;
	format(string, sizeof(string), " You have given %s temporary Bronze VIP package for an hour.", RPN(playerb));
	SendClientMessage(playerid, COLOR_VIP, string);
	format(string, sizeof(string), " %s has given you temporary Bronze VIP package for an hour.", RPN(playerid));
	SendClientMessage(playerb, COLOR_VIP, string);
	return 1;
}

CMD:v(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pVIP]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /v [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(VIPOff[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You have the VIP chat toggled off.");
	format(string, sizeof(string), "** %s VIP %s: %s", RPVIPN(playerid), RPN(playerid), params);
	SendVIPMessage(COLOR_VIP, string);
	return 1;
}

CMD:vip(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pVIP]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	ShowDialog(playerid, 16);
	return 1;
}

CMD:vips(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pVIP]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Online zG:RP VIPs]");
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pVIP])
	    {
	        if(PlayerInfo[i][pVIPTemp])
	        {
		        format(string, sizeof(string), "- [%s VIP] %s [Expires in %d minutes] [VIP Buddy]", RPVIPN(i), RPN(i), PlayerInfo[i][pVIPTemp]);
		        SendClientMessage(playerid, COLOR_VIP, string);
	        }
	        else
	        {
		        format(string, sizeof(string), "- [%s VIP] %s [Expires on: %d/%d]", RPVIPN(i), RPN(i), PlayerInfo[i][pVIPDay], PlayerInfo[i][pVIPMonth]);
		        SendClientMessage(playerid, COLOR_VIP, string);
	        }
	    }
	}
	return 1;
}

CMD:accent(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[16]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /accent [accent]");
	if(AntiAdv(playerid, params)) return 1;
	if(!strcmp(params, "none"))
	{
	    format(PlayerInfo[playerid][pAccent], 16, "");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You are not using any accent now.");
	}
	else
	{
		format(PlayerInfo[playerid][pAccent], 16, "%s", params);
		format(string, sizeof(string), " You are now talking with the accent: %s", PlayerInfo[playerid][pAccent]);
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

CMD:license(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pCarLic]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a drivers license.");
	SendClientMessage(playerid, COLOR_ORANGE, "[San Andreas Department of Motor Vehicles]");
	format(string, sizeof(string), "Name: {FFFFFF}%s", RPN(playerid));
	SendClientMessage(playerid, COLOR_ORANGE, string);
	SendClientMessage(playerid, COLOR_ORANGE, "License Status: {FFFFFF}Passed");
	return 1;
}

CMD:showlicense(playerid, params[])
{
	new string[128], playerb;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /showlicense [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
	if(!PlayerInfo[playerid][pCarLic]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a drivers license.");
	format(string, sizeof(string), "* %s shows %s their drivers license.", RPN(playerid), RPN(playerb));
 	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SendClientMessage(playerb, COLOR_ORANGE, "[San Andreas Department of Motor Vehicles]");
	format(string, sizeof(string), "Name: {FFFFFF}%s", RPN(playerid));
	SendClientMessage(playerb, COLOR_ORANGE, string);
	SendClientMessage(playerb, COLOR_ORANGE, "License Status: {FFFFFF}Passed");
	return 1;
}

CMD:getlic(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!IsPlayerInRangeOfPoint(playerid,2.0,1490.2968,1305.7004,1093.2964)) return SendClientMessage(playerid, COLOR_GREY, "You are not by the DMV desk.");
    if(PlayerInfo[playerid][pCarLic]) return SendClientMessage(playerid, COLOR_GREY, "You already have a drivers license.");
    if(LicenseTest[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You have already started the drivers license test.");
    if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you. ($100)");
	GiveZaiatMoney(playerid, -100);
	LicenseTest[playerid] =1;
	CP[playerid] = 1;
	SendClientMessage(playerid,COLOR_LIGHTBLUE,"* Drivers Center: Get into a car outside to begin the test.");
	return 1;
}

CMD:joinevent(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(Event[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are already in the event.");
	if(!EventOn) return SendClientMessage(playerid, COLOR_GREY, "There's no current event happening.");
	if(EventLocked) return SendClientMessage(playerid, COLOR_GREY, "The event is locked, be faster next time.");
	PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
	PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
	GetPlayerPos(playerid, PlayerInfo[playerid][pX], PlayerInfo[playerid][pY], PlayerInfo[playerid][pZ]);
	GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
	GetPlayerArmour(playerid, PlayerInfo[playerid][pArmor]);
	SetPlayerPos(playerid, ePos[0], ePos[1], ePos[2]);
	SetPlayerInterior(playerid, eInt);
	SetPlayerVirtualWorld(playerid, eVW);
	for(new i=0; i<13; i++)
	{
		GetPlayerWeaponData(playerid, i, PlayerInfo[playerid][pWeapon][i], PlayerInfo[playerid][pWeaponAmmo][i]);
	}
	GunsBeingRemoved[playerid] = 1;
	ResetPlayerWeapons(playerid);
	Event[playerid] = 1;
	SendClientMessage(playerid, COLOR_LIGHTRED, "*** Please wait until the event starts and you will recieve everything set by the organizer ***");
	SendClientMessage(playerid, COLOR_LIGHTRED, "*** Your original health, armor and weapons will be refunded once you leave the event, /quitevent to leave at any time ***");
	return 1;
}

CMD:quitevent(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!EventOn) return SendClientMessage(playerid, COLOR_GREY, "There's no current event happening.");
	if(!Event[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not inside the event.");
	Event[playerid] = 0;
	SetPlayerPos(playerid, PlayerInfo[playerid][pX], PlayerInfo[playerid][pY], PlayerInfo[playerid][pZ]);
	SetPlayerInterior(playerid, PlayerInfo[playerid][pInt]);
	SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pVW]);
	SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
	SetPlayerArmour(playerid, PlayerInfo[playerid][pArmor]);
	SendClientMessage(playerid, COLOR_LIGHTRED, "*** You have quit the event ***");
	GunsBeingRemoved[playerid] = 1;
	ResetPlayerWeapons(playerid);
	GunsBeingRemoved[playerid] = 1;
	for(new w = 0; w < 13; w++)
	{
	    GiveZaiatWeapon(playerid, PlayerInfo[playerid][pWeapon][w], PlayerInfo[playerid][pWeaponAmmo][w]);
	}
	return 1;
}

CMD:helpers(playerid, params[])
{
	new online, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pHelper])
	    {
	        online ++;
	    }
	}
	format(string, sizeof(string), "Online Helpers: %d", online);
	SendClientMessage(playerid, COLOR_ORANGE, string);
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pHelper])
	    {
	        format(string, sizeof(string), "- %s %s (Level %d)", RPHLN(i), RPN(i), PlayerInfo[i][pHelper]);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    }
	}
	return 1;
}

CMD:helperhelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pHelper] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	SendClientMessage(playerid, COLOR_YELLOW, "*1 Helper: {FFFFFF}/h /newbie (unlimited)");
	SendClientMessage(playerid, COLOR_YELLOW, "*2 Helper: {FFFFFF}/nmute /chat /startchat /endchat");
	SendClientMessage(playerid, COLOR_YELLOW, "*3 Helper: {FFFFFF}/goto /goback");
	SendClientMessage(playerid, COLOR_YELLOW, "*4 Helper: {FFFFFF}/firehelper");
	SendClientMessage(playerid, COLOR_YELLOW, "*5 Helper: {FFFFFF}/makehelper");
	return 1;
}

CMD:h(playerid, params[])
{
    new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pHelper] && !PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/h)elperChat [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(PlayerInfo[playerid][pHelper] > PlayerInfo[playerid][pAdmin]) format(string, sizeof(string), "*%s %s: {FFFFFF}%s", RPHLN(playerid), RPN(playerid), params);
    else if(PlayerInfo[playerid][pAdmin] > PlayerInfo[playerid][pHelper])format(string, sizeof(string), "*%s %s: {FFFFFF}%s", RPALN(playerid), RPN(playerid), params);
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i))
		{
			if(PlayerInfo[i][pHelper] || PlayerInfo[i][pAdmin])
			{
		    	SendClientMessage(i, COLOR_CYAN, string);
			}
		}
	}
	// Logs
	if(PlayerInfo[playerid][pHelper] && !PlayerInfo[playerid][pAdmin]) format(string, sizeof(string), "*%s %s: %s", RPHLN(playerid), RPN(playerid), params);
    else if(!PlayerInfo[playerid][pHelper] && PlayerInfo[playerid][pAdmin])format(string, sizeof(string), "*%s %s: %s", RPALN(playerid), RPN(playerid), params);
	Log("logs/helperchat.log", string);
	return 1;
}

CMD:startchat(playerid, params[])
{
	new playerb, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pHelper] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /startchat [playerid]");
	if(!HelpTime[playerb]) return SendClientMessage(playerid, COLOR_GREY, "This player hasn't requested any help.");
	if(Chat[playerid] != -1) return SendClientMessage(playerid, COLOR_GREY, "You are already chatting with someone.");
	if(Chat[playerb] != -1) return SendClientMessage(playerid, COLOR_GREY, "Player is already chatting with someone.");
	Chat[playerid] = playerb;
	Chat[playerb] = playerid;
	format(string, sizeof(string), "* %s %s has started a chat with you, /chat to talk to him.", RPHLN(playerid), RPN(playerid));
	SendClientMessage(playerb, COLOR_GREEN, string);
	format(string, sizeof(string), "* You have started a chat with %s, /chat to talk to him.", RPN(playerb));
	SendClientMessage(playerid, COLOR_GREEN, string);
	return 1;
}

CMD:endchat(playerid, params[])
{
	new string[128];
 	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pHelper] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(Chat[playerid] == -1) return SendClientMessage(playerid, COLOR_GREY, "You are not chatting with someone.");
	new playerb = Chat[playerid];
	Chat[playerid] = -1;
	Chat[playerb] = -1;
	format(string, sizeof(string), "* %s %s has ended the chat with you.", RPHLN(playerid), RPN(playerid));
	SendClientMessage(playerb, COLOR_GREEN, string);
	format(string, sizeof(string), "* You have ended the chat with %s.", RPN(playerb));
	SendClientMessage(playerid, COLOR_GREEN, string);
	return 1;
}

CMD:chat(playerid, params[])
{
	new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(Chat[playerid] == -1) return SendClientMessage(playerid, COLOR_GREY, "You are not chatting with anybody.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /chat [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(PlayerInfo[playerid][pHelper]) format(string, sizeof(string), "* %s %s: {33AA33}%s", RPHLN(playerid), RPN(playerid), params);
	else format(string, sizeof(string), "* Player %s: {33AA33}%s", RPN(playerid), params);
	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	SendClientMessage(Chat[playerid], COLOR_LIGHTRED, string);
	return 1;
}

CMD:speedlimit(playerid, params[])
{
	new string[128], speed;
 	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "i", speed)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /speedlimit [Max MPH]");
	if(speed < 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid MPH speed.");
	Speedlimit[playerid] = speed;
	if(speed == 0) format(string, sizeof(string), " You have turned your speed limit off.", speed);
    else format(string, sizeof(string), " You have set your speed limit to %d MPH, any vehicle you drive will not go past this limit.", speed);
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:locatecar(playerid, params[])
{
	new Float:vx, Float:vy, Float:vz;
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!PlayerInfo[playerid][vModel]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a vehicle.");
    if(PlayerInfo[playerid][pVVeh])
    {
        new carid;
		if(sscanf(params, "i", carid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /locatecar [1-2]");
		if(carid == 1)
		{
			GetVehiclePos(PlayerInfo[playerid][pVeh], vx, vy, vz);
			SetPlayerCheckpoint(playerid, vx, vy, vz, 2);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, " A marker on your GPS showing where your vehicle is has been placed. (Vehicle 1)");
		}
		else if(carid == 2)
		{
			GetVehiclePos(PlayerInfo[playerid][pVVeh], vx, vy, vz);
			SetPlayerCheckpoint(playerid, vx, vy, vz, 2);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, " A marker on your GPS showing where your vehicle is has been placed. (Vehicle 2)");
		}
    }
    else
	{
		GetVehiclePos(PlayerInfo[playerid][pVeh], vx, vy, vz);
		SetPlayerCheckpoint(playerid, vx, vy, vz, 2);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, " A marker on your GPS showing where your vehicle is has been placed.");
	}
	return 1;
}

CMD:buycar(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 545.6661,-1292.2437,17.2422)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the vehicles dealership.");
	if(PlayerInfo[playerid][pVIP] >= 2)
	{
		if(PlayerInfo[playerid][vModel] && PlayerInfo[playerid][vVModel])
		{
			format(string, sizeof(string), "You already own vehicles ID %d and %d.", PlayerInfo[playerid][pVeh], PlayerInfo[playerid][pVVeh]);
			SendClientMessage(playerid, COLOR_GREY, string);
		    return 1;
		}
		else ShowDialog(playerid, 10);
	    return 1;
	}
	if(PlayerInfo[playerid][vModel])
	{
		format(string, sizeof(string), "You already own vehicle ID %d.", PlayerInfo[playerid][pVeh]);
		SendClientMessage(playerid, COLOR_GREY, string);
	    return 1;
	}
	ShowDialog(playerid, 10);
	return 1;
}

CMD:sellcartomarket(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 545.6661,-1292.2437,17.2422)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the vehicles dealership.");
	if(!PlayerInfo[playerid][pVeh] && !PlayerInfo[playerid][pVVeh]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a vehicle.");
	if(GetPlayerVehicleID(playerid) != PlayerInfo[playerid][pVeh] && GetPlayerVehicleID(playerid) != PlayerInfo[playerid][pVVeh]) return SendClientMessage(playerid, COLOR_GREY, "You must be in the vehicle you wish to sell to the dealership.");
	// Start of Payback
	new price;
	// BMX ($600)\nFaggio ($4,000)\nFreeway ($6,000)\nSanchez ($4,000)\nQuad ($6,000)\nPCJ-600 ($20,000)\nFCR-900 ($25,000)
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 481) price = 600;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 462) price = 4000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 463) price = 6000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 468) price = 4000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 471) price = 6000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 461) price = 20000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 521) price = 25000; // End of Bikes
	// Comet ($30,000)\nFeltzer ($26,000)\nStallion ($26,000)\nWindsor ($28,000)\nSentinel ($24,000)\nManana ($22,000)
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 480) price = 30000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 533) price = 26000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 439) price = 26000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 555) price = 28000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 405) price = 80000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 410) price = 22000; // End of Normal Vehicles
	// Huntley ($22,000)\nLandstalker ($24,000)\nSandking ($30,000)
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 579) price = 22000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 400) price = 24000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 495) price = 30000; // End of Off-Road vehicles
	// Sultan ($60,000)\nBanshee ($65,000)\nBuffalo ($70,000)\nBullet ($90,000)\nCheetah ($80,000)\nJester ($70,000)\nTurismo ($110,000)
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560) price = 60000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 429) price = 65000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 402) price = 70000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 541) price = 90000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 415) price = 80000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559) price = 70000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 451) price = 110000; // End of Sport vehicles
	// Blade($25,000)\nBroadway ($35,000)\nRemington ($30,000)\nSavanna ($25,000)\nSlamvan ($27,000)\nTornado ($24,000)\nVoodo ($30,000)
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 536) price = 25000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 575) price = 35000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534) price = 30000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 567) price = 25000;
    else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 535) price = 27000;
    else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 576) price = 24000;
    else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 412) price = 30000;

	GiveZaiatMoney(playerid, (75*price)/100);
	// End of Payback
	if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
	{
		DestroyVehicle(PlayerInfo[playerid][pVeh]);
		PlayerInfo[playerid][pVeh] = 0;
	    PlayerInfo[playerid][vModel] = 0;
		PlayerInfo[playerid][vX] = 0;
		PlayerInfo[playerid][vY] = 0;
		PlayerInfo[playerid][vZ] = 0;
		PlayerInfo[playerid][vA] = 0;
		PlayerInfo[playerid][vC1] = 0;
		PlayerInfo[playerid][vC2] = 0;
		SendClientMessage(playerid, COLOR_GREEN, " You have sold your vehicle to the dealership. (75 percent of the original price was paid back)");
	}
	else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
	{
		DestroyVehicle(PlayerInfo[playerid][pVVeh]);
		PlayerInfo[playerid][pVVeh] = 0;
	    PlayerInfo[playerid][vVModel] = 0;
		PlayerInfo[playerid][vVX] = 0;
		PlayerInfo[playerid][vVY] = 0;
		PlayerInfo[playerid][vVZ] = 0;
		PlayerInfo[playerid][vVA] = 0;
		PlayerInfo[playerid][vVC1] = 0;
		PlayerInfo[playerid][vVC2] = 0;
		SendClientMessage(playerid, COLOR_GREEN, " You have sold your vehicle to the dealership. (75 percent of the original price was paid back)");
	}
	return 1;
}

CMD:slot(playerid, params[])
{
	new string[128];
	format(string, sizeof(string), "Slot: %d", GFVS(GetPlayerVehicleID(playerid)));
	SendClientMessage(playerid, COLOR_GREY, string);
	return 1;
}

CMD:park(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not in a vehicle.");
	// Family Vehicles
	if(IsFamVehicle(GetPlayerVehicleID(playerid)) && Fam[GetPlayerVehicleID(playerid)] == PlayerInfo[playerid][pFam])
	{
	    new idx = PlayerInfo[playerid][pFam], veh = GFVS(GetPlayerVehicleID(playerid));

		GetVehiclePos(GetPlayerVehicleID(playerid), FamInfo[idx][fVehCoX][veh], FamInfo[idx][fVehCoY][veh], FamInfo[idx][fVehCoZ][veh]);
		GetVehicleZAngle(GetPlayerVehicleID(playerid), FamInfo[idx][fVehRot][veh]);
		if(FamInfo[idx][fVehType][veh])
		{
			DestroyVehicle(FamInfo[idx][fVeh][veh]);
		}
		FamInfo[idx][fVeh][veh] = CreateVehicle(FamInfo[idx][fVehType][veh], FamInfo[idx][fVehCoX][veh], FamInfo[idx][fVehCoY][veh], FamInfo[idx][fVehCoZ][veh], FamInfo[idx][fVehRot][veh], FamInfo[idx][fVehCol1][veh], FamInfo[idx][fVehCol2][veh], 1200);
        ChangeVehicleColor(FamInfo[idx][fVeh][veh], FamInfo[idx][fVehCol1][veh], FamInfo[idx][fVehCol2][veh]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have parked your family vehicle, it will always spawn here until you park it somewhere else.");
		return 1;
	}
   	// Owned Vehicles
	if(GetPlayerVehicleID(playerid) != PlayerInfo[playerid][pVeh] && GetPlayerVehicleID(playerid) != PlayerInfo[playerid][pVVeh]) return SendClientMessage(playerid, COLOR_GREY, "You are not in a vehicle you can park.");
	SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have parked your vehicle, it will always spawn here until you park it somewhere else.");
	if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
	{
		for(new i=0; i<14; i++)
		{
		    PlayerInfo[playerid][pVehMod][i] = GetVehicleComponentInSlot(PlayerInfo[playerid][pVeh], i);
		}
		GetVehiclePos(PlayerInfo[playerid][pVeh],PlayerInfo[playerid][vX], PlayerInfo[playerid][vY], PlayerInfo[playerid][vZ]);
		GetVehicleZAngle(PlayerInfo[playerid][pVeh],PlayerInfo[playerid][vA]);
		DestroyVehicle(PlayerInfo[playerid][pVeh]);
		PlayerInfo[playerid][pVeh] = CreateVehicle(PlayerInfo[playerid][vModel], PlayerInfo[playerid][vX], PlayerInfo[playerid][vY], PlayerInfo[playerid][vZ],PlayerInfo[playerid][vA],PlayerInfo[playerid][vC1],PlayerInfo[playerid][vC2],1200);
	    ChangeVehiclePaintjob(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][vPJ]);
		for(new i=0; i<14; i++)
		{
		    AddVehicleComponent(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][pVehMod][i]);
		}
	}
	else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
	{
		for(new i=0; i<14; i++)
		{
		    PlayerInfo[playerid][pVVehMod][i] = GetVehicleComponentInSlot(PlayerInfo[playerid][pVVeh], i);
		}
		GetVehiclePos(PlayerInfo[playerid][pVVeh],PlayerInfo[playerid][vVX], PlayerInfo[playerid][vVY], PlayerInfo[playerid][vVZ]);
		GetVehicleZAngle(PlayerInfo[playerid][pVVeh],PlayerInfo[playerid][vVA]);
		DestroyVehicle(PlayerInfo[playerid][pVVeh]);
		PlayerInfo[playerid][pVVeh] = CreateVehicle(PlayerInfo[playerid][vVModel], PlayerInfo[playerid][vVX], PlayerInfo[playerid][vVY], PlayerInfo[playerid][vVZ],PlayerInfo[playerid][vVA],PlayerInfo[playerid][vVC1],PlayerInfo[playerid][vVC2],1200);
	    ChangeVehiclePaintjob(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][vVPJ]);
		for(new i=0; i<14; i++)
		{
		    AddVehicleComponent(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][pVVehMod][i]);
		}
	}
	return 1;
}

CMD:engine(playerid, params[])
{
    new engine, lights, alarm, doors, bonnet, boot, objective, vehicleid, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You are not driving a vehicle.");
	if(vehicleid == 509 || vehicleid == 481 || vehicleid == 510) return SendClientMessage(playerid, COLOR_GREY, "Bicycles have no engine.");
	vehicleid = GetPlayerVehicleID(playerid);
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(!engine)
	{
	    SetVehicleParamsEx(vehicleid, 1, lights, alarm, doors, bonnet, boot, objective);
	    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
	    {SetVehicleParamsEx(vehicleid, 1, lights, alarm, PlayerInfo[playerid][vLocked], bonnet, boot, objective);}
	    else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
	    {SetVehicleParamsEx(vehicleid, 1, lights, alarm, PlayerInfo[playerid][vVLocked], bonnet, boot, objective);}
	    format(string, sizeof(string), "* %s turns the vehicle's engine on.", RPN(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	else
	{
	    SetVehicleParamsEx(vehicleid, 0, lights, alarm, doors, bonnet, boot, objective);
	    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
	    {SetVehicleParamsEx(vehicleid, 0, lights, alarm, PlayerInfo[playerid][vLocked], bonnet, boot, objective);}
	    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
	    {SetVehicleParamsEx(vehicleid, 0, lights, alarm, PlayerInfo[playerid][vVLocked], bonnet, boot, objective);}
	    format(string, sizeof(string), "* %s turns the vehicle's engine off.", RPN(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	return 1;
}

CMD:tabcheck(playerid, params[])
{
	new string[128], playerb;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /tabcheck[playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    if(Tabbed[playerb])
    {
	    format(string, sizeof(string), "%d) {FFFFFF}%s (Tabbed for %d seconds)", playerb, RPN(playerb), AltTabbed[playerb]);
	    SendClientMessage(playerid, COLOR_ORANGE, string);
    }
    else SendClientMessage(playerid, COLOR_GREY, "Player is not alt-tabbed.");
	return 1;
}

CMD:afkcheck(playerid, params[])
{
	new string[128], playerb;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /tabcheck[playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    if(IsAFK[playerb])
    {
	    format(string, sizeof(string), "%d) {FFFFFF}%s (AFK for %d seconds)", playerb, RPN(playerb), AFK[playerb]);
	    SendClientMessage(playerid, COLOR_ORANGE, string);
    }
    else SendClientMessage(playerid, COLOR_GREY, "Player is not AFK.");
	return 1;
}

CMD:points(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    for(new idx = 0; idx < MAX_POINTS; idx++)
	{
	    format(string, sizeof(string), "%d) %s | Owned by: %s | Profit: $%d | Time Left: %d", idx+1, PointInfo[idx][pName], RFaN(PointInfo[idx][pOwner]), PointInfo[idx][pProfit], PointInfo[idx][pTime]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:familyhelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    SendClientMessage(playerid, COLOR_YELLOW, "FAMILY: {FFFFFF}/f /families");
   	if(PlayerInfo[playerid][pFamRank] >= 5) SendClientMessage(playerid, COLOR_YELLOW, "FAMILY LEADER: {FFFFFF}/capture /frank /finvite /funinvite /famedit /safe");
	return 1;
}


CMD:capture(playerid, params[])
{
	new string[128], done;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pFamRank] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not a family leader.");
	for(new idx = 0; idx < MAX_POINTS; idx++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1, PointInfo[idx][pX], PointInfo[idx][pY], PointInfo[idx][pZ]))
		{
		    if(Capturing) return SendClientMessage(playerid, COLOR_GREY, "Please wait for the point capturing to cool down.");
		    format(string, sizeof(string), " %s is attempting to capture the %s.", RPN(playerid), PointInfo[idx][pName]);
		    SendNearbyMessage(playerid, 30, string, COLOR_ORANGE, COLOR_ORANGE, COLOR_ORANGE, COLOR_ORANGE, COLOR_ORANGE);
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Stay in your position for 10 seconds to make the capture attempt succeed.");
            Capturing = 1;
            GetPlayerPos(playerid, Capture[0], Capture[1], Capture[2]);
            Capturer = playerid;
            CapturerFam = idx;
			SetTimerEx("CapturePoint", 10000, false, "dd", Capturer, CapturerFam);
		    done = 1;
		    break;
		}
    }
    if(!done) SendClientMessage(playerid, COLOR_GREY, "You are not near a capturable point.");
	return 1;
}

CMD:frank(playerid, params[])
{
	new playerb, rank, string[128], idx = PlayerInfo[playerid][pFam];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pFamRank] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not a family leader.");
	if(sscanf(params, "ui", playerb, rank)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /frank [playerid] [rank]");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't change your rank.");
	if(PlayerInfo[playerid][pFamRank] < PlayerInfo[playerb][pFamRank]) return SendClientMessage(playerid, COLOR_GREY, "You can't demote higher ranked members.");
    if(PlayerInfo[playerid][pFamRank] == PlayerInfo[playerb][pFamRank] && strcmp(RPN(playerid), FamInfo[idx][fLeader], false)) return SendClientMessage(playerid, COLOR_GREY, "You can't promote/demote same ranked members.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerb][pFam] != PlayerInfo[playerid][pFam]) return SendClientMessage(playerid, COLOR_GREY, "Player is not in your family.");
	if(rank < 1 || rank > 6) return SendClientMessage(playerid, COLOR_GREY, "Ranks are between 1 and 6.");
	if(PlayerInfo[playerb][pFamRank] == rank) return SendClientMessage(playerid, COLOR_GREY, "Player already has that rank.");
	if(PlayerInfo[playerb][pFamRank] < rank)
	{
	    PlayerInfo[playerb][pFamRank] = rank;
		format(string, sizeof(string), "You have {33AA33}promoted {33CCFF}%s to {33AA33}%s (%d){33CCFF}.", RPN(playerb), RPFaRN(playerb), rank);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "%s has {33AA33}promoted {33CCFF}you to {33AA33}%s (%d){33CCFF}.", RPN(playerid), RPFaRN(playerb), rank);
		SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	}
	else if(PlayerInfo[playerb][pFamRank] > rank)
	{
	    PlayerInfo[playerb][pFamRank] = rank;
		format(string, sizeof(string), "You have {FF9900}demoted {33CCFF}%s to {FF9900}%s (%d){33CCFF}.", RPN(playerb), RPFaRN(playerb), rank);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "%s has {FF9900}demoted {33CCFF}you to {FF9900}%s (%d){33CCFF}.", RPN(playerid), RPFaRN(playerb), rank);
		SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

CMD:families(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	for(new idx=1; idx<MAX_FAMILIES; idx++)
	{
	    format(string, sizeof(string), "%d) Name: %s | Leader: %s | Members: %d | Strikes: %d", idx, FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:safe(playerid, params[])
{
	new amount, string[128], options[32];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pFam]) return SendClientMessage(playerid, COLOR_GREY, "You are not in a family.");
	new idx = PlayerInfo[playerid][pFam];
	if(!IsPlayerInRangeOfPoint(playerid, 3, FamInfo[idx][fSafeX], FamInfo[idx][fSafeY], FamInfo[idx][fSafeZ])) return SendClientMessage(playerid, COLOR_GREY, "You are not near your family safe.");
	if(sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /safe [option]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: deposit | withdraw");
		format(string, sizeof(string), "SAFE: Money: $%d | Materials: %d | Weed: %d | Crack: %d", FamInfo[idx][fMoney], FamInfo[idx][fMats], FamInfo[idx][fWeed], FamInfo[idx][fCrack]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	if(!strcmp(params, "deposit", true, 7))
	{
	    if(sscanf(params, "s[32]s[32]i", params, options, amount))
	    {
	    	SendClientMessage(playerid, COLOR_WHITE, "USAGE: /safe deposit [item] [amount]");
			SendClientMessage(playerid, COLOR_GREY, "ITEMS: money | materials | weed | crack");
			return 1;
	    }
	    if(amount < 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid amount.");
        if(!strcmp(options, "money", true, 5))
    	{
            if(PlayerInfo[playerid][pMoney] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
            FamInfo[idx][fMoney] += amount;
			GiveZaiatMoney(playerid, -amount);
            format(string, sizeof(string), "* %s has deposited $%d in their family safe.", RPN(playerid), amount);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
        }
        else if(!strcmp(options, "materials", true, 9))
		{
            if(PlayerInfo[playerid][pMaterials] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much materials on you.");
            FamInfo[idx][fMats] += amount;
            PlayerInfo[playerid][pMaterials] -= amount;
            format(string, sizeof(string), "* %s has deposited %d grams of materials in their family safe.", RPN(playerid), amount);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
        }
        else if(!strcmp(options, "weed", true, 4))
		{
            if(PlayerInfo[playerid][pWeed] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much weed on you.");
            FamInfo[idx][fWeed] += amount;
            PlayerInfo[playerid][pWeed] -= amount;
            format(string, sizeof(string), "* %s has deposited %d grams of weed in their family safe.", RPN(playerid), amount);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
        }
        else if(!strcmp(options, "crack", true, 5))
        {
            if(PlayerInfo[playerid][pCrack] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much crack on you.");
            FamInfo[idx][fCrack] += amount;
            PlayerInfo[playerid][pCrack] -= amount;
            format(string, sizeof(string), "* %s has deposited %d grams of crack in their family safe.", RPN(playerid), amount);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
        }
        else SendClientMessage(playerid, COLOR_GREY, "Invalid option.");
	}
	else if(!strcmp(params, "withdraw", true, 8))
	{
	    if(PlayerInfo[playerid][pFamRank] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	    if(sscanf(params, "s[32]s[32]i", params, options, amount))
	    {
	    	SendClientMessage(playerid, COLOR_WHITE, "USAGE: /safe withdraw [item] [amount]");
			SendClientMessage(playerid, COLOR_GREY, "ITEMS: money | materials | weed | crack");
			return 1;
	    }
	    if(amount < 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid amount.");
	    if(!strcmp(options, "money", true, 5))
	    {
            if(FamInfo[idx][fMoney] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money in your family safe.");
            FamInfo[idx][fMoney] -= amount;
            GiveZaiatMoney(playerid, amount);
            format(string, sizeof(string), "* %s has withdrawn $%d from their family safe.", RPN(playerid), amount);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		}
		else if(!strcmp(options, "materials", true, 9))
		{
            if(FamInfo[idx][fMats] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much materials in your family safe.");
            FamInfo[idx][fMats] -= amount;
            PlayerInfo[playerid][pMaterials] += amount;
            format(string, sizeof(string), "* %s has withdrawn %d grams of materials from their family safe.", RPN(playerid), amount);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		}
		else if(!strcmp(options, "weed", true, 4))
		{
            if(FamInfo[idx][fWeed] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much weed in your family safe.");
            FamInfo[idx][fWeed] -= amount;
            PlayerInfo[playerid][pWeed] += amount;
            format(string, sizeof(string), "* %s has withdrawn %d grams of weed from their family safe.", RPN(playerid), amount);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		}
        else if(!strcmp(options, "crack", true, 5))
        {
            if(FamInfo[idx][fCrack] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much crack in your family safe.");
            FamInfo[idx][fCrack] -= amount;
            PlayerInfo[playerid][pCrack] += amount;
            format(string, sizeof(string), "* %s has withdrawn %d grams of crack from their family safe.", RPN(playerid), amount);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
        }
        else SendClientMessage(playerid, COLOR_GREY, "Invalid option.");
	}
	else SendClientMessage(playerid, COLOR_GREY, "Invalid option.");
	return 1;
}

CMD:f(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pFam]) return SendClientMessage(playerid, COLOR_GREY, "You are not in a family.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/f)amilychat [text]");
	if(AntiAdv(playerid, params)) return 1;
    format(string, sizeof(string), "** [FAM] (%d) %s %s: %s", PlayerInfo[playerid][pFamRank], RPFaRN(playerid), RPN(playerid), params);
	SendPlayerFamMessage(playerid, COLOR_CYAN, string);
	return 1;
}

CMD:famedit(playerid, params[])
{
	new string[128], option[32], idx;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pFamRank] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	idx = PlayerInfo[playerid][pFam];
	if(sscanf(params, "s[32]", option))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /famedit [option]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: name | rankname | safe | motd");
		return 1;
	}
    if(!strcmp(option, "name", true, 4))
    {
	    if(sscanf(params, "s[32]s[32]", option, params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /famedit name [name]");
		format(FamInfo[idx][fName], 32, "%s", params);
		format(string, sizeof(string), " You have set your family's name to {33AA33}%s", params);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "%s's Safe", FamInfo[idx][fName]);
    	UpdateDynamic3DTextLabelText(FamInfo[idx][fText], COLOR_WHITE, string);
	}
    else if(!strcmp(option, "rankname", true, 8))
    {
        new rank;
    	if(sscanf(params, "s[32]is[32]", option, rank, params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /famedit rankname [rank] [name]");
		if(rank < 0 || rank > 6) return SendClientMessage(playerid, COLOR_GREY, "Family ranks are between 1 and 6.");
		switch(rank)
		{
		    case 1: format(FamInfo[idx][fRank1], 32, "%s", params);
		    case 2: format(FamInfo[idx][fRank2], 32, "%s", params);
		    case 3: format(FamInfo[idx][fRank3], 32, "%s", params);
			case 4: format(FamInfo[idx][fRank4], 32, "%s", params);
			case 5: format(FamInfo[idx][fRank5], 32, "%s", params);
			case 6: format(FamInfo[idx][fRank6], 32, "%s", params);
		}
		format(string, sizeof(string), " You have set your family rank %d's name to {33AA33}%s", rank, params);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    }
   	else if(!strcmp(option, "safe", true, 4))
    {
        new confirm[8];
    	if(PlayerInfo[playerid][pFamRank] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
        if(FamInfo[idx][fSafeX] != 0 && FamInfo[idx][fSafeY] != 0 && FamInfo[idx][fSafeZ] != 0)
		{
		    // SSCANF Check
		    if(sscanf(params, "s[32]s[8]", option, confirm))
		    {
		    	SendClientMessage(playerid, COLOR_WHITE, "USAGE: /famedit safe [confirm]");
		    	SendClientMessage(playerid, COLOR_LIGHTRED, " Changing your family's safe location will cost $50,000.");
		    	return 1;
		    }
		    // Confirm Check
		    if(strcmp(confirm, "confirm", true, 8))
		    {
		    	SendClientMessage(playerid, COLOR_WHITE, "USAGE: /famedit safe [confirm]");
		    	SendClientMessage(playerid, COLOR_LIGHTRED, " Changing your family's safe location will cost $50,000.");
		    	return 1;
		    }
		    // Money Check
		    if(PlayerInfo[playerid][pMoney] < 50000) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you. ($50,000)");
		    GiveZaiatMoney(playerid, -50000);
		}
		GetPlayerPos(playerid,FamInfo[idx][fSafeX], FamInfo[idx][fSafeY], FamInfo[idx][fSafeZ]);
        DestroyDynamicPickup(FamInfo[idx][fPickup]);
	    FamInfo[idx][fPickup] = CreateDynamicPickup(1239, 1, FamInfo[idx][fSafeX], FamInfo[idx][fSafeY], FamInfo[idx][fSafeZ], -1);
		DestroyDynamic3DTextLabel(FamInfo[idx][fText]);
		format(string, sizeof(string), "%s's Safe", FamInfo[idx][fName]);
    	FamInfo[idx][fText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, FamInfo[idx][fSafeX], FamInfo[idx][fSafeY], FamInfo[idx][fSafeZ]+0.3, 15);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have set your family's safe location.");
    }
    else if(!strcmp(option, "motd", true, 4))
    {
		if(sscanf(params, "s[32]s[32]", option, params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /famedit motd [motd]");
		format(FamInfo[idx][fMOTD], 64, "%s", params);
		format(string, sizeof(string), "FAMILY MOTD: {FFFFFF}%s", FamInfo[PlayerInfo[playerid][pFam]][fMOTD]);
   		SendPlayerFamMessage(playerid, COLOR_LIGHTRED, string);
    }
    else SendClientMessage(playerid, COLOR_GREY, "Invalid option.");
	return 1;
}

CMD:updates(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    new string[128];
	SendClientMessage(playerid, COLOR_YELLOW, "______________________________________________");
	format(string, sizeof(string), "Version: %s - Updates by: %s", SERVER_GM_TEXT, SERVER_GM_UPDATER);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	SendClientMessage(playerid, COLOR_WHITE, "* Added: Dynamic gates system settable by admins IG, /gatehelp for general commands.");
	SendClientMessage(playerid, COLOR_WHITE, "* Changed: Tutorial has a new camera movement style.");
	SendClientMessage(playerid, COLOR_WHITE, "* Changed: VIP bonus changed from 5 hours needed to 12 hours.");
	SendClientMessage(playerid, COLOR_YELLOW, "______________________________________________");
	return 1;
}

CMD:id(playerid, params[])
{
	new string[128], playerb;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /id [playerid]");
	if(!IsPlayerLoggedIn(playerb) && !IsPlayerNPC(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	format(string, sizeof(string), " %s - ID: %d", RPN(playerb), playerb);
	SendClientMessage(playerid, COLOR_GREY, string);
	return 1;
}

CMD:changepass(playerid, params[])
{
	new file[32], string[128], password[256];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[64]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /changepass [password]");
	if(strlen(params) > 256) return SendClientMessage(playerid, COLOR_GREY, "Password can't be longer than 256 characters.");
	format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
	WP_Hash(password, sizeof(password), params);
	dini_Set(file, "Password", password);
	format(string, sizeof(string), " You have changed your password to: {FF6347}%s", params);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:search(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[32]", params))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /search  [location]");
	    SendClientMessage(playerid, COLOR_GREY, "LOCATIONS: Off | Bank | TruckerJob | DMV | DrugsHouse | CrackLab | DrugsPickup | MaterialsPickup | MaterialsDropoff | TelecomCompany");
	    SendClientMessage(playerid, COLOR_GREY, "LOCATIONS: Dealership | FuelCompany");

	    return 1;
	}
	if(!strcmp(params, "off", true))
	{
	     DisablePlayerCheckpoint(playerid);
	     SendClientMessage(playerid, COLOR_WHITE, "You have cleared the marker on your map.");
	}
	else if(!strcmp(params, "bank", true))
	{
	     SetPlayerCheckpoint(playerid, 1462.4095,-1011.1602,26.8438, 3);
	     SendClientMessage(playerid, COLOR_WHITE, "The bank is now marked on your map.");
	}
	else if(!strcmp(params,"truckerjob", true))
	{
	    SetPlayerCheckpoint(playerid, 1677.3772,2340.2471,9.8980, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "The trucker job is now marked on your map.");
	}
	else if(!strcmp(params,"dmv", true))
	{
	    SetPlayerCheckpoint(playerid, 2045.6119,-1908.0552,13.5469, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "The dmv is now marked on your map.");
	}
	else if(!strcmp(params,"drugshouse", true))
	{
	    SetPlayerCheckpoint(playerid, 2166.1372,-1671.5070,15.0737, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "The drugs house is now marked on your map.");
	}
	else if(!strcmp(params,"cracklab", true))
	{
	    SetPlayerCheckpoint(playerid, 2351.9863,-1170.1771,28.0509, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "The crack lab is now marked on your map.");
	}
	else if(!strcmp(params,"drugspickup", true))
	{
	    SetPlayerCheckpoint(playerid, 2939.4932,-2051.5911,3.5480, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "The drugs pickup is now marked on your map.");
	}
	else if(!strcmp(params,"materialsdropoff", true))
	{
	    SetPlayerCheckpoint(playerid, 2172.4944,-2264.0750,13.3399, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "The materials dropoff is now marked on your map.");
	}
	else if(!strcmp(params,"materialspickup", true))
	{
	    SetPlayerCheckpoint(playerid, 1423.6010,-1317.9398,13.5547, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "The materials pickup is now marked on your map.");
	}
	else if(!strcmp(params, "TelecomCompany", true))
	{
	    SetPlayerCheckpoint(playerid, 1154.1257,-1180.9600,32.8187, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "The telecom company is now marked on your map.");
	}
	else if(!strcmp(params, "Dealership", true))
	{
	    SetPlayerCheckpoint(playerid, 545.6661,-1292.2437,17.2422, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "The Vehicles Dealership is now marked on your map.");
	}
	else if(!strcmp(params, "FuelCompany", true))
	{
	    SetPlayerCheckpoint(playerid, 246.585403,1410.487182,23.370300, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "The FuelCompany is now marked on your map.");
	}
	return 1;
}

CMD:drop(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[32]", params))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /drop [item]");
		SendClientMessage(playerid, COLOR_GREY, "ITEMS: weapon | weapons | materials | weed | crack | packages | fishes");
	    return 1;
	}
	if(!strcmp(params, "weapons", true, 7))
	{
	    new confirm[8];
		if(sscanf(params, "s[32]s[8]", params, confirm)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /drop weapons [confirm]");
		if(!strcmp(confirm, "confirm", true))
		{
		    format(string, sizeof(string), "* %s throws away all their weapons.", RPN(playerid), RWN(GetPlayerWeapon(playerid)));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			ResetZaiatWeapons(playerid);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
	}
	else if(!strcmp(params, "weapon", true, 6))
	{
    	if(GetPlayerWeapon(playerid) == 0) return SendClientMessage(playerid, COLOR_GREY, "You are not holding a weapon in your hand.");
	    format(string, sizeof(string), "* %s throws away their %s.", RPN(playerid), RWN(GetPlayerWeapon(playerid)));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		RemoveZaiatWeapon(playerid, GetPlayerWeapon(playerid));
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	}
	else if(!strcmp(params, "materials", true, 9))
	{
	    new confirm[8];
		if(sscanf(params, "s[32]s[8]", params, confirm)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /drop materials [confirm]");
		if(!strcmp(confirm, "confirm", true))
		{
		    PlayerInfo[playerid][pMaterials] = 0;
		    format(string, sizeof(string), "* %s has thrown away all their materials.", RPN(playerid), RWN(GetPlayerWeapon(playerid)));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
	}
	else if(!strcmp(params, "weed", true, 4))
	{
	    new confirm[8];
		if(sscanf(params, "s[32]s[8]", params, confirm)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /drop weed [confirm]");
		if(!strcmp(confirm, "confirm", true))
		{
		    PlayerInfo[playerid][pWeed] = 0;
		    format(string, sizeof(string), "* %s has thrown away all their weed.", RPN(playerid), RWN(GetPlayerWeapon(playerid)));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
	}
	else if(!strcmp(params, "crack", true, 5))
	{
	    new confirm[8];
		if(sscanf(params, "s[32]s[8]", params, confirm)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /drop crack [confirm]");
		if(!strcmp(confirm, "confirm", true))
		{
		    PlayerInfo[playerid][pCrack] = 0;
		    format(string, sizeof(string), "* %s has thrown away all their crack.", RPN(playerid), RWN(GetPlayerWeapon(playerid)));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
	}
	else if(!strcmp(params, "packages", true, 8))
	{
	    new confirm[8], veh;
		if(sscanf(params, "s[32]s[8]", params, confirm)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /drop packages [confirm]");
		if(!strcmp(confirm, "confirm", true))
		{
		    PlayerInfo[playerid][pTPackages] = 0;
		    PlayerInfo[playerid][pMPackages] = 0;
		    PlayerInfo[playerid][pDPackages] = 0;
		    veh = PlayerInfo[playerid][pDeliverTruck];
		    PlayerInfo[playerid][pDeliverTruck] = -1;
		    TruckPackages[veh] = -1;
		    format(string, sizeof(string), "* %s has thrown away all their packages.", RPN(playerid), RWN(GetPlayerWeapon(playerid)));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
	}
	else if(!strcmp(params, "fishes", true, 6))
	{
	    new confirm[8];
		if(sscanf(params, "s[32]s[8]", params, confirm)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /drop fishes [confirm]");
		if(!strcmp(confirm, "confirm", true))
		{
		    for(new i=0; i<5; i++)
		    {
		    	PlayerInfo[playerid][pFish][i] = 0;
			}
		    format(string, sizeof(string), "* %s has thrown away all their fishes.", RPN(playerid), RWN(GetPlayerWeapon(playerid)));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
	}
	return 1;
}


CMD:pay(playerid, params[])
{
	new string[128], playerb, amount;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "ui", playerb, amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /pay [playerid] [amount]");
	if(amount <= 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid money amount.");
	if(amount > 2000 && PlayerInfo[playerid][pLevel] < 4) return SendClientMessage(playerid, COLOR_GREY, "You need to be level 4 to give someone more than $2000.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't pay money to yourself.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerid][pLevel] < 2) return SendClientMessage(playerid, COLOR_GREY, "You must be at least level 2 to give someone money.");
	if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
	if(PlayerInfo[playerid][pMoney] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much on you right now.");
	GiveZaiatMoney(playerid, -amount);
	GiveZaiatMoney(playerb, amount);
	format(string, sizeof(string), "* %s takes out their wallet and gives %s some money.", RPN(playerid), RPN(playerb), amount);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), " You have given %s $%d.", RPN(playerb), amount);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has given you $%d.", RPN(playerid), amount);
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "%s has given %s $%d.",RPN(playerid), RPN(playerb), amount);
	Log("logs/pay.log", string);
	return 1;
}

CMD:paycheck(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	format(string, sizeof(string), "* You have played for %d minutes in the past hour.", PlayerInfo[playerid][pMinutes]);
	if(PlayerInfo[playerid][pMinutes] < 40) SendClientMessage(playerid, COLOR_LIGHTRED, string);
	else SendClientMessage(playerid, COLOR_LIME, string);
	format(string, sizeof(string), "* You need to play for at least 40 minutes every hour to recieve a paycheck.");
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:wire(playerid, params[])
{
	new string[128], playerb, amount;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!IsPlayerNearBankBooth(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not near a bank booth.");
	if(sscanf(params, "ui", playerb, amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /wire [playerid] [amount]");
	if(amount <= 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid money amount.");
	if(PlayerInfo[playerid][pLevel] < 4) return SendClientMessage(playerid, COLOR_GREY, "You need to be level 4 to wire someone money.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't wire money to yourself.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerid][pBank] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much in your bank account right now.");
	PlayerInfo[playerid][pBank] -= amount;
	PlayerInfo[playerb][pBank] += amount;
	format(string, sizeof(string), " You have wired $%d to %s, your bank balance is now: $%d.", amount, RPN(playerb), PlayerInfo[playerid][pBank]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "[Bank]: %s has wired you $%d, your bank balance is now: $%d.", RPN(playerid), amount, PlayerInfo[playerb][pBank]);
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "%s has wired %s $%d", RPN(playerid), RPN(playerb), amount);
	Log("logs/pay.log", string);
	return 1;
}

CMD:withdraw(playerid, params[])
{
	new amount, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsPlayerNearBankBooth(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not near a bank booth.");
	if(sscanf(params, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /withdraw [amount]");
	if(amount > PlayerInfo[playerid][pBank]) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money in your bank account.");
	if(amount <= 0)  return SendClientMessage(playerid, COLOR_GREY, "Invalid money amount.");
	PlayerInfo[playerid][pBank] -= amount;
	GiveZaiatMoney(playerid, amount);
	format(string, sizeof(string), " You have withdrawn $%d from your bank account, your bank balance is now: $%d.", amount, PlayerInfo[playerid][pBank]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:deposit(playerid, params[])
{
	new amount, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsPlayerNearBankBooth(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not near a bank booth.");
	if(sscanf(params, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deposit [amount]");
	if(amount > PlayerInfo[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
	if(amount <= 0)  return SendClientMessage(playerid, COLOR_GREY, "Invalid money amount.");
	PlayerInfo[playerid][pBank] += amount;
	GiveZaiatMoney(playerid, -amount);
	format(string, sizeof(string), " You have deposited $%d into your bank account, your bank balance is now: $%d.", amount, PlayerInfo[playerid][pBank]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:serverstats(playerid, params[])
{
	new string[128], housescreated, bizcreated, mapiconscreated;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	SendClientMessage(playerid, COLOR_ORANGE, "- zGaming Roleplay Statistics:");
	for(new idx; idx<MAX_HOUSES; idx++)
	{
	    if(HouseInfo[idx][hLevel]) housescreated++;
	}
	format(string, sizeof(string), " %d Houses Created [MAX_HOUSES = %d]", housescreated, MAX_HOUSES-1);
	SendClientMessage(playerid, COLOR_ORANGE, string);
	for(new idx; idx<MAX_BIZ; idx++)
	{
	    if(BizInfo[idx][bType]) bizcreated++;
	}
	format(string, sizeof(string), " %d Businesses Created [MAX_BIZ = %d]", bizcreated, MAX_BIZ-1);
	SendClientMessage(playerid, COLOR_ORANGE, string);
	for(new idx; idx<MAX_MAPICONS; idx++)
	{
	    if(MapIconInfo[idx][mpType]) mapiconscreated++;
	}
	format(string, sizeof(string), " %d Mapicons Created [MAX_MAPICONS = %d]", mapiconscreated, MAX_MAPICONS);
	SendClientMessage(playerid, COLOR_ORANGE, string);
	format(string, sizeof(string), " %d Advertisements Queued [MAX_ADS = %d]", AdQueue, MAX_ADS);
	SendClientMessage(playerid, COLOR_ORANGE, string);
	return 1;
}

CMD:reportbug(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /reportbug [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(strlen(params) > 128) return SendClientMessage(playerid, COLOR_GREY, "Maximum characters limit is 128.");
	new File: file = fopen("bugs.cfg", io_append), string[128];
	format(string, sizeof(string), "[%s] %s\r\n", RPN(playerid), params);
	fwrite(file, string);
	fclose(file);
	SendClientMessage(playerid, COLOR_ORANGE, "Your bug report has been saved, scripters will check it once possible.");
	format(string, sizeof(string), "AdmWarn: %s has reported a bug, /bugs to view it. (Inform Zaiat about it ASAP)", RPN(playerid));
	SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}


CMD:factionhelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pFac]) return SendClientMessage(playerid, COLOR_GREY, "You are not in a faction.");
	// SAPD
	if(IsACop(playerid)) SendClientMessage(playerid, COLOR_YELLOW, "SAPD: {FFFFFF}/r /d /m /tazer /cuff /uncuff /detain /track /door /gate /locker /showbadge /frisk /createspike /removespike /removespikes");
	if(IsACop(playerid)) SendClientMessage(playerid, COLOR_YELLOW, "SAPD: {FFFFFF}/checkload /siren /ticket /wanted /mdc /drag /su /arrest /members /quitfaction");
	if(PlayerInfo[playerid][pFacDivLeader]) SendClientMessage(playerid, COLOR_YELLOW, "SAPD DIVISION LEADER: {FFFFFF}/dinvite /duninvite");
	if(IsACop(playerid) && PlayerInfo[playerid][pFacLeader]) SendClientMessage(playerid, COLOR_YELLOW, "SAPD FACTION LEADER: {FFFFFF}/gov /invite /uninvite /setrank /adjustrankname /setdivision /adjustdivisionname");
	// Government
	if(IsAGov(playerid)) SendClientMessage(playerid, COLOR_YELLOW, "GOV: {FFFFFF}/r /d /showbadge");
	if(IsAGov(playerid) && PlayerInfo[playerid][pFacLeader]) SendClientMessage(playerid, COLOR_YELLOW, "GOV FACTION LEADER: {FFFFFF}/settax /taxvault /taxwithdraw /gov /invite /uninvite /setrank /adjustrankname");
	// Hitman Agency
	if(IsAHitman(playerid)) SendClientMessage(playerid, COLOR_YELLOW, "HA: {FFFFFF}/ha /contracts /profile /track /order /givehit /hitmansms");
	if(IsAHitman(playerid) && PlayerInfo[playerid][pFacLeader]) SendClientMessage(playerid, COLOR_YELLOW, "HA FACTION LEADER: {FFFFFF}/invite /uninvite /setrank /adjustrankname");
	// News Agency
	if(IsAReporter(playerid)) SendClientMessage(playerid, COLOR_YELLOW, "NA: {FFFFFF}/na /news /live");
	if(IsAReporter(playerid) && PlayerInfo[playerid][pFacLeader]) SendClientMessage(playerid, COLOR_YELLOW, "NA FACTION LEADER: {FFFFFF}/invite /uninvite /setrank /adjustrankname /newsvault /vaultwithdraw");
	return 1;
}

CMD:createspike(playerid, params[])
{
	new string[128], Float:Pos[4];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an SAPD Oficer.");
   	if(!PlayerInfo[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
	if(PlayerInfo[playerid][pFacRank] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command. (Rank 4+)");
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
    GetPlayerFacingAngle(playerid,Pos[3]);
 	CreateStrip(Pos[0], Pos[1], Pos[2],Pos[3]);
 	format(string, sizeof(string), "SAPD: %s has created a spike strip.", RPN(playerid));
 	SendCopMessage(COLOR_BLUE, string);
	return 1;
}

CMD:removespike(playerid, params[])
{
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an SAPD Oficer.");
	if(PlayerInfo[playerid][pFacRank] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command. (Rank 4+)");
	DeleteClosestStrip(playerid);
	return 1;
}

CMD:removespikes(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an SAPD Oficer.");
	if(PlayerInfo[playerid][pFacRank] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command. (Rank 4+)");
	DeleteAllStrip();
 	format(string, sizeof(string), "SAPD: %s has removed all spike strips deployed by the SAPD.", RPN(playerid));
 	SendCopMessage(COLOR_BLUE, string);
	return 1;
}

CMD:siren(playerid, params[])
{
	new veh, type[8], string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an SAPD Oficer.");
   	if(!PlayerInfo[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
   	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You are not driving a vehicle.");
	if(sscanf(params, "s[8]", type))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /siren [position]");
		SendClientMessage(playerid, COLOR_WHITE, "POSITIONS: inside | roof | off");
		return 1;
	}
	if(Siren[veh]) return SendClientMessage(playerid, COLOR_GREY, "This vehicle already has a siren attached.");
	veh = GetPlayerVehicleID(playerid);
	if(!strcmp(type, "inside"))
	{
		if(Siren[veh]) return SendClientMessage(playerid, COLOR_GREY, "There is already a siren attached to this vehicle.");
        Siren[veh] = 1;
        SirenObject[veh] = CreateDynamicObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
        AttachDynamicObjectToVehicle(SirenObject[veh],veh, 0.0, 0.75, 0.275, 0.0, 0.1, 0.0);
        format(string, sizeof(string), "* %s attaches a siren to the dashboard.", RPN(playerid));
        SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
        return 1;
	}
	else if(!strcmp(type, "roof"))
	{
	    if(Siren[veh]) return SendClientMessage(playerid, COLOR_GREY, "There is already a siren attached to this vehicle.");
		Siren[veh] = 2;
        SirenObject[veh] = CreateDynamicObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
        AttachDynamicObjectToVehicle(SirenObject[veh], veh, -0.43, 0.0, 0.785, 0.0, 0.1, 0.0);
        format(string, sizeof(string), "* %s attaches a siren to the vehicle's roof.", RPN(playerid));
        SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
        return 1;
	}
	else if(!strcmp(type, "off"))
	{
	    if(!Siren[veh]) return SendClientMessage(playerid, COLOR_GREY, "There is no siren attached to this vehicle.");
		Siren[veh] = 0;
		DestroyDynamicObject(SirenObject[veh]);
		format(string, sizeof(string), "* %s takes the siren back down.", RPN(playerid));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		return 1;
	}
	return 1;
}

CMD:checkload(playerid, params[])
{
	new veh, string[128], playerb;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an SAPD Oficer.");
	if(sscanf(params, "i", veh)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: /checkload [vehicleid]");
	if(veh == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_GREY, "Invalid vehicle id.");
	if(!IsPlayerNearVehicle(playerid, veh, 4)) return SendClientMessage(playerid, COLOR_GREY, "You are not near this vehicle.");
    if(!IsTruckerVehicle(veh)) return SendClientMessage(playerid, COLOR_GREY, "This is not a trucking vehicle.");
    if(TruckPackages[veh] == -1) return SendClientMessage(playerid, COLOR_GREY, "This truck has no packages inside it.");
    playerb = TruckPackages[veh];
	format(string, sizeof(string), "* %s checks the truck's load and capacity.", RPN(playerid));
 	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	if(PlayerInfo[playerb][pTPackages] == 1) SendClientMessage(playerid, COLOR_LIME, " This truck is not overloaded with packages.");
	else if(PlayerInfo[playerb][pTPackages] == 2) SendClientMessage(playerid, COLOR_LIGHTRED, " This truck is overloaded with packages.");
	return 1;
}

CMD:drag(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: /drag [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't drag yourself.");
	if(Drag[playerid] != -1 || Dragged[playerid] != -1) return SendClientMessage(playerid, COLOR_GREY, "You can't do that at the moment.");
    if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
	if(IsPlayerInAnyVehicle(playerb)) return SendClientMessage(playerid, COLOR_GREY, "You can't drag someone from a vehicle.");
	if(!Cuffed[playerb] && !Tied[playerb]) return SendClientMessage(playerid, COLOR_GREY, "Player is not cuffed nor tied.");
	if(Dragged[playerb] != -1) return SendClientMessage(playerid, COLOR_GREY, "Player is already being dragged.");
	Drag[playerid] = playerb;
	Dragged[playerb] = playerid;
	format(string, sizeof(string), "* %s pulls %s and starts draggin them.", RPN(playerid), RPN(playerb));
 	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:stopdrag(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(Drag[playerid] == -1) return SendClientMessage(playerid, COLOR_GREY, "You are not dragging anybody.");
	playerb = Drag[playerid];
	Drag[playerid] = -1;
	Dragged[playerb] = -1;
	format(string, sizeof(string), "* %s released %s and stops draggin them.", RPN(playerid), RPN(playerb));
 	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:hitmansms(playerid, params[])
{
    if(IsAHitman(playerid))
	{
	    new string[128];
		if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
		if(!PlayerInfo[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not a hitmen faction leader.");
		if(sscanf(params, "s[64]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hitmansms [text]");
		if(AntiAdv(playerid, params)) return 1;
		if(strlen(params) > 64) return SendClientMessage(playerid, COLOR_GREY, "You may only use 64 characters per SMS.");
       	foreach(Player, i)
		{
		    if(IsPlayerLoggedIn(i))
		    {
		        format(string, sizeof(string), "* %s's cellphone beeps once.", RPN(i));
				SendNearbyMessage(i, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        format(string, sizeof(string), "[SMS FROM] UNKNOWN: %s, (Ph: BLOCKED)", params);
		        SendClientMessage(i, COLOR_YELLOW, string);
		        PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
	        }
		}
		format(string, sizeof(string), "[%s]: %s", RPN(playerid), params);
		Log("logs/hitmansms.log", string);
	}
	return 1;
}

CMD:contract(playerid, params[])
{
	new string[128], playerb, amount;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "ui", playerb, amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /contract [playerid] [amount]");
	if(IsAHitman(playerid)) return SendClientMessage(playerid, COLOR_GREY, "No... just no motherfucker!");
	if(PlayerInfo[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_GREY, "You mus be at least level 3 to make a contract on someone.");
	if(amount < 3000 || amount > 50000) return SendClientMessage(playerid, COLOR_GREY, "Contracts are between $3000 and $50,000.");
	if(PlayerInfo[playerid][pMoney] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much on you at the moment.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't contract yourself.");
	if(PlayerInfo[playerb][pLevel] < 3) return SendClientMessage(playerid, COLOR_GREY, "You can't contract people under level 3.");
	if(!strcmp(RPN(playerid), PlayerInfo[playerb][pContractBy], false)) return SendClientMessage(playerid, COLOR_GREY, "You have already placed a contract on this player.");
	if(PlayerInfo[playerb][pContract] >= 150000) return SendClientMessage(playerid, COLOR_GREY, "Player has the maximum contract amount on his head already.");
	PlayerInfo[playerb][pContract] += amount;
	format(PlayerInfo[playerb][pContractBy], 32, "%s", RPN(playerid));
	GiveZaiatMoney(playerid, -amount);
	format(string, sizeof(string), "HitmanWarn: %s has placed a contract on %s for $%d.", RPN(playerid), RPN(playerb), amount);
	SendHitmanMessage(COLOR_YELLOW, string);
	SendAdminMessage(COLOR_DARKRED, 3, string);
	Log("logs/contract.log", string);
	return 1;
}

CMD:order(playerid, params[])
{
	if(IsAHitman(playerid))
	{
	   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
		if(!IsPlayerInRangeOfPoint(playerid, 2, 2233.4729,-1333.2303,23.9815) && !IsPlayerInRangeOfPoint(playerid, 2, 1628.7523,-1903.4075,13.5532)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the Hitman Agency HQ.");
		if(sscanf(params, "s[32]", params))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /order [item]");
			SendClientMessage(playerid, COLOR_GREY, "ITEMS: Knife ($100) | Shotgun ($200) | Deagle ($2000) | MP5 ($500)");
			SendClientMessage(playerid, COLOR_GREY, "ITEMS: M4 ($4500) | Spas12 ($6500) | Sniper ($7000) | Scope ($5000)");
		    return 1;
		}
		if(!strcmp(params, "knife", true))
		{
		    if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		    GiveZaiatWeapon(playerid, 4, 1);
		    GiveZaiatMoney(playerid, -100);
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased a Knife.");
		}
		else if(!strcmp(params, "deagle", true))
		{
		    if(PlayerInfo[playerid][pMoney] < 2000) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		    GiveZaiatWeapon(playerid, 24, 500);
		    GiveZaiatMoney(playerid, -2000);
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased a Desert Eagle.");
		}
		else if(!strcmp(params, "shotgun", true))
		{
		    if(PlayerInfo[playerid][pMoney] < 200) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		    GiveZaiatWeapon(playerid, 25, 500);
		    GiveZaiatMoney(playerid, -200);
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased a Shotgun.");
		}
		else if(!strcmp(params, "mp5", true))
		{
		    if(PlayerInfo[playerid][pMoney] < 500) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		    GiveZaiatWeapon(playerid, 29, 500);
		    GiveZaiatMoney(playerid, -500);
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased a MP5.");
		}
		else if(!strcmp(params, "m4", true))
		{
		    if(PlayerInfo[playerid][pMoney] < 4500) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		    GiveZaiatWeapon(playerid, 31, 500);
		    GiveZaiatMoney(playerid, -4500);
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased an M4.");
		}
		else if(!strcmp(params, "spas12", true))
		{
		    if(PlayerInfo[playerid][pMoney] < 6500) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		    GiveZaiatWeapon(playerid, 27, 200);
		    GiveZaiatMoney(playerid, -6500);
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased a SPAS12.");
		}
		else if(!strcmp(params, "sniper", true))
		{
		    if(PlayerInfo[playerid][pMoney] < 7000) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		    GiveZaiatWeapon(playerid, 34, 200);
		    GiveZaiatMoney(playerid, -7000);
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased a Sniper.");
		}
		else if(!strcmp(params, "scope", true))
		{
	 		if(PlayerInfo[playerid][pMoney] < 5000) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
			GiveZaiatMoney(playerid, -5000);
			PlayerInfo[playerid][pScope] ++;
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased a Scope.");
		}
	}
	return 1;
}

CMD:profile(playerid, params[])
{
	if(IsAHitman(playerid))
	{
	    new string[128], playerb, gender[8];
	   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
		if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /profile [playerid]");
		if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
		if(PlayerInfo[playerb][pGender] == 1) format(gender, sizeof(gender), "Male");
		else if(PlayerInfo[playerb][pGender] == 2) format(gender, sizeof(gender), "Female");
	    SendClientMessage(playerid, COLOR_ORANGE, "[Hitman Agency Profiles Database]:");
	    format(string, sizeof(string), "Name: {FFFFFF}%s", RPN(playerb));
	    SendClientMessage(playerid, COLOR_ORANGE, string);
	    format(string, sizeof(string), "Age: {FFFFFF}%d", PlayerInfo[playerb][pAge]);
	    SendClientMessage(playerid, COLOR_ORANGE, string);
	    format(string, sizeof(string), "Gender: {FFFFFF}%s", gender);
	    SendClientMessage(playerid, COLOR_ORANGE, string);
	    format(string, sizeof(string), "Faction: {FFFFFF}%s", RPFNEx(playerb));
	    SendClientMessage(playerid, COLOR_ORANGE, string);
	    format(string, sizeof(string), "Rank: {FFFFFF}%s (%d)", RPFRN(playerb), PlayerInfo[playerb][pFacRank]);
	    SendClientMessage(playerid, COLOR_ORANGE, string);
	    format(string, sizeof(string), "Family: {FFFFFF}%s", RPFaN(playerb));
	    SendClientMessage(playerid, COLOR_ORANGE, string);
	    format(string, sizeof(string), "Rank: {FFFFFF}%s (%d)", RPFaRN(playerb), PlayerInfo[playerb][pFamRank]);
	    SendClientMessage(playerid, COLOR_ORANGE, string);
	}
	return 1;
}

CMD:contracts(playerid, params[])
{
	if(IsAHitman(playerid) || PlayerInfo[playerid][pAdmin] >= 5)
	{
		new string[128];
	   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	    SendClientMessage(playerid, COLOR_ORANGE, "[Hitman Agency Contracts List]:");
	    foreach(Player, i)
	    {
	        if(IsPlayerLoggedIn(i))
	        {
	            if(PlayerInfo[i][pContract])
	            {
	                format(string, sizeof(string), "{FF9900}%d) {FFFFFF}%s {FF9900}| Amount: {FFFFFF}%d {FF9900}| By: {FFFFFF}%s", i, RPN(i), PlayerInfo[i][pContract], PlayerInfo[i][pContractBy]);
	                SendClientMessage(playerid, COLOR_WHITE, string);
	            }
	        }
	    }
	}
	return 1;
}

CMD:ha(playerid, params[])
{
	if(IsAHitman(playerid))
	{
		new string[128];
   		if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	    if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /ha [text]");
	    if(AntiAdv(playerid, params)) return 1;
	    format(string, sizeof(string), "** [HA] (%d) %s %s: %s", PlayerInfo[playerid][pFacRank], RPFRN(playerid), RPN(playerid), params);
		SendPlayerFactionMessage(playerid, 0, COLOR_LIGHTGREEN, string);
		Log("logs/HA.log", string);
	}
	return 1;
}

CMD:givehit(playerid, params[])
{
	if(IsAHitman(playerid))
	{
		new string[128], playerb, hitman;
   		if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	    if(sscanf(params, "uu", hitman, playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /givehit [hitmanid] [contractid]");
		if(!PlayerInfo[playerb][pContract]) return SendClientMessage(playerid, COLOR_GREY, "Invalid contract id.");
		if(!IsAHitman(hitman)) return SendClientMessage(playerid, COLOR_GREY, "Player is not a hitman.");
		if(Hitman[hitman] != -1) return SendClientMessage(playerid, COLOR_GREY, "Hitman is already assigned to a contract.");
		Hitman[hitman] = playerb;
		format(string, sizeof(string), "HitmanWarn: %s has assigned %s to the contract on %s's head.", RPN(playerid), RPN(hitman), RPN(playerb));
		SendHitmanMessage(COLOR_YELLOW, string);
		SendClientMessage(playerid, COLOR_WHITE, " You can cancel the contract using '/cancel contract)'.");
	}
	return 1;
}

CMD:taxvault(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsAGov(playerid) || !PlayerInfo[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	//if(!IsPlayerNearBankBooth(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not near a bank booth.");
    if(GetPlayerVirtualWorld(playerid) != 27934) return SendClientMessage(playerid, COLOR_GREY, "You are not inside the Tax Vault.");
	format(string, sizeof(string), "[Bank Statement]: The state's tax vault contains $%d.", TaxMoney);
	SendClientMessage(playerid, COLOR_DARKRED, string);
	return 1;
}

CMD:taxwithdraw(playerid, params[])
{
	new amount, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsAGov(playerid) || !PlayerInfo[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	//if(!IsPlayerNearBankBooth(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not near a bank booth.");
	if(GetPlayerVirtualWorld(playerid) != 27934) return SendClientMessage(playerid, COLOR_GREY, "You are not inside the Tax Vault.");
	if(sscanf(params, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /withdraw [amount]");
	if(amount > TaxMoney) return SendClientMessage(playerid, COLOR_GREY, "The tax vault doesn't have that much money inside it.");
	if(amount <= 0)  return SendClientMessage(playerid, COLOR_GREY, "Invalid money amount.");
	TaxMoney -= amount;
	GiveZaiatMoney(playerid, amount);
	format(string, sizeof(string), "[Bank Warning]: %s has withdrawn $%d from the tax vault, amount left: $%d.", RPN(playerid), amount, TaxMoney);
	SendPlayerFactionMessage(playerid, 0, COLOR_DARKRED, string);
	format(string, sizeof(string), "AdmWarn: %s has withdrawn $%d from the tax vault, amount left: $%d.", RPN(playerid), amount, TaxMoney);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/taxvault.log", string);
	return 1;
}

CMD:settax(playerid, params[])
{
	new string[128], percent;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsAGov(playerid) || !PlayerInfo[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "i", percent)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /settax [percent]");
	if(percent < 0 || percent > 100) return SendClientMessage(playerid, COLOR_GREY, "Percent is between 0 and 100.");
	TempTaxPercent = percent;
	TaxRequester = playerid;
	SendClientMessage(playerid, COLOR_LIGHTBLUE, " Your tax percent change request has been sent to online admins, wait for them to approve/deny.");
	format(string, sizeof(string), "AdmWarn: %s has requested to change the tax percent to %d. (/approve) (/deny)", RPN(playerid), percent);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:m(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an SAPD Oficer.");
	if(!PlayerInfo[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/m)egaphone [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(!IsLeoVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_GREY, "You must be in an SAPD vehicle to use the megaphone.");
    format(string, sizeof(string), "[%s:o< %s]", RPN(playerid), params);
	SendNearbyMessage(playerid, 40, string, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);
	return 1;
}


CMD:su(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an SAPD Oficer.");
	if(!PlayerInfo[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
	if(sscanf(params, "us[64]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /su [playerid] [charge]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    if(IsACop(playerb)) return SendClientMessage(playerid, COLOR_GREY, "You can't charge an SAPD Officer.");
	if(PlayerInfo[playerb][pWanted] >= 6) return SendClientMessage(playerid, COLOR_GREY, "Player has the maximum wanted level possible.");
	AddZaiatWantedLevel(playerb, params);
	PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
	PlayerPlaySound(playerb,1054,0.0,0.0,0.0);
	format(string, sizeof(string), " You have commited a Crime ( %s ). Reporter: %s.", params, RPN(playerid));
	SendClientMessage(playerb, COLOR_LIGHTRED, string);
	format(string, sizeof(string), "SAPD: %s has charged %s for '%s'.", RPN(playerid), RPN(playerb), params);
	foreach(Player, i)
	{
	    if(IsACop(i))
	    {
	        SendClientMessage(i, COLOR_BLUE, string);
	        PlayCrimeReportForPlayer(i, playerb, 19);
	    }
	}
	return 1;
}


CMD:ticket(playerid, params[])
{
	new string[128], playerb, amount;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an SAPD Oficer.");
	if(!PlayerInfo[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
	if(sscanf(params, "uis[32]", playerb, amount, params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /ticket [playerid] [amount] [reason]");
    if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(amount < 0 || amount > 500) return SendClientMessage(playerid, COLOR_GREY, "Tickets are between $0 and $500.");
    if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
	TicketBy[playerb] = playerid;
	TicketPrice[playerid][playerb] = amount;
	format(string, sizeof(string), "* %s takes out a pen and tickets book, writes down a ticket then hands it to %s.", RPN(playerid), RPN(playerb));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), " You have given %s a ticket for $%d, reason: %s", RPN(playerb), amount, params);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has given you a ticket for $%d, reason: %s", RPN(playerid), amount, params);
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	SendClientMessage(playerb, COLOR_WHITE, "(/accept ticket) to pay the ticket.");
	return 1;
}

CMD:wanted(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid) && PlayerInfo[playerid][pJob] != JOB_LAWYER && PlayerInfo[playerid][pVIPJob] != JOB_LAWYER) return SendClientMessage(playerid, COLOR_GREY, "You are not an SAPD Oficer nor a Lawyer.");
	SendClientMessage(playerid, COLOR_ORANGE, "[SAPD Wanted List]:");
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pWanted])
	    {
	        format(string, sizeof(string), "%d) %s | Wanted Level: %d", i, RPN(i), PlayerInfo[i][pWanted]);
	        SendClientMessage(playerid, COLOR_ORANGE, string);
	    }
	}
	return 1;
}

CMD:mdc(playerid, params[])
{
	new playerb, string[128], gender[8];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an SAPD Oficer.");
	if(!PlayerInfo[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /mdc [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pWanted]) return SendClientMessage(playerid, COLOR_GREY, "Player is not wanted.");
	// Gender
	if(PlayerInfo[playerb][pGender] == 1) format(gender, sizeof(gender), "Male");
	else if(PlayerInfo[playerb][pGender] == 2) format(gender, sizeof(gender), "Female");
	//
	SendClientMessage(playerid, COLOR_ORANGE, "[SAPD Mobile Data Computer]:");
	format(string, sizeof(string), "{FF9900}Name: {FFFFFF}%s {FF9900}| Gender: {FFFFFF}%s {FF9900}| Age: {FFFFFF}%d {FF9900}| Wanted Level: {FFFFFF}%d", RPN(playerb), gender, PlayerInfo[playerb][pAge], PlayerInfo[playerb][pWanted]);
	SendClientMessage(playerid, COLOR_ORANGE, string);
	if(PlayerInfo[playerb][pWanted] >= 1){format(string, sizeof(string), "{FF9900}Crime 1: {FFFFFF}%s", PlayerInfo[playerb][pWanted1]); SendClientMessage(playerid, COLOR_ORANGE, string);}
	if(PlayerInfo[playerb][pWanted] >= 2){format(string, sizeof(string), "{FF9900}Crime 2: {FFFFFF}%s", PlayerInfo[playerb][pWanted2]); SendClientMessage(playerid, COLOR_ORANGE, string);}
	if(PlayerInfo[playerb][pWanted] >= 3){format(string, sizeof(string), "{FF9900}Crime 3: {FFFFFF}%s", PlayerInfo[playerb][pWanted3]); SendClientMessage(playerid, COLOR_ORANGE, string);}
	if(PlayerInfo[playerb][pWanted] >= 4){format(string, sizeof(string), "{FF9900}Crime 4: {FFFFFF}%s", PlayerInfo[playerb][pWanted4]); SendClientMessage(playerid, COLOR_ORANGE, string);}
	if(PlayerInfo[playerb][pWanted] >= 5){format(string, sizeof(string), "{FF9900}Crime 5: {FFFFFF}%s", PlayerInfo[playerb][pWanted5]); SendClientMessage(playerid, COLOR_ORANGE, string);}
	if(PlayerInfo[playerb][pWanted] >= 6){format(string, sizeof(string), "{FF9900}Crime 6: {FFFFFF}%s", PlayerInfo[playerb][pWanted6]); SendClientMessage(playerid, COLOR_ORANGE, string);}
	return 1;
}

CMD:arrest(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an SAPD Oficer.");
	if(!PlayerInfo[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, ap[0], ap[1], ap[2])) return SendClientMessage(playerid, COLOR_GREY, "You are not near the arrest point.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /arrest [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pWanted]) return SendClientMessage(playerid, COLOR_GREY, "Player is not wanted.");
	if(IsACop(playerb)) return SendClientMessage(playerid, COLOR_GREY, "You can't arrest an SAPD Officer.");
	if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
	format(string, sizeof(string), "SAPD: %s has been arrested by %s.", RPN(playerb), RPN(playerid));
	foreach(Player, i)
	{
	    if(IsACop(i))
	    {
	        SendClientMessage(i, COLOR_BLUE, string);
	    }
	}
	SetPlayerColor(playerb, TRANSPARENT_PURPLE);
	PlayerInfo[playerb][pArrested] ++;
	PlayerInfo[playerb][pPrison] = 1;
	PlayerInfo[playerb][pPrisonTime] = PlayerInfo[playerb][pWanted]*300;
	if(PlayerInfo[playerb][pVIP] >= 2) PlayerInfo[playerb][pPrisonTime] = PlayerInfo[playerb][pPrisonTime]/2;
	ClearZaiatWantedLevels(playerb);
	SetPlayerInterior(playerb, 1);
	new RandomCell = random(sizeof(RandomPrison));
	SetPlayerFacingAngle(playerb, RandomPrison[RandomCell][3]);
	TogglePlayerControllable(playerb, 0);
	SetTimerEx("EnterExitTimer", 5000, false, "i", playerb);
 	SetPlayerPos(playerb, RandomPrison[RandomCell][0], RandomPrison[RandomCell][1], RandomPrison[RandomCell][2]);
 	SetCameraBehindPlayer(playerb);
	format(string, sizeof(string), " You have been arrested by an officer for %d minutes (%d seconds)", PlayerInfo[playerb][pPrisonTime]/60, PlayerInfo[playerb][pPrisonTime]);
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	RemovePlayerAttachedObject(playerb, 0);
	SetPlayerSpecialAction(playerb, SPECIAL_ACTION_NONE);
	// Clearing robbery
 	if(BankRobber[playerb])
    {
	    new Rob = BankRobber[playerb]-1;
	    DisablePlayerCheckpoint(playerb);
		BankRobbersCount --;
		format(BankRobbers[Rob], MAX_PLAYER_NAME, "");
		DeliverMoney[playerb] = 0;
		//
		foreach(Player, i)
		{
		    if(BankRobber[i] || PlayerInfo[i][pFac] == 1)
		    {
				if(Rob == 0) TextDrawHideForPlayer(i, Textdraw1);
				else if(Rob == 1) TextDrawHideForPlayer(i, Textdraw2);
				else if(Rob == 2) TextDrawHideForPlayer(i, Textdraw3);
				else if(Rob == 3) TextDrawHideForPlayer(i, Textdraw4);
				else if(Rob == 4) TextDrawHideForPlayer(i, Textdraw5);
			}
		}
		format(string, sizeof(string), "** %s has been arrested and has failed the robbery. **", RPN(playerb));
		SendRobberyMessage(COLOR_LIGHTRED, string);
		SendCopMessage(COLOR_LIGHTRED, string);
		BankRobber[playerb] = 0;
		if(BankRobbersCount == 0)
		{
			TextDrawHideForAll(Textdraw0);
			TextDrawHideForAll(Textdraw1);
			TextDrawHideForAll(Textdraw2);
			TextDrawHideForAll(Textdraw3);
			TextDrawHideForAll(Textdraw4);
			TextDrawHideForAll(Textdraw5);
			BankRobbery = 0;
			RobberyStarted = 0;
			format(string, sizeof(string), "** The bank robbery has ended, $%d were stolen and $%d were saved. **", TotalStolen*10000, (TotalRobbers*10000-(TotalStolen*10000)));
			SendClientMessageToAll(COLOR_YELLOW, string);
			TotalRobbers = 0;
			new copsonline;
			foreach(Player, i)
			{
			    if(IsACop(i)) copsonline++;
			}
			foreach(Player, i)
			{
			    if(IsACop(i))
			    {
					new Saved = (TotalRobbers*10000-(TotalStolen*10000));
					GiveZaiatMoney(i, Saved/copsonline);
					format(string, sizeof(string), "** You have received your cut from the saved money. ($%d)", Saved/copsonline);
					SendClientMessage(i, COLOR_LIME, string);
			    }
			}
		}
    }
	return 1;
}

CMD:jobhelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	SendClientMessage(playerid, COLOR_YELLOW, "JOB: {FFFFFF} /skill /join /quitjob");
	if(PlayerInfo[playerid][pJob] == JOB_MECHANIC && PlayerInfo[playerid][pVIPJob] == JOB_MECHANIC) SendClientMessage(playerid, COLOR_YELLOW, "MECHANIC: {FFFFFF}/mech");
	if(PlayerInfo[playerid][pJob] == JOB_LAWYER || PlayerInfo[playerid][pVIPJob] == JOB_LAWYER) SendClientMessage(playerid, COLOR_YELLOW, "TRUCKER: {FFFFFF}/free /defend /wanted");
	if(PlayerInfo[playerid][pJob] == JOB_TRUCKER || PlayerInfo[playerid][pVIPJob] == JOB_TRUCKER) SendClientMessage(playerid, COLOR_YELLOW, "TRUCKER: {FFFFFF}/loadpackages /deliverpackages");
	if(PlayerInfo[playerid][pJob] == JOB_WDEALER || PlayerInfo[playerid][pVIPJob] == JOB_WDEALER) SendClientMessage(playerid, COLOR_YELLOW, "WEAPONS DEALER: {FFFFFF}/sellgun /sellmats /creategun");
	if(PlayerInfo[playerid][pJob] == JOB_WSMUGGLER || PlayerInfo[playerid][pVIPJob] == JOB_WSMUGGLER) SendClientMessage(playerid, COLOR_YELLOW, "WEAPONS SMUGGLER: {FFFFFF}/getmats /dropmats /sellmats");
	if(PlayerInfo[playerid][pJob] == JOB_DDEALER || PlayerInfo[playerid][pVIPJob] == JOB_DDEALER) SendClientMessage(playerid, COLOR_YELLOW, "DRUGS DEALER: {FFFFFF}/buyweed /buycrack /sellweed /sellcrack");
	if(PlayerInfo[playerid][pJob] == JOB_DSMUGGLER || PlayerInfo[playerid][pVIPJob] == JOB_DSMUGGLER) SendClientMessage(playerid, COLOR_YELLOW, "DRUGS SMUGGLER: {FFFFFF}/getweed /dropweed /getcrack /dropcrack");
   	if(PlayerInfo[playerid][pJob] == JOB_BODYGUARD || PlayerInfo[playerid][pVIPJob] == JOB_BODYGUARD) SendClientMessage(playerid, COLOR_YELLOW, "BODYGUARD: {FFFFFF}/vest");
   	if(PlayerInfo[playerid][pJob] == JOB_BOXER || PlayerInfo[playerid][pVIPJob] == JOB_BOXER) SendClientMessage(playerid, COLOR_YELLOW, "BOXER: {FFFFFF}/fight");
	return 1;
}

CMD:bid(playerid, params[])
{
	new boxer, amount, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(GetPlayerInterior(playerid) != 5 || GetPlayerVirtualWorld(playerid) != 1) return SendClientMessage(playerid, COLOR_GREY, "You are not inside the ganton gym.");
	if(!BoxingMatch) return SendClientMessage(playerid, COLOR_GREY, "There is no boxing match going on.");
	if(!BoxTime) return SendClientMessage(playerid, COLOR_GREY, "The boxing match has already started.");
	if(BidAmount[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You have already placed your bid for this match.");
	if(sscanf(params, "ii", boxer, amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bid [boxer] [amount]");
	if(boxer < 1 || boxer > 2) return SendClientMessage(playerid, COLOR_GREY, "Boxers are between 1 and 2.");
	if(PlayerInfo[playerid][pMoney] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
	if(amount < 500) return SendClientMessage(playerid, COLOR_GREY, "Minimum bid is $500.");
	BoxerBid[boxer] += amount;
	BidAmount[playerid] = amount;
	BidBoxer[playerid] = boxer;
	GiveZaiatMoney(playerid, -amount);
	format(string, sizeof(string), "Boxing Ring: %s has placed a $%d bid on %s.", RPN(playerid), amount, RPN(Boxer[boxer]));
	SendGymMessage(COLOR_WHITE, string);
    return 1;
}

CMD:fight(playerid, params[]) //skin 80 and 81
{
	new string[128], playerb;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pJob] != JOB_BOXER && PlayerInfo[playerid][pVIPJob] != JOB_BOXER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Boxer.");
	if(GetPlayerInterior(playerid) != 5 || GetPlayerVirtualWorld(playerid) != 1) return SendClientMessage(playerid, COLOR_GREY, "You are not inside the ganton gym.");
	if(GetPlayerSkin(playerid) != 80 && GetPlayerSkin(playerid) != 81) return SendClientMessage(playerid, COLOR_GREY, "You are not wearing a boxing uniform.");
	if(GetPlayerFightingStyle(playerid) != FIGHT_STYLE_BOXING) return SendClientMessage(playerid, COLOR_GREY, "You must use the boxing fighting style to fight.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fight [playerid]");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't fight yourself.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsPlayerNearPlayer(playerid, playerb, 3)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
    if(BoxingMatch) return SendClientMessage(playerid, COLOR_GREY, "Another boxing match is going on.");
	format(string, sizeof(string), " You have offered %s a boxing fight.", RPN(playerb));
	SendClientMessage(playerid, COLOR_LIME, string);
	format(string, sizeof(string), " %s has offered you a boxing fight. (/accept fight) (/cancel fight)", RPN(playerid));
	SendClientMessage(playerb, COLOR_LIME, string);
	BoxBy[playerb] = playerid;
    return 1;
}

forward BoxCountDown(playerid, playerb);
public BoxCountDown(playerid, playerb)
{
	new string[64];
	ResetPlayerWeapons(playerid);
	ResetPlayerWeapons(playerb);
	if(BoxTime <= 0)
	{
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~r~Fight!", 1000, 3);
		GameTextForPlayer(playerb, "~n~~n~~n~~n~~n~~n~~n~~n~~r~Fight!", 1000, 3);
	    PlayerPlaySound(playerid, 1057, 0, 0, 0);
	    PlayerPlaySound(playerb, 1057, 0, 0, 0);
	    TogglePlayerControllable(playerb, 1);
		TogglePlayerControllable(playerid, 1);
		SendGymMessage(COLOR_WHITE, "Boxing Ring: The boxing match has started.");
	}
	else
	{
		format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Starting in: ~w~%d", BoxTime);
		GameTextForPlayer(playerid, string, 1000, 3);
		GameTextForPlayer(playerb, string, 1000, 3);
		if(BoxTime == 3 || BoxTime == 2 || BoxTime == 1)
		{
		    PlayerPlaySound(playerid, 1056, 0, 0, 0);
		    PlayerPlaySound(playerb, 1056, 0, 0, 0);
		}
		BoxTime --;
		BoxTimer = SetTimerEx("BoxCountDown", 1000, false, "ii", playerid, playerb);
	}
	return 1;
}

CMD:vest(playerid, params[])
{
	new playerb, price, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pJob] != JOB_BODYGUARD && PlayerInfo[playerid][pVIPJob] != JOB_BODYGUARD) return SendClientMessage(playerid, COLOR_GREY, "You are not a Bodyguard.");
	if(sscanf(params, "ui", playerb, price)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /free [playerid] [price]");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't vest yourself.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsPlayerNearPlayer(playerid, playerb, 5)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
	if(price < 50 || price > 500) return SendClientMessage(playerid, COLOR_GREY, "Price is between 50 and 500.");
	if(Boxing[playerb]) return SendClientMessage(playerid, COLOR_GREY, "You can't sell someone a vest in a boxing match.");
	VestPrice[playerid][playerb] = price;
	VestBy[playerb] = playerid;
	format(string, sizeof(string), " You have offered %s a vest for $%d.", RPN(playerb), price);
	SendClientMessage(playerid, COLOR_LIME, string);
	format(string, sizeof(string), " Bodyguard %s has offered you a vest for $%d. (/accept vest) (/cancel vest)", RPN(playerid), price);
    SendClientMessage(playerb, COLOR_LIME, string);
	return 1;
}

CMD:free(playerid, params[])
{
	new playerb, price, string[128];
    if(FreeTimeout[playerid])
    {
        format(string, sizeof(string), "You have to wait %d more seconds before freeing someone.", FreeTimeout[playerid]);
        SendClientMessage(playerid, COLOR_GREY, string);
        return 1;
    }
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pJob] != JOB_LAWYER && PlayerInfo[playerid][pVIPJob] != JOB_LAWYER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Lawyer.");
	if(sscanf(params, "ui", playerb, price)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /free [playerid] [price]");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't free yourself.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pPrison]) return SendClientMessage(playerid, COLOR_GREY, "Player is not prisoned.");
	if(!IsPlayerNearPlayer(playerid, playerb, 5)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from your client.");
	if(price < 100 || price > 1000) return SendClientMessage(playerid, COLOR_GREY, "Price is between 100 and 2000.");
	if(RPJS(playerid, JOB_LAWYER) < 100) FreeTime[playerb] = 1;
	else if(RPJS(playerid, JOB_LAWYER) < 300) FreeTime[playerb] = 2;
	else if(RPJS(playerid, JOB_LAWYER) < 700) FreeTime[playerb] = 3;
	else if(RPJS(playerid, JOB_LAWYER) < 1200) FreeTime[playerb] = 4;
	else if(RPJS(playerid, JOB_LAWYER) >= 1200) FreeTime[playerb] = 5;
	FreePrice[playerid][playerb] = price;
	FreeBy[playerb] = playerid;
	format(string, sizeof(string), " You have offered %s to reduce their prison sentence by %d minutes for $%d.", RPN(playerb), FreeTime[playerb], price);
	SendClientMessage(playerid, COLOR_LIME, string);
	format(string, sizeof(string), " Lawyer %s has offered to reduce your prison sentence by %d minute for $%d. (/accept free) (/cancel free)", RPN(playerid), FreeTime[playerb], price);
    SendClientMessage(playerb, COLOR_LIME, string);
	return 1;
}

CMD:defend(playerid, params[])
{
	new playerb, price, string[128];
    if(DefendTimeout[playerid])
    {
        format(string, sizeof(string), "You have to wait %d more seconds before defending someone.", DefendTimeout[playerid]);
        SendClientMessage(playerid, COLOR_GREY, string);
        return 1;
    }
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pJob] != JOB_LAWYER && PlayerInfo[playerid][pVIPJob] != JOB_LAWYER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Lawyer.");
	if(sscanf(params, "ui", playerb, price)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /defend [playerid] [price]");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't defend yourself.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pWanted]) return SendClientMessage(playerid, COLOR_GREY, "Player is not wanted.");
	if(!IsPlayerNearPlayer(playerid, playerb, 5)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from your client.");
	if(price < 100 || price > 1000) return SendClientMessage(playerid, COLOR_GREY, "Price is between 100 and 2000.");
	DefendBy[playerb] = playerid;
	DefendPrice[playerid][playerb] = price;
	format(string, sizeof(string), " You have offered %s to defend them $%d.", RPN(playerb), price);
	SendClientMessage(playerid, COLOR_LIME, string);
	format(string, sizeof(string), " Lawyer %s has offered to a defend you for $%d. (/accept defend) (/cancel defend)", RPN(playerid), price);
    SendClientMessage(playerb, COLOR_LIME, string);
	return 1;
}
CMD:mech(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pJob] != JOB_MECHANIC && !PlayerInfo[playerid][pVIP]) return SendClientMessage(playerid, COLOR_GREY, "You are not a mechanic.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You must be in a vehicle to use your mechanic tools.");
	ShowDialog(playerid, 9);
	return 1;
}

CMD:creategun(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pJob] != JOB_WDEALER && PlayerInfo[playerid][pVIPJob] != JOB_WDEALER) return SendClientMessage(playerid, COLOR_GREY, "You are not a weapons dealer.");
	new string[128];
	if(sscanf(params, "s[32]", params))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /creategun [weapon]");
	    SendClientMessage(playerid, COLOR_GREY, "LEVEL 1: Flowers (25) | GolfClub (50) | Shovel (50) | Bat (50) | Katana (50)");
	    SendClientMessage(playerid, COLOR_GREY, "LEVEL 1: SDPistol (100) | Shotgun (200)");
	    if(strval(RPJL(playerid, JOB_WDEALER)) >= 2) SendClientMessage(playerid, COLOR_GREY, "LEVEL 2: MP5 (500) | Rifle (750)");
	    if(strval(RPJL(playerid, JOB_WDEALER)) >= 3) SendClientMessage(playerid, COLOR_GREY, "LEVEL 3: Deagle (2000)");
	    if(strval(RPJL(playerid, JOB_WDEALER)) >= 4) SendClientMessage(playerid, COLOR_GREY, "LEVEL 4: AK47 (4000) | M4 (4500)");
	    if(strval(RPJL(playerid, JOB_WDEALER)) >= 5) SendClientMessage(playerid, COLOR_GREY, "LEVEL 5: SPAS12 (6500) | Sniper (7000)");
	    return 1;
	}
    if(!strcmp(params, "flowers", true, 7))
    {
        if(PlayerInfo[playerid][pMaterials] < 25) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		GiveZaiatWeapon(playerid, 14, 5);
		PlayerInfo[playerid][pMaterials] -=25;
		format(string, sizeof(string), "* %s has created flowers from materials.", RPN(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(params, "golfclub", true, 8))
    {
        if(PlayerInfo[playerid][pMaterials] < 50) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		GiveZaiatWeapon(playerid, 2, 5);
		PlayerInfo[playerid][pMaterials] -=50;
		format(string, sizeof(string), "* %s has created a golf club from materials.", RPN(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(params, "shovel", true, 6))
    {
        if(PlayerInfo[playerid][pMaterials] < 50) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		GiveZaiatWeapon(playerid, 6, 5);
		PlayerInfo[playerid][pMaterials] -=50;
		format(string, sizeof(string), "* %s has created a shovel from materials.", RPN(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
	else if(!strcmp(params, "bat", true, 3))
    {
        if(PlayerInfo[playerid][pMaterials] < 50) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		GiveZaiatWeapon(playerid, 5, 5);
		PlayerInfo[playerid][pMaterials] -=50;
		format(string, sizeof(string), "* %s has created a baseball bat from materials.", RPN(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(params, "katana", true, 6))
    {
        if(PlayerInfo[playerid][pMaterials] < 50) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
        GiveZaiatWeapon(playerid, 8, 5);
        PlayerInfo[playerid][pMaterials] -=50;
        format(string, sizeof(string), "* %s has created a katana from materials.", RPN(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(params, "sdpistol", true, 7))
    {
		if(PlayerInfo[playerid][pMaterials] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		GiveZaiatWeapon(playerid, 23, 5);
		PlayerInfo[playerid][pMaterials] -=100;
		format(string, sizeof(string), "* %s has created a silenced pistol from materials.", RPN(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
    else if(!strcmp(params, "shotgun", true, 7))
    {
		if(PlayerInfo[playerid][pMaterials] < 200) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		GiveZaiatWeapon(playerid, 25, 5);
		PlayerInfo[playerid][pMaterials] -=200;
		format(string, sizeof(string), "* %s has created a shotgun from materials.", RPN(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
  	else if(!strcmp(params, "rifle", true, 5))
    {
        if(strval(RPJL(playerid, JOB_WDEALER)) < 2) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
        if(PlayerInfo[playerid][pMaterials] < 750) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		GiveZaiatWeapon(playerid, 33, 5);
		PlayerInfo[playerid][pMaterials] -=750;
		format(string, sizeof(string), "* %s has created a rifle from materials.", RPN(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
    else if(!strcmp(params, "mp5", true, 3))
    {
		if(strval(RPJL(playerid, JOB_WDEALER)) < 2) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
		if(PlayerInfo[playerid][pMaterials] < 500) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		GiveZaiatWeapon(playerid, 29, 5);
		PlayerInfo[playerid][pMaterials] -=500;
		format(string, sizeof(string), "* %s has created an MP5 from materials.", RPN(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(params, "deagle", true, 6))
    {
        if(strval(RPJL(playerid, JOB_WDEALER)) < 3) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
        if(PlayerInfo[playerid][pMaterials] < 2000) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		GiveZaiatWeapon(playerid, 24, 5);
		PlayerInfo[playerid][pMaterials] -=2000;
		format(string, sizeof(string), "* %s has created a desert eagle from materials.", RPN(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(params, "ak47", true, 4))
    {
		if(strval(RPJL(playerid, JOB_WDEALER)) < 4) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
		if(PlayerInfo[playerid][pMaterials] < 4000) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		GiveZaiatWeapon(playerid, 30, 5);
		PlayerInfo[playerid][pMaterials] -=4000;
		format(string, sizeof(string), "* %s has created an AK-47 from materials.", RPN(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(params, "M4", true, 2))
    {
        if(strval(RPJL(playerid, JOB_WDEALER)) < 4) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
        if(PlayerInfo[playerid][pMaterials] < 4500) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		GiveZaiatWeapon(playerid, 31, 5);
		PlayerInfo[playerid][pMaterials] -=4500;
		format(string, sizeof(string), "* %s has created an M4 from materials.", RPN(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(params, "spas12", true, 6))
    {
		if(strval(RPJL(playerid, JOB_WDEALER)) < 5) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
		if(PlayerInfo[playerid][pMaterials] < 6500) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		GiveZaiatWeapon(playerid, 27, 5);
		PlayerInfo[playerid][pMaterials] -=6500;
		format(string, sizeof(string), "* %s has created a combat shotgun from materials.", RPN(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(params, "sniper", true, 6))
    {
		if(strval(RPJL(playerid, JOB_WDEALER)) < 5) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
		if(PlayerInfo[playerid][pMaterials] < 7000) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		GiveZaiatWeapon(playerid, 34, 5);
		PlayerInfo[playerid][pMaterials] -=7000;
		format(string, sizeof(string), "* %s has created a sniper rifle from materials.", RPN(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else
    {
        SendClientMessage(playerid, COLOR_GREY, "Invalid weapon name.");
        return 1;
    }
	return 1;
}

CMD:sellgun(playerid, params[])
{
	new string[128], playerb, price, weapon[32];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pJob] != JOB_WDEALER && PlayerInfo[playerid][pVIPJob] != JOB_WDEALER) return SendClientMessage(playerid, COLOR_GREY, "You are not a weapons dealer.");
	if(sscanf(params, "us[32]i", playerb, weapon, price))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sellgun [playerid] [weapon] [price]");
	    SendClientMessage(playerid, COLOR_GREY, "LEVEL 1: Flowers (25) | GolfClub (50) | Shovel (50) | Bat (50) | Katana (50)");
	    SendClientMessage(playerid, COLOR_GREY, "LEVEL 1: SDPistol (100) | Shotgun (200)");
	    if(strval(RPJL(playerid, JOB_WDEALER)) >= 2) SendClientMessage(playerid, COLOR_GREY, "LEVEL 2: MP5 (500) | Rifle (750)");
	    if(strval(RPJL(playerid, JOB_WDEALER)) >= 3) SendClientMessage(playerid, COLOR_GREY, "LEVEL 3: Deagle (2000)");
	    if(strval(RPJL(playerid, JOB_WDEALER)) >= 4) SendClientMessage(playerid, COLOR_GREY, "LEVEL 4: AK47 (4000) | M4 (4500)");
	    if(strval(RPJL(playerid, JOB_WDEALER)) >= 5) SendClientMessage(playerid, COLOR_GREY, "LEVEL 5: SPAS12 (6500) | Sniper (7000)");
	    return 1;
	}
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't sell weapons to yourself, use /creategun.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerid][pLevel] < 2) return SendClientMessage(playerid, COLOR_GREY, "You must be at least level 2 to sell weapons.");
	if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
    if(!strcmp(weapon, "flowers", true, 7))
    {
        if(PlayerInfo[playerid][pMaterials] < 25) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		BeenOfferedWeapon[playerb] = 14;
    }
    else if(!strcmp(weapon, "golfclub", true, 8))
    {
        if(PlayerInfo[playerid][pMaterials] < 50) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		BeenOfferedWeapon[playerb] = 2;
    }
    else if(!strcmp(weapon, "shovel", true, 6))
    {
        if(PlayerInfo[playerid][pMaterials] < 50) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		BeenOfferedWeapon[playerb] = 6;
    }
	else if(!strcmp(weapon, "bat", true, 3))
    {
        if(PlayerInfo[playerid][pMaterials] < 50) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		BeenOfferedWeapon[playerb] = 5;
    }
    else if(!strcmp(weapon, "katana", true, 6))
    {
        if(PlayerInfo[playerid][pMaterials] < 50) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
        BeenOfferedWeapon[playerb] = 8;
    }
    else if(!strcmp(weapon, "sdpistol", true, 7))
    {
		if(PlayerInfo[playerid][pMaterials] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		BeenOfferedWeapon[playerb] = 23;
	}
    else if(!strcmp(weapon, "shotgun", true, 7))
    {
		if(PlayerInfo[playerid][pMaterials] < 200) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		BeenOfferedWeapon[playerb] = 25;
	}
  	else if(!strcmp(weapon, "rifle", true, 5))
    {
        if(strval(RPJL(playerid, JOB_WDEALER)) < 2) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
        if(PlayerInfo[playerid][pMaterials] < 750) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		BeenOfferedWeapon[playerb] = 33;
	}
    else if(!strcmp(weapon, "mp5", true, 3))
    {
		if(strval(RPJL(playerid, JOB_WDEALER)) < 2) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
		if(PlayerInfo[playerid][pMaterials] < 500) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		BeenOfferedWeapon[playerb] = 29;
    }
    else if(!strcmp(weapon, "deagle", true, 6))
    {
        if(strval(RPJL(playerid, JOB_WDEALER)) < 3) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
        if(PlayerInfo[playerid][pMaterials] < 2000) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		BeenOfferedWeapon[playerb] = 24;
    }
    else if(!strcmp(weapon, "ak47", true, 4))
    {
		if(strval(RPJL(playerid, JOB_WDEALER)) < 4) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
		if(PlayerInfo[playerid][pMaterials] < 4000) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		BeenOfferedWeapon[playerb] = 30;
    }
    else if(!strcmp(weapon, "M4", true, 2))
    {
        if(strval(RPJL(playerid, JOB_WDEALER)) < 4) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
        if(PlayerInfo[playerid][pMaterials] < 4500) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		BeenOfferedWeapon[playerb] = 31;
    }
    else if(!strcmp(weapon, "spas12", true, 6))
    {
		if(strval(RPJL(playerid, JOB_WDEALER)) < 5) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
		if(PlayerInfo[playerid][pMaterials] < 6500) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		BeenOfferedWeapon[playerb] = 27;
    }
    else if(!strcmp(weapon, "sniper", true, 6))
    {
		if(strval(RPJL(playerid, JOB_WDEALER)) < 5) return SendClientMessage(playerid, COLOR_GREY, "Your Weapons Dealer level is too low to sell this weapon.");
		if(PlayerInfo[playerid][pMaterials] < 7000) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials for this weapon.");
		BeenOfferedWeapon[playerb] = 34;
    }
    else
    {
        SendClientMessage(playerid, COLOR_GREY, "Invalid weapon name.");
        return 1;
    }
    SellWeaponTo[playerid] = playerb;
	BuyWeaponFrom[playerb] = playerid;
	BuyWeaponPrice[playerb] = price;
	format(string, sizeof(string), " You have offered %s to sell them a %s for $%d.", RPN(playerb), RWN(BeenOfferedWeapon[playerb]), price);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has offered to sell you a %s for $%d. (/accept weapon) (/cancel weapon)", RPN(playerid), RWN(BeenOfferedWeapon[playerb]), price);
    SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:sellmats(playerid, params[])
{
	new string[128], playerb, amount, price;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pJob] != JOB_WSMUGGLER && PlayerInfo[playerid][pVIPJob] != JOB_WSMUGGLER) return SendClientMessage(playerid, COLOR_GREY, "You are not a weapons smuggler/dealer.");
	if(sscanf(params, "uii", playerb, amount, price)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sellmats [playerid] [amount] [price]");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't sell materials to yourself.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerid][pLevel] < 2) return SendClientMessage(playerid, COLOR_GREY, "You must be at least level 2 to sell materials.");
	if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
	if(PlayerInfo[playerid][pMaterials] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much materials on you.");
	if(SellMaterialsTo[playerid] == playerb) return SendClientMessage(playerid, COLOR_GREY, "You have already offered that player to sell them materials.");
	if(price <= 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid materials price.");
	// Clearing old buyer
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i))
		{
		    if(SellMaterialsTo[playerid] == i && BuyMaterialsFrom[i] == playerid)
		    {
		        BuyMaterialsFrom[i] = -1; BuyMaterialsAmount[i] = 0; BuyMaterialsPrice[i] = 0; BeenOfferedMaterials[i] = 0;
		    }
		}
	}
	// New buyer
	SellMaterialsTo[playerid] = playerb;
	BuyMaterialsFrom[playerb] = playerid;
	BuyMaterialsAmount[playerb] = amount;
	BuyMaterialsPrice[playerb] = price;
	BeenOfferedMaterials[playerb] = 1;
	format(string, sizeof(string), " You have offered %s to sell them %d materials for $%d.", RPN(playerb), amount, price);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has offered to sell you %d materials for $%d. (/accept materials) (/cancel materials)", RPN(playerid), amount, price);
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:househelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	SendClientMessage(playerid, COLOR_YELLOW, "HOUSE: {FFFFFF}/buyhouse");
	if(PlayerInfo[playerid][pHouse] || PlayerInfo[playerid][pVHouse]) SendClientMessage(playerid, COLOR_YELLOW, "HOUSE OWNER: {FFFFFF}/hdeposit /hwithdraw /lock /houseupgrade /sellhousetomarket");
	return 1;
}

CMD:hwithdraw(playerid, params[])
{
	new string[128], option[32], amount;
	new idx = PlayerInfo[playerid][pHouse];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!PlayerInfo[playerid][pHouse] && !PlayerInfo[playerid][pVHouse]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a house.");
    if(GetPlayerVirtualWorld(playerid)-500 != idx && !PlayerInfo[playerid][pVHouse]) return SendClientMessage(playerid, COLOR_GREY, "You are not inside your house.");
    if(GetPlayerVirtualWorld(playerid)-500 != idx && PlayerInfo[playerid][pVHouse])
	{
		idx = PlayerInfo[playerid][pVHouse];
	    if(GetPlayerVirtualWorld(playerid)-500 != idx) return SendClientMessage(playerid, COLOR_GREY, "You are not inside your house.");
	}
    if(sscanf(params, "s[32]", option))
    {
        SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hsafe withdraw [item]");
        SendClientMessage(playerid, COLOR_GREY, "ITEMS: 1) money | 2) weapon | 3) weed | 4) crack");
        format(string, sizeof(string), "SAFE: $%d | %d Weed | %d Crack", HouseInfo[idx][hMoney], HouseInfo[idx][hWeed], HouseInfo[idx][hCrack]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "SAFE: Weapon 1: %s (%d Ammo) | Weapon 2: %s (%d Ammo) | Weapon 3: %s (%d Ammo)", RWN(HouseInfo[idx][hGun][0]), HouseInfo[idx][hGunAmmo][0], RWN(HouseInfo[idx][hGun][1]), HouseInfo[idx][hGunAmmo][1], RWN(HouseInfo[idx][hGun][2]), HouseInfo[idx][hGunAmmo][2]);
        SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "SAFE: Weapon 4: %s (%d Ammo) | Weapon 5: %s (%d Ammo)", RWN(HouseInfo[idx][hGun][3]), HouseInfo[idx][hGunAmmo][3], RWN(HouseInfo[idx][hGun][4]), HouseInfo[idx][hGunAmmo][4]);
        SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
    }
    if(!strcmp(option, "money", true, 5))
    {
    	if(sscanf(params, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hsafe withdraw money [amount]");
     	if(HouseInfo[idx][hMoney] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money in your house vault.");
    	HouseInfo[idx][hMoney] -= amount;
     	GiveZaiatMoney(playerid, amount);
     	format(string, sizeof(string), "* %s opens their vault, takes $%d and closes it.", RPN(playerid), amount);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(option, "weapon", true, 4))
    {
     	if(sscanf(params, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hsafe withdraw weapon [slot]");
        if(amount < 1 || amount > 5) return SendClientMessage(playerid, COLOR_GREY, "Weapon slots are between 1 and 5.");
        amount = amount-1;
        if(!HouseInfo[idx][hGun][amount]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a weapon in this slot.");
        GiveZaiatWeapon(playerid, HouseInfo[idx][hGun][amount], HouseInfo[idx][hGunAmmo][amount]);
		format(string, sizeof(string), "* %s opens their vault, takes a %s closes it.", RPN(playerid), RWN(HouseInfo[idx][hGun][amount]));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
     	HouseInfo[idx][hGun][amount] = 0;
		HouseInfo[idx][hGunAmmo][amount] = 0;
    }
    else if(!strcmp(option, "weed", true, 4))
    {
  	 	if(sscanf(params, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hsafe withdraw weed [amount]");
    	if(HouseInfo[idx][hWeed] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much weed in your house vault.");
    	HouseInfo[idx][hWeed] -= amount;
    	PlayerInfo[playerid][pWeed] += amount;
    	format(string, sizeof(string), "* %s opens their vault, takes %d grams of weed and closes it.", RPN(playerid), amount);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(option, "crack", true, 4))
    {
    	if(sscanf(params, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hsafe withdraw crack [amount]");
    	if(HouseInfo[idx][hCrack] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much crack in your house vault.");
    	HouseInfo[idx][hCrack] -= amount;
    	PlayerInfo[playerid][pCrack] += amount;
   	 	format(string, sizeof(string), "* %s opens their vault, takes %d grams of crack and closes it.", RPN(playerid), amount);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
	return 1;
}


CMD:hdeposit(playerid, params[])
{
	new string[128], option[32], amount, done;
	new idx = PlayerInfo[playerid][pHouse];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!PlayerInfo[playerid][pHouse] && !PlayerInfo[playerid][pVHouse]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a house.");
    if(GetPlayerVirtualWorld(playerid)-500 != idx && !PlayerInfo[playerid][pVHouse]) return SendClientMessage(playerid, COLOR_GREY, "You are not inside your house.");
    if(GetPlayerVirtualWorld(playerid)-500 != idx && PlayerInfo[playerid][pVHouse])
	{
		idx = PlayerInfo[playerid][pVHouse];
	    if(GetPlayerVirtualWorld(playerid)-500 != idx) return SendClientMessage(playerid, COLOR_GREY, "You are not inside your house.");
	}
	if(sscanf(params, "s[32]", option))
    {
        SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hsafe deposit [item]");
        SendClientMessage(playerid, COLOR_GREY, "ITEMS: money | weapon | weed | crack");
        format(string, sizeof(string), "SAFE: $%d | %d Weed | %d Crack", HouseInfo[idx][hMoney], HouseInfo[idx][hWeed], HouseInfo[idx][hCrack]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "SAFE: Weapon 1: %s (%d Ammo) | Weapon 2: %s (%d Ammo) | Weapon 3: %s (%d Ammo)", RWN(HouseInfo[idx][hGun][0]), HouseInfo[idx][hGunAmmo][0], RWN(HouseInfo[idx][hGun][1]), HouseInfo[idx][hGunAmmo][1], RWN(HouseInfo[idx][hGun][2]), HouseInfo[idx][hGunAmmo][2]);
        SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "SAFE: Weapon 4: %s (%d Ammo) | Weapon 5: %s (%d Ammo)", RWN(HouseInfo[idx][hGun][3]), HouseInfo[idx][hGunAmmo][3], RWN(HouseInfo[idx][hGun][4]), HouseInfo[idx][hGunAmmo][4]);
        SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
    }
	if(sscanf(params, "s[32]", option))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hsafe deposit [item]");
		SendClientMessage(playerid, COLOR_GREY, "ITEMS: 1) money | 2) weapon | 3) weed | 4) crack");
		return 1;
	}
	if(!strcmp(option, "money", true, 5))
	{
		if(sscanf(params, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hsafe deposit money [amount]");
		if(PlayerInfo[playerid][pMoney] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		HouseInfo[idx][hMoney] += amount;
		GiveZaiatMoney(playerid, -amount);
		format(string, sizeof(string), "* %s opens their vault, puts $%d inside and closes it.", RPN(playerid), amount);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	else if(!strcmp(option, "weapon", true, 4))
	{
		if(!GetPlayerWeapon(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not holding a weapon in your hand.");
		new tw[2], w[2];
		for(new i=0; i<13; i++)
		{
 			GetPlayerWeaponData(playerid, i, tw[0], tw[1]);
			if(tw[0] == GetPlayerWeapon(playerid))
			{
				w[0] = tw[0];
				w[1] = tw[1];
			}
		}
		if(!HouseInfo[idx][hGun][0])
		{
			HouseInfo[idx][hGun][0] = w[0];
			HouseInfo[idx][hGunAmmo][0] = w[1];
			done = 1;
		}
		else if(!HouseInfo[idx][hGun][1])
		{
			HouseInfo[idx][hGun][1] = w[0];
			HouseInfo[idx][hGunAmmo][1] = w[1];
			done = 1;
		}
		else if(!HouseInfo[idx][hGun][2])
		{
			HouseInfo[idx][hGun][2] = w[0];
			HouseInfo[idx][hGunAmmo][2] = w[1];
			done = 1;
		}
		else if(!HouseInfo[idx][hGun][3])
		{
			HouseInfo[idx][hGun][3] = w[0];
			HouseInfo[idx][hGunAmmo][3] = w[1];
			done = 1;
		}
		else if(!HouseInfo[idx][hGun][4])
		{
			HouseInfo[idx][hGun][4] = w[0];
			HouseInfo[idx][hGunAmmo][4] = w[1];
			done = 1;
		}
		if(done)
		{
			format(string, sizeof(string), "* %s opens their vault, puts a %s inside and closes it.", RPN(playerid), RWN(GetPlayerWeapon(playerid)));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			RemoveZaiatWeapon(playerid, w[0]);
		}
		else SendClientMessage(playerid, COLOR_GREY, "Your house vault can't contain any more weapons.");
	}
	else if(!strcmp(option, "weed", true, 4))
	{
		if(sscanf(params, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hsafe deposit weed [amount]");
		if(PlayerInfo[playerid][pWeed] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much weed on you.");
		HouseInfo[idx][hWeed] += amount;
		PlayerInfo[playerid][pWeed] -= amount;
		format(string, sizeof(string), "* %s opens their vault, puts %d grams of weed inside and closes it.", RPN(playerid), amount);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	else if(!strcmp(option, "crack", true, 4))
	{
		if(sscanf(params, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hsafe deposit crack [amount]");
		if(PlayerInfo[playerid][pCrack] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much crack on you.");
		HouseInfo[idx][hCrack] += amount;
		PlayerInfo[playerid][pCrack] -= amount;
		format(string, sizeof(string), "* %s opens their vault, puts %d grams of crack inside and closes it.", RPN(playerid), amount);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	return 1;
}

CMD:vehhelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	SendClientMessage(playerid, COLOR_YELLOW, "VEHICLES DEALERSHIP: {FFFFFF}/buycar");
	SendClientMessage(playerid, COLOR_YELLOW, "REGULAR VEHICLES: {FFFFFF}/engine /lights");
	if(PlayerInfo[playerid][pVeh] || PlayerInfo[playerid][pVVeh]) SendClientMessage(playerid, COLOR_YELLOW, "OWNED VEHICLES: {FFFFFF}/lock /trunk /bonnet /sellcartomarket");
	return 1;
}

CMD:bizhelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	SendClientMessage(playerid, COLOR_YELLOW, "BUSINESS: {FFFFFF}/buybiz");
	if(PlayerInfo[playerid][pBiz] || PlayerInfo[playerid][pVBiz]) SendClientMessage(playerid, COLOR_YELLOW, "BUSINESS OWNER: {FFFFFF}/vault /lock /buyproducts /sellbiztomarket");
	return 1;
}

CMD:skill(playerid, params[])
{
	new string[128], left;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "i", strval(params)))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /skill [skill]");
		SendClientMessage(playerid, COLOR_GREY, "SKILLS: 1) Mechanic | 2) Lawyer | 3) Trucker | 4) Fisher | 5) Weapons Dealer | 6) Weapons Smuggler");
        SendClientMessage(playerid, COLOR_GREY, "SKILLS: 7) Drugs Dealer | 8) Drugs Smuggler | 9) Boxer");
		return 1;
	}
	// L1: 0 | L2: 100 | L3: 300 | L4: 700 | L5: 1200
	if(strval(params) == 9) format(params, 4, "11");
	if(RPJS(playerid, strval(params)) < 100) left = 100 - RPJS(playerid, strval(params));
	else if(RPJS(playerid, strval(params)) < 300) left = 300 - RPJS(playerid, strval(params));
	else if(RPJS(playerid, strval(params)) < 700) left = 700 - RPJS(playerid, strval(params));
	else if(RPJS(playerid, strval(params)) < 1200) left = 1200 - RPJS(playerid, strval(params));
	if(strval(params) == 1)
	{
	    format(string, sizeof(string), "** Mechanic Level: %s. (You need to repair/refill %d more vehicles to level up) **", RPJL(playerid, strval(params)), left);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	if(strval(params) == 2)
	{
	    format(string, sizeof(string), "** Lawyer Level: %s. (You need to defend/free %d more players to level up) **", RPJL(playerid, strval(params)), left);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	else if(strval(params) == 3)
	{
	    format(string, sizeof(string), "** Trucker Level: %s. (You need to deliver %d more packages to level up) **", RPJL(playerid, strval(params)), left);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	else if(strval(params) == 4)
	{
	    format(string, sizeof(string), "** Fisher Level: %s. (You need to fish %d more fishes to level up) **", RPJL(playerid, strval(params)), left);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	}
    else if(strval(params) == 5)
	{
	    format(string, sizeof(string), "** Weapons Dealer Level: %s. (You need to sell %d more weapons to level up) **", RPJL(playerid, strval(params)), left);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	else if(strval(params) == 6)
	{
	    format(string, sizeof(string), "** Weapons Smuggler Level: %s. (You need to deliver %d more materials to level up) **", RPJL(playerid, strval(params)), left);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	else if(strval(params) == 7)
	{
	    format(string, sizeof(string), "** Drugs Dealer Level: %s. (You need to sell %d more drugs to level up) **", RPJL(playerid, strval(params)), left);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	else if(strval(params) == 8)
	{
	    format(string, sizeof(string), "** Drugs Smuggle Level: %s. (You need to smuggle %d more packages to level up) **", RPJL(playerid, strval(params)), left);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	else if(strval(params) == 11)
	{
		format(string, sizeof(string), "** Boxer Level: %s. (You need to win %d more fights to level up) **", RPJL(playerid, JOB_BOXER), left);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	return 1;
}


CMD:sellweed(playerid, params[])
{
	new playerb, string[128], amount, price, maxweed;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pJob] != JOB_DDEALER && PlayerInfo[playerid][pVIPJob] != JOB_DDEALER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Drugs Dealer.");
	if(sscanf(params, "uii", playerb, amount, price)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sellweed [playerid] [amount] [price]");
    if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't sell weed to yourself.");
	if(WeedSeller[playerb] == playerid) SendClientMessage(playerid, COLOR_GREY, "You have already offered this player to buy weed.");
	if(PlayerInfo[playerid][pWeed] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that amount of weed on you.");
	if(strval(RPJL(playerb, JOB_DDEALER)) == 1) maxweed = 10;
   	else if(strval(RPJL(playerb, JOB_DDEALER)) == 2) maxweed = 15;
   	else if(strval(RPJL(playerb, JOB_DDEALER)) == 3) maxweed = 20;
   	else if(strval(RPJL(playerb, JOB_DDEALER)) == 4) maxweed = 25;
   	else if(strval(RPJL(playerb, JOB_DDEALER)) == 5) maxweed = 30;
	if(PlayerInfo[playerb][pWeed] + amount > maxweed) return SendClientMessage(playerid, COLOR_GREY, "Player can't hold that amount of weed at the moment.");
	WeedSeller[playerb] = playerid;
	WeedPrice[playerid][playerb] = price;
	WeedAmount[playerid][playerb] = amount;
	format(string, sizeof(string), " You have offered %s %d grams of weed for $%d.", RPN(playerb), amount, price);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has offered you %d grams of weed for $%d. (/accept weed) (/deny weed)", RPN(playerb), amount, price);
    SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:sellcrack(playerid, params[])
{
	new playerb, string[128], amount, price, maxcrack;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pJob] != JOB_DDEALER && PlayerInfo[playerid][pVIPJob] != JOB_DDEALER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Drugs Dealer.");
	if(sscanf(params, "uii", playerb, amount, price)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sellcrack [playerid] [amount] [price]");
    if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't sell crack to yourself.");
	if(CrackSeller[playerb] == playerid) SendClientMessage(playerid, COLOR_GREY, "You have already offered this player to buy crack.");
	if(PlayerInfo[playerid][pCrack] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that amount of Crack on you.");
	if(strval(RPJL(playerb, JOB_DDEALER)) == 1) maxcrack = 10;
   	else if(strval(RPJL(playerb, JOB_DDEALER)) == 2) maxcrack = 15;
   	else if(strval(RPJL(playerb, JOB_DDEALER)) == 3) maxcrack = 20;
   	else if(strval(RPJL(playerb, JOB_DDEALER)) == 4) maxcrack = 25;
   	else if(strval(RPJL(playerb, JOB_DDEALER)) == 5) maxcrack = 30;
	if(PlayerInfo[playerb][pCrack] + amount > maxcrack) return SendClientMessage(playerid, COLOR_GREY, "Player can't hold that amount of crack at the moment.");
	CrackSeller[playerb] = playerid;
	CrackPrice[playerid][playerb] = price;
	CrackAmount[playerid][playerb] = amount;
	format(string, sizeof(string), " You have offered %s %d grams of crack for $%d.", RPN(playerb), amount, price);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has offered you %d grams of crack for $%d. (/accept crack) (/deny crack)", RPN(playerb), amount, price);
    SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:buyweed(playerid, params[])
{
	new amount, maxweed, string[128];
	if(strval(RPJL(playerid, JOB_DDEALER)) == 1) maxweed = 10;
   	else if(strval(RPJL(playerid, JOB_DDEALER)) == 2) maxweed = 15;
   	else if(strval(RPJL(playerid, JOB_DDEALER)) == 3) maxweed = 20;
   	else if(strval(RPJL(playerid, JOB_DDEALER)) == 4) maxweed = 25;
   	else if(strval(RPJL(playerid, JOB_DDEALER)) == 5) maxweed = 30;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pJob] != JOB_DDEALER && PlayerInfo[playerid][pVIPJob] != JOB_DDEALER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Drugs Dealer.");
   	if(!IsPlayerInRangeOfPoint(playerid, 2, 323.0012,1118.5720,1083.8828)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the Weed Pickup.");
   	if(sscanf(params, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /buyweed [amount]");
   	if(amount < 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid weed amount.");
   	if(PlayerInfo[playerid][pMoney] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
   	if(amount > Weed) return SendClientMessage(playerid, COLOR_GREY, "The Drugs House doesn't have that amount of weed at the moment.");
    if(PlayerInfo[playerid][pWeed] + amount > maxweed) return SendClientMessage(playerid, COLOR_GREY, "You can't hold that much weed at the moment.");
    GiveZaiatMoney(playerid, -amount*50);
    if(PointInfo[1][pOwner])
    {
		new idx = PointInfo[1][pOwner];
		FamInfo[idx][fMoney] += amount*50;
		PointInfo[1][pProfit] += amount*50;
    }
    PlayerInfo[playerid][pWeed] += amount;
	Weed -= amount;
	format(string, sizeof(string), "Weed Pickup\n{FFFF00}/buyweed to get weed\nAvailable Stock: %d/2000", Weed);
	UpdateDynamic3DTextLabelText(WeedText, COLOR_RED, string);
    format(string, sizeof(string), "* %s has bought %d grams of weed for $%d.", RPN(playerid), amount, amount*50);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:buycrack(playerid, params[])
{
	new amount, maxcrack, string[128];
	if(strval(RPJL(playerid, JOB_DDEALER)) == 1) maxcrack = 10;
   	else if(strval(RPJL(playerid, JOB_DDEALER)) == 2) maxcrack = 15;
   	else if(strval(RPJL(playerid, JOB_DDEALER)) == 3) maxcrack= 20;
   	else if(strval(RPJL(playerid, JOB_DDEALER)) == 4) maxcrack = 25;
   	else if(strval(RPJL(playerid, JOB_DDEALER)) == 5) maxcrack = 30;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pJob] != JOB_DDEALER && PlayerInfo[playerid][pVIPJob] != JOB_DDEALER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Drugs Dealer.");
   	if(!IsPlayerInRangeOfPoint(playerid, 2, 2345.3992,-1185.6423,1027.9766)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the Crack Pickup.");
   	if(sscanf(params, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /buycrack [amount]");
   	if(amount < 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid crack amount.");
   	if(PlayerInfo[playerid][pMoney] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
   	if(amount > Crack) return SendClientMessage(playerid, COLOR_GREY, "The Crack Lab doesn't have that amount of crack at the moment.");
    if(PlayerInfo[playerid][pCrack] + amount > maxcrack) return SendClientMessage(playerid, COLOR_GREY, "You can't hold that much crack at the moment.");
    GiveZaiatMoney(playerid, -amount*50);
    if(PointInfo[2][pOwner])
    {
		new idx = PointInfo[2][pOwner];
		FamInfo[idx][fMoney] += amount*50;
		PointInfo[2][pProfit] += amount*50;
    }
    PlayerInfo[playerid][pCrack] += amount;
	Crack -= amount;
	format(string, sizeof(string), "Crack Pickup\n{FFFF00}/buycrack to get crack\nAvailable Stock: %d/2000", Crack);
	UpdateDynamic3DTextLabelText(CrackText, COLOR_RED, string);
    format(string, sizeof(string), "* %s has bought %d grams of crack for $%d.", RPN(playerid), amount, amount*50);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:getweed(playerid, params[])
{
	new string[128], packages;
	if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 100) packages = 5;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 300) packages = 10;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 700) packages = 15;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 1200) packages = 20;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] >= 1200) packages = 25;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pJob] != JOB_DSMUGGLER && PlayerInfo[playerid][pVIPJob] != JOB_DSMUGGLER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Drugs Smuggler.");
	if(PlayerInfo[playerid][pDPackages]) return SendClientMessage(playerid, COLOR_GREY, "You already have packages.");
	if(!IsPlayerInRangeOfPoint(playerid, 3, 2941.2471,-2053.3892,3.5480)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the Weed Packages Pickup.");
   	if(PlayerInfo[playerid][pMoney] < packages*10) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
	PlayerInfo[playerid][pDPackages] = 1;
    GiveZaiatMoney(playerid, -(packages*10));
    if(PointInfo[0][pOwner])
    {
		new idx = PointInfo[0][pOwner];
		FamInfo[idx][fMoney] += packages*10;
		PointInfo[0][pProfit] += packages*10;
    }
    format(string, sizeof(string), "* %s has loaded %d weed packages from the pickup.", RPN(playerid), packages);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), "* You have loaded {FF6347}%d weed{33CCFF} packages for {FF6347}$%d{33CCFF}, deliver them to the Weed Dropoff. (Checkpoint)", packages, packages*10);
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    SetPlayerCheckpoint(playerid,2178.5518,-1660.4418,14.9644,3);
    AntiTP[playerid] = 1;
    AntiTPTimer[playerid] = SetTimerEx("AntiTPHacks", 30000, false, "d", playerid);
	return 1;
}

CMD:dropweed(playerid, params[])
{
	new string[128], packages, oldj, newj;
	if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 100) packages = 5;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 300) packages = 10;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 700) packages = 15;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 1200) packages = 20;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] >= 1200) packages = 25;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pJob] != JOB_DSMUGGLER && PlayerInfo[playerid][pVIPJob] != JOB_DSMUGGLER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Drugs Smuggler.");
   	if(!IsPlayerInRangeOfPoint(playerid, 3, 2178.5518,-1660.4418,14.9644)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the Weed Dropoff.");
    AntiTPCheck(playerid);
	if(PlayerInfo[playerid][pDPackages] != 1) return SendClientMessage(playerid, COLOR_GREY, "You have no weed packages on you.");
	if(Weed >= 2000) return SendClientMessage(playerid, COLOR_GREY, "The Drugs House can't hold any more weed at the moment.");
	PlayerInfo[playerid][pDPackages] = 0;
	oldj = strval(RPJL(playerid, JOB_DSMUGGLER));
	PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] ++;
	newj = strval(RPJL(playerid, JOB_DSMUGGLER));
	Weed += packages;
	if(Weed > 2000) Weed = 2000;
	GiveZaiatMoney(playerid, packages*40);
	if(PointInfo[1][pOwner])
    {
		new idx = PointInfo[1][pOwner];
		FamInfo[idx][fMoney] += packages*40;
		PointInfo[1][pProfit] += packages*40;
    }
	format(string, sizeof(string), "Weed Pickup\n{FFFF00}/buyweed to get weed\nAvailable Stock: %d/2000", Weed);
	UpdateDynamic3DTextLabelText(WeedText, COLOR_RED, string);
    format(string, sizeof(string), "* %s has dropped %d weed packages in the dropoff and collected $%d.", RPN(playerid), packages, packages*40);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), "* You have delivered {FF6347}%d{33CCFF} packages for {FF6347}$%d{33CCFF}.", packages, packages*40);
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	if(oldj < newj)
	{
	    format(string, sizeof(string), "** Your Drugs Smuggler level is now %d, you can now carry %d packages. **", newj, newj*5);
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}

	return 1;
}


CMD:getcrack(playerid, params[])
{
	new string[128], packages;
	if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 100) packages = 5;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 300) packages = 10;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 700) packages = 15;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 1200) packages = 20;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] >= 1200) packages = 25;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pJob] != JOB_DSMUGGLER && PlayerInfo[playerid][pVIPJob] != JOB_DSMUGGLER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Drugs Smuggler.");
	if(PlayerInfo[playerid][pDPackages]) return SendClientMessage(playerid, COLOR_GREY, "You already have packages.");
	if(!IsPlayerInRangeOfPoint(playerid, 3, 2941.1660,-2050.1772,3.5480)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the Crack Packages Pickup.");
   	if(PlayerInfo[playerid][pMoney] < packages*10) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
	PlayerInfo[playerid][pDPackages] = 2;
    GiveZaiatMoney(playerid, -(packages*10));
    if(PointInfo[0][pOwner])
    {
		new idx = PointInfo[0][pOwner];
		FamInfo[idx][fMoney] += packages*10;
		PointInfo[0][pProfit] += packages*10;
    }
    format(string, sizeof(string), "* %s has loaded %d crack packages from the pickup.", RPN(playerid), packages);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), "* You have loaded {FF6347}%d crack{33CCFF} packages for {FF6347}$%d{33CCFF}, deliver them to the Crack Dropoff. (Checkpoint)", packages, packages*10);
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    SetPlayerCheckpoint(playerid,2354.7354,-1170.1056,28.0475,3);
    AntiTPTimer[playerid] = SetTimerEx("AntiTPHacks", 30000, false, "d", playerid);
	return 1;
}

CMD:dropcrack(playerid, params[])
{
	new string[128], packages, oldj, newj;
	if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 100) packages = 5;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 300) packages = 10;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 700) packages = 15;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] < 1200) packages = 20;
	else if(PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] >= 1200) packages = 25;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pJob] != JOB_DSMUGGLER && PlayerInfo[playerid][pVIPJob] != JOB_DSMUGGLER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Drugs Smuggler.");
   	if(!IsPlayerInRangeOfPoint(playerid, 3, 2354.7354,-1170.1056,28.0475)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the Crack Dropoff.");
    AntiTPCheck(playerid);
	if(PlayerInfo[playerid][pDPackages] != 2) return SendClientMessage(playerid, COLOR_GREY, "You have no crack packages on you.");
	if(Crack >= 2000) return SendClientMessage(playerid, COLOR_GREY, "The Crack Lab can't hold any more crack at the moment.");
	PlayerInfo[playerid][pDPackages] = 0;
	oldj = strval(RPJL(playerid,JOB_DSMUGGLER));
	PlayerInfo[playerid][pJobSkill][JOB_DSMUGGLER] ++;
	newj = strval(RPJL(playerid,JOB_DSMUGGLER));
	Crack += packages;
	if(Crack > 2000) Crack = 2000;
	GiveZaiatMoney(playerid, packages*40);
	if(PointInfo[2][pOwner])
    {
		new idx = PointInfo[2][pOwner];
		FamInfo[idx][fMoney] += packages*40;
		PointInfo[2][pProfit] += packages*40;
    }
	format(string, sizeof(string), "Crack Pickup\n{FFFF00}/buycrack to get crack\nAvailable Stock: %d/2000", Crack);
	UpdateDynamic3DTextLabelText(CrackText, COLOR_RED, string);
    format(string, sizeof(string), "* %s has dropped %d crack packages in the dropoff and collected $%d.", RPN(playerid), packages, packages*40);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), "* You have delivered {FF6347}%d{33CCFF} packages for {FF6347}$%d{33CCFF}.", packages, packages*40);
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	if(oldj < newj)
	{
	    format(string, sizeof(string), "** Your Drugs Smuggler level is now %d, you can now carry %d packages. **", newj, newj*5);
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}

	return 1;
}


CMD:getmats(playerid, params[])
{
	new string[128], packages;
	if(PlayerInfo[playerid][pJobSkill][JOB_WSMUGGLER] < 100) packages = 5;
	else if(PlayerInfo[playerid][pJobSkill][JOB_WSMUGGLER] < 300) packages = 10;
	else if(PlayerInfo[playerid][pJobSkill][JOB_WSMUGGLER] < 700) packages = 15;
	else if(PlayerInfo[playerid][pJobSkill][JOB_WSMUGGLER] < 1200) packages = 20;
	else if(PlayerInfo[playerid][pJobSkill][JOB_WSMUGGLER] >= 1200) packages = 25;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pJob] != JOB_WSMUGGLER && PlayerInfo[playerid][pVIPJob] != JOB_DSMUGGLER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Weapons Smuggler.");
	if(PlayerInfo[playerid][pMPackages]) return SendClientMessage(playerid, COLOR_GREY, "You already have packages.");
   	if(!IsPlayerInRangeOfPoint(playerid, 3, 1423.6010,-1317.9398,13.5547)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the Materials Pickup.");
   	if(PlayerInfo[playerid][pMoney] < packages*25) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
	PlayerInfo[playerid][pMPackages] = 1;
    GiveZaiatMoney(playerid, -(packages*25));
    if(PointInfo[3][pOwner])
    {
		new idx = PointInfo[3][pOwner];
		FamInfo[idx][fMoney] += packages*25;
		PointInfo[3][pProfit] += packages*25;
    }
    format(string, sizeof(string), "* %s has loaded %d materials packages from the pickup.", RPN(playerid), packages);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), "* You have loaded {FF6347}%d materials{33CCFF} packages for {FF6347}$%d{33CCFF}, deliver them to the Materials Dropoff. (Checkpoint)", packages, packages*25);
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    SetPlayerCheckpoint(playerid,2172.5471,-2264.2207,13.3416,3);
    AntiTPTimer[playerid] = SetTimerEx("AntiTPHacks", 30000, false, "d", playerid);
	return 1;
}

CMD:dropmats(playerid, params[])
{
	new string[128], packages, oldj, newj;
	if(PlayerInfo[playerid][pJobSkill][JOB_WSMUGGLER] < 100) packages = 5;
	else if(PlayerInfo[playerid][pJobSkill][JOB_WSMUGGLER] < 300) packages = 10;
	else if(PlayerInfo[playerid][pJobSkill][JOB_WSMUGGLER] < 700) packages = 15;
	else if(PlayerInfo[playerid][pJobSkill][JOB_WSMUGGLER] < 1200) packages = 20;
	else if(PlayerInfo[playerid][pJobSkill][JOB_WSMUGGLER] >= 1200) packages = 25;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pJob] != JOB_WSMUGGLER && PlayerInfo[playerid][pVIPJob] != JOB_DSMUGGLER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Weapons Smuggler.");
   	if(!IsPlayerInRangeOfPoint(playerid, 3, 2172.5471,-2264.2207,13.3416)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the Materials Dropoff.");
	AntiTPCheck(playerid);
	if(!PlayerInfo[playerid][pMPackages]) return SendClientMessage(playerid, COLOR_GREY, "You have no packages on you.");
	PlayerInfo[playerid][pMaterials] += packages*25;
	if(PointInfo[4][pOwner])
    {
		new idx = PointInfo[4][pOwner];
		FamInfo[idx][fMoney] += packages*25;
		PointInfo[4][pProfit] += packages*25;
    }
	PlayerInfo[playerid][pMPackages] = 0;
	oldj = strval(RPJL(playerid,JOB_WSMUGGLER));
	PlayerInfo[playerid][pJobSkill][JOB_WSMUGGLER] ++;
	newj = strval(RPJL(playerid,JOB_WSMUGGLER));
    format(string, sizeof(string), "* %s has dropped %d materials packages in the dropoff.", RPN(playerid), packages*25);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), "* You have collected {FF6347}%d materials{33CCFF} from the drop off.", packages*25);
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	if(oldj < newj)
	{
	    format(string, sizeof(string), "** Your Weapons Smuggler level is now %d, you can now carry %d packages. **", newj, newj*5);
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	return 1;
}

CMD:loadpackages(playerid, params[])
{
	new string[128], packages;
	// L1: 0 | L2: 100 | L3: 300 | L4: 700 | L5: 1200
	if(PlayerInfo[playerid][pJobSkill][JOB_TRUCKER] < 100) packages = 5;
	else if(PlayerInfo[playerid][pJobSkill][JOB_TRUCKER] < 300) packages = 10;
	else if(PlayerInfo[playerid][pJobSkill][JOB_TRUCKER] < 700) packages = 15;
	else if(PlayerInfo[playerid][pJobSkill][JOB_TRUCKER] < 1200) packages = 20;
	else if(PlayerInfo[playerid][pJobSkill][JOB_TRUCKER] >= 1200) packages = 25;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pJob] != JOB_TRUCKER && PlayerInfo[playerid][pVIPJob] != JOB_TRUCKER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Trucker.");
   	if(PlayerInfo[playerid][pTPackages] == 2) return SendClientMessage(playerid, COLOR_GREY, "You already have overloaded packages.");
	if(!IsPlayerInAnyVehicle(playerid) || !IsTruckerVehicle(GetPlayerVehicleID(playerid)) || !IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_GREY, "You are not in a Trucker vehicle or you have no trailer attached.");
   	if(!IsPlayerInRangeOfPoint(playerid, 5, 1727.3557,2309.9985,10.8203)) return SendClientMessage(playerid, COLOR_GREY, "You are not near a packages pickup.");
   	if(PlayerInfo[playerid][pMoney] < packages*5) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
	PlayerInfo[playerid][pTPackages] ++;
    GiveZaiatMoney(playerid, -(packages*5));
    PlayerInfo[playerid][pDeliverTruck] = GetPlayerVehicleID(playerid);
	TruckPackages[GetPlayerVehicleID(playerid)] = playerid;
    format(string, sizeof(string), "* %s has loaded %d products packages from the pickup.", RPN(playerid), packages);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), "* You have loaded {FF6347}%d products{33CCFF} packages for {FF6347}$%d{33CCFF}, deliver them to the dropoff. (Checkpoint)", packages, packages*5);
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    if(PlayerInfo[playerid][pTPackages] != 2)
    {
        SendClientMessage(playerid, COLOR_WHITE, "You can overload packages by typing /loadpackages again, cops will be notified though.");
    }
    SetPlayerCheckpoint(playerid, 2222.5107,-2682.7368,13.5409, 2);
    if(PlayerInfo[playerid][pTPackages] == 2)
    {
	    SendClientMessage(playerid, COLOR_LIGHTRED, "* You have overloaded packages, the Police Department has been notified as a result.");
	    SendCopMessage(COLOR_BLUE, "Products Depot: A truck has overloaded packages and is on it way to the dropoff now.");
    }
	return 1;
}

CMD:deliverpackages(playerid, params[])
{
	new string[128], packages, oldj, newj, price;
	// L1: 0 | L2: 100 | L3: 300 | L4: 700 | L5: 1200
	if(PlayerInfo[playerid][pJobSkill][JOB_TRUCKER] < 100) packages = 5;
	else if(PlayerInfo[playerid][pJobSkill][JOB_TRUCKER] < 300) packages = 10;
	else if(PlayerInfo[playerid][pJobSkill][JOB_TRUCKER] < 700) packages = 15;
	else if(PlayerInfo[playerid][pJobSkill][JOB_TRUCKER] < 1200) packages = 20;
	else if(PlayerInfo[playerid][pJobSkill][JOB_TRUCKER] >= 1200) packages = 25;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pJob] != JOB_TRUCKER && PlayerInfo[playerid][pVIPJob] != JOB_TRUCKER) return SendClientMessage(playerid, COLOR_GREY, "You are not a Trucker.");
	if(!IsPlayerInAnyVehicle(playerid) || !IsTruckerVehicle(GetPlayerVehicleID(playerid)) || !IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_GREY, "You are not in a Trucker vehicle or you have no trailer attached.");
   	if(!PlayerInfo[playerid][pTPackages]) return SendClientMessage(playerid, COLOR_GREY, "You have no packages on you.");
   	if(PlayerInfo[playerid][pDeliverTruck] != GetPlayerVehicleID(playerid)) return SendClientMessage(playerid, COLOR_GREY, "This is not the vehicle that your packages were loaded to.");
   	if(!IsPlayerInRangeOfPoint(playerid, 5, 2222.5107,-2682.7368,13.5409)) return SendClientMessage(playerid, COLOR_GREY, "You are not near a packages dropoff.");
	if(Products >= 10000) return SendClientMessage(playerid, COLOR_GREY, "The dropoff can't hold anymore products at the moment.");
	oldj = strval(RPJL(playerid,JOB_TRUCKER));
	PlayerInfo[playerid][pJobSkill][JOB_TRUCKER] ++;
	Products += packages;
	if(Products > 10000) Products = 10000;
	newj = strval(RPJL(playerid,JOB_TRUCKER));
	if(PlayerInfo[playerid][pTPackages] == 1) {price = packages*200;}
	else if(PlayerInfo[playerid][pTPackages] == 2) {price = packages*400;}
    GiveZaiatMoney(playerid, price);
    PlayerInfo[playerid][pDeliverTruck] = -1;
    TruckPackages[GetPlayerVehicleID(playerid)] = -1;
    format(string, sizeof(string), "* %s has delivered %d products packages to the dropoff.", RPN(playerid), PlayerInfo[playerid][pTPackages]*5);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), "* You have delivered {FF6347}%d products{33CCFF} packages for {FF6347}$%d{33CCFF}", PlayerInfo[playerid][pTPackages]*5, price);
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    if(oldj < newj)
	{
	    format(string, sizeof(string), "** Your Trucker level is now %d, you can now carry %d packages. **", newj, newj*5);
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	format(string, sizeof(string), "Packages Dropoff\n{FFFF00}/deliverpackages to deliver crates\nAvailable Products: %d/10000", Products);
	UpdateDynamic3DTextLabelText(ProductsText, COLOR_RED, string);
	PlayerInfo[playerid][pTPackages] = 0;
	return 1;
}

CMD:join(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pJob] && PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You already have a job, /quitjob then try again.");
   	if(PlayerInfo[playerid][pJob] && PlayerInfo[playerid][pVIPJob] && PlayerInfo[playerid][pVIP] >= 2) return SendClientMessage(playerid, COLOR_GREY, "You already have two jobs, /quitjob then try again.");
	if(sscanf(params, "s[8]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /join [confirm]");
	if(!strcmp(params, "confirm", true))
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2, 2330.0693,-2315.4709,13.5469))
	    {
		    if(!PlayerInfo[playerid][pJob]) PlayerInfo[playerid][pJob] = JOB_MECHANIC;
		    else if(PlayerInfo[playerid][pVIP] >= 2) PlayerInfo[playerid][pVIPJob] = JOB_MECHANIC;
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have joined the {FF6347}Mechanic {33CCFF}job, type /help to view your job commands.");
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 2, 1380.8300,-1088.7698,27.3844))
	    {
		    if(!PlayerInfo[playerid][pJob]) PlayerInfo[playerid][pJob] = JOB_LAWYER;
		    else if(PlayerInfo[playerid][pVIP] >= 2) PlayerInfo[playerid][pVIPJob] = JOB_LAWYER;
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have joined the {FF6347}Lawyer {33CCFF}job, type /help to view your job commands.");
	    }
		else if(IsPlayerInRangeOfPoint(playerid, 2, 1677.3772,2340.2471,9.8980))
		{
		    if(!PlayerInfo[playerid][pJob]) PlayerInfo[playerid][pJob] = JOB_TRUCKER;
		    else if(PlayerInfo[playerid][pVIP] >= 2) PlayerInfo[playerid][pVIPJob] = JOB_TRUCKER;
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have joined the {FF6347}Trucker {33CCFF}job, type /help to view your job commands.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2, 1415.4907,-1301.0790,13.5449))
		{
		    if(!PlayerInfo[playerid][pJob]) PlayerInfo[playerid][pJob] = JOB_WSMUGGLER;
		    else if(PlayerInfo[playerid][pVIP] >= 2) PlayerInfo[playerid][pVIPJob] = JOB_WSMUGGLER;
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have joined the {FF6347}Weapons Smuggler {33CCFF}job, type /help to view your job commands.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2, 2165.2358,-2271.5012,13.3413))
		{
		    if(!PlayerInfo[playerid][pJob]) PlayerInfo[playerid][pJob] = JOB_WDEALER;
		    else if(PlayerInfo[playerid][pVIP] >= 2) PlayerInfo[playerid][pVIPJob] = JOB_WDEALER;
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have joined the {FF6347}Weapons Dealer {33CCFF}job, type /help to view your job commands.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2, 2178.5518,-1660.4418,14.9644))
		{
		    if(!PlayerInfo[playerid][pJob]) PlayerInfo[playerid][pJob] = JOB_DDEALER;
		    else if(PlayerInfo[playerid][pVIP] >= 2) PlayerInfo[playerid][pVIPJob] = JOB_DDEALER;
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have joined the {FF6347}Drugs Dealer {33CCFF}job, type /help to view your job commands.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2, 2354.7354,-1170.1056,28.0475))
		{
		    if(!PlayerInfo[playerid][pJob]) PlayerInfo[playerid][pJob] = JOB_DSMUGGLER;
		    else if(PlayerInfo[playerid][pVIP] >= 2) PlayerInfo[playerid][pVIPJob] = JOB_DSMUGGLER;
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have joined the {FF6347}Drugs Smuggler {33CCFF}job, type /help to view your job commands.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2, 2227.9976,-1718.2604,13.5321))
		{
		    if(!PlayerInfo[playerid][pJob]) PlayerInfo[playerid][pJob] = JOB_BODYGUARD;
		    else if(PlayerInfo[playerid][pVIP] >= 2) PlayerInfo[playerid][pVIPJob] = JOB_BODYGUARD;
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have joined the {FF6347}Bodyguard {33CCFF}job, type /help to view your job commands.");

		}
		else if(IsPlayerInRangeOfPoint(playerid, 2, 765.9518,15.2308,1000.6991))
		{
		    if(GetPlayerFightingStyle(playerid) != FIGHT_STYLE_BOXING) return SendClientMessage(playerid, COLOR_GREY, "You must use the boxing fighting style to become a boxer.");
			if(!PlayerInfo[playerid][pJob]) PlayerInfo[playerid][pJob] = JOB_BOXER;
		    else if(PlayerInfo[playerid][pVIP] >= 2) PlayerInfo[playerid][pVIPJob] = JOB_BOXER;
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have joined the {FF6347}Boxer {33CCFF}job, type /help to view your job commands.");
			new rand = random(2);
			if(rand == 0) {SetPlayerSkin(playerid, 80); PlayerInfo[playerid][pModel] = 80;}
			else if(rand == 1) {SetPlayerSkin(playerid, 81); PlayerInfo[playerid][pModel] = 81;}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "You are not near a job location.");
		}
	}
	return 1;
}

CMD:quitjob(playerid, params[])
{
	new string[128], jobid;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pJob] && PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You don't have a job.");
 	if(PlayerInfo[playerid][pVIP] >= 2)
	{
		if(sscanf(params, "is[8]", jobid, params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /quitjob [1-2] [confirm]");
		if(jobid == 1 && !PlayerInfo[playerid][pJob]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a job at this slot.");
		if(jobid == 2 && !PlayerInfo[playerid][pVIPJob]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a job at this slot.");
	}
	else if(sscanf(params, "s[8]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /quitjob [confirm]");
	if(!strcmp(params, "confirm", true))
	{
	    if(PlayerInfo[playerid][pVIP] >= 2)
	    {
	        if(jobid == 1)
	        {
		        format(string, sizeof(string), "* You have quit the {FF6347}%s {33CCFF}job.", RPJN(playerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		    	PlayerInfo[playerid][pJob] = JOB_NONE;
	        }
			else if(jobid == 2)
			{
		        format(string, sizeof(string), "* You have quit the {FF6347}%s {33CCFF}job.", RPVJN(playerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		    	PlayerInfo[playerid][pVIPJob] = JOB_NONE;
			}
	        return 1;
	    }
	    format(string, sizeof(string), "* You have quit the {FF6347}%s {33CCFF}job.", RPJN(playerid));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    PlayerInfo[playerid][pJob] = JOB_NONE;
	}
	return 1;
}

CMD:houseupgrade(playerid, params[])
{
	new string[128], idx = PlayerInfo[playerid][pHouse], price;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!PlayerInfo[playerid][pHouse]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a house.");
	if(!PlayerInfo[playerid][pVHouse])
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ])) return SendClientMessage(playerid, COLOR_GREY, "You are not near your house.");
	}
	else
	{
	    new done;
   	    if(!IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]))
 		{
	 		done ++;
	   	    idx = PlayerInfo[playerid][pVHouse];
	   	    if(!IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ])) done ++;
		}
		if(done == 2) return SendClientMessage(playerid, COLOR_GREY, "You are not near your house.");

	}
	if(sscanf(params, "s[8]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /houseupgrade [confirm]");
	if(HouseInfo[idx][hLevel] >= 10) return SendClientMessage(playerid, COLOR_GREY, "Your house already has the maximum level possible.");
	if(!strcmp(params, "confirm", true))
	{
	    if(!PlayerInfo[playerid][pVIP])price = 50000;
	    if(PlayerInfo[playerid][pVIP] == 1) price = 37500;
	    else if(PlayerInfo[playerid][pVIP] == 2) price = 25000;
	    else if(PlayerInfo[playerid][pVIP] == 3) price = 12500;
	    else if(PlayerInfo[playerid][pVIP] == 4) price = 0;
		if(PlayerInfo[playerid][pMoney] < price)
		{
		    format(string, sizeof(string), "You need $%d to upgrade your house.", price);
			SendClientMessage(playerid, COLOR_GREY, string);
			return 1;
		}
		HouseInfo[idx][hLevel] ++;
		GiveZaiatMoney(playerid, -price);
		format(string, sizeof(string), " You have upgraded your house to level %d.", HouseInfo[idx][hLevel]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "ID: %d\nHouse (Lvl: %d)\nOwner: %s\nStatus: %s", idx, HouseInfo[idx][hLevel], HouseInfo[idx][hOwner], RHS(idx));
		UpdateDynamic3DTextLabelText(HouseInfo[idx][hText], COLOR_WHITE, string);
	}
	return 1;
}

/*CMD:bizupgrade(playerid, params[])
{
	new string[128], idx = PlayerInfo[playerid][pBiz];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!PlayerInfo[playerid][pBiz]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a business.");
    if(GetPlayerVirtualWorld(playerid)-100 != idx) return SendClientMessage(playerid, COLOR_GREY, "You are not inside your business.");
	if(sscanf(params, "s[8]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bizupgrade [confirm]");
	if(BizInfo[idx][bLevel] >= 5) return SendClientMessage(playerid, COLOR_GREY, "Your business already has the maximum level possible.");
	if(!strcmp(params, "confirm", true))
	{
	    // L1: 0 | L2: 100 | L3: 300 | L4: 700 | L5: 1200
	    if(strval(RPBL(playerid)) == 1 && RPBS(playerid) >= 100) {BizInfo[idx][bLevel]++; SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have upgraded your business to level 2.");}
	    else if(strval(RPBL(playerid)) == 2 && RPBS(playerid) >= 300) {BizInfo[idx][bLevel]++; SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have upgraded your business to level 3.");}
	    else if(strval(RPBL(playerid)) == 3 && RPBS(playerid) >= 700) {BizInfo[idx][bLevel]++; SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have upgraded your business to level 4.");}
	    else if(strval(RPBL(playerid)) == 4 && RPBS(playerid) >= 1200) {BizInfo[idx][bLevel]++; SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have upgraded your business to level 5.");}
	    else
		{
		    if(strval(RPBL(playerid)) == 1) format(string, sizeof(string), "Your business needs to sell %d more products to level up.", 100 -RPBS(playerid));
		    else if(strval(RPBL(playerid)) == 2) format(string, sizeof(string), "Your business needs to sell %d more products to level up.", 300 -RPBS(playerid));
		    else if(strval(RPBL(playerid)) == 3) format(string, sizeof(string), "Your business needs to sell %d more products to level up.", 700 -RPBS(playerid));
		    else if(strval(RPBL(playerid)) == 4) format(string, sizeof(string), "Your business needs to sell %d more products to level up.", 1200 -RPBS(playerid));
			SendClientMessage(playerid, COLOR_GREY, string);
		}
	}
	return 1;
}*/

CMD:vault(playerid, params[])
{
	new value, string[128];
	new idx = PlayerInfo[playerid][pBiz];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!PlayerInfo[playerid][pBiz] && !PlayerInfo[playerid][pVBiz]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a busines.");
    if(GetPlayerVirtualWorld(playerid)-100 != idx && !PlayerInfo[playerid][pVBiz]) return SendClientMessage(playerid, COLOR_GREY, "You are not inside your business.");
    if(GetPlayerVirtualWorld(playerid)-100 != idx && PlayerInfo[playerid][pVBiz])
	{
		idx = PlayerInfo[playerid][pVBiz];
	    if(GetPlayerVirtualWorld(playerid)-100 != idx) return SendClientMessage(playerid, COLOR_GREY, "You are not inside your business.");
	}
	if(sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /vault [option]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: withdraw | deposit");
		return 1;
	}
	if(!strcmp(params, "withdraw", false, 8))
	{
	    if(sscanf(params, "s[32]i", params, value))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "USAGE: /vault withdraw [amount]");
	        format(string, sizeof(string), "Current Vault Money: $%d", BizInfo[idx][bMoney]);
	        SendClientMessage(playerid, COLOR_GREY, string);
			return 1;
	    }
	    if(value > BizInfo[idx][bMoney]) return SendClientMessage(playerid, COLOR_GREY, "You don't have this much money in your business vault.");
	    BizInfo[idx][bMoney] -= value;
	    GiveZaiatMoney(playerid, value);
	    format(string, sizeof(string), "* %s has withdrawn money from their business vault.", RPN(playerid));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), " You have withdrawn $%d from your business vault, amount left: $%d", value, BizInfo[idx][bMoney]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	else if(!strcmp(params, "deposit", false, 7))
	{
	    if(sscanf(params, "s[32]i", params, value))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "USAGE: /vault deposit [amount]");
	        format(string, sizeof(string), "Current Vault Money: $%d", BizInfo[idx][bMoney]);
	        SendClientMessage(playerid, COLOR_GREY, string);
			return 1;
	    }
	    if(value > PlayerInfo[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GREY, "You don't have this much money on you.");
	    BizInfo[idx][bMoney] += value;
	    GiveZaiatMoney(playerid, -value);
	    format(string, sizeof(string), "* %s has deposited money to their business vault.", RPN(playerid));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), " You have deposited $%d to your business vault, current amount: $%d", value, BizInfo[idx][bMoney]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

CMD:buyproducts(playerid, params[])
{
	new amount, price, string[128];
	new idx = PlayerInfo[playerid][pBiz];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!PlayerInfo[playerid][pBiz] && !PlayerInfo[playerid][pVBiz]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a business.");
    if(GetPlayerVirtualWorld(playerid)-100 != idx && !PlayerInfo[playerid][pVBiz]) return SendClientMessage(playerid, COLOR_GREY, "You are not inside your business.");
    if(GetPlayerVirtualWorld(playerid)-100 != idx && PlayerInfo[playerid][pVBiz])
	{
		idx = PlayerInfo[playerid][pVBiz];
	    if(GetPlayerVirtualWorld(playerid)-100 != idx) return SendClientMessage(playerid, COLOR_GREY, "You are not inside your business.");
	}
	if(sscanf(params, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /buyproducts [amount]");
	if(amount < 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid products amount.");
	if(Products < amount)
	{
	    format(string, sizeof(string), "The products dropoff currently has %d products only.", Products);
	    SendClientMessage(playerid, COLOR_GREY, string);
	    return 1;
	}
	price = amount*20;
    if(PlayerInfo[playerid][pMoney] < price)
	{
	    format(string, sizeof(string), "You don't have that much money on you. ($%d)", price);
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}
	if(BizInfo[idx][bProducts]+amount > 500) return SendClientMessage(playerid, COLOR_GREY, "Your business can't hold that much products.");
    GiveZaiatMoney(playerid, -price);
    BizInfo[idx][bProducts] += amount;
    Products -= amount;
    format(string, sizeof(string), "* %s has purchased %d products for $%d.", RPN(playerid), amount, price);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), "Packages Dropoff\n{FFFF00}/deliverpackages to deliver crates\nAvailable Products: %d/10000", Products);
	UpdateDynamic3DTextLabelText(ProductsText, COLOR_RED, string);
	return 1;
}

CMD:lights(playerid, param[])
{
	new string[128], idx;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You are not driving a vehicle.");
    idx = GetPlayerVehicleID(playerid);
    new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
	if(!lights)
	{
	    SetVehicleParamsEx(idx, engine, 1, alarm, doors, bonnet, boot, objective);
	    format(string, sizeof(string), "* %s turns their vehicle's lights on.", RPN(playerid));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		GameTextForPlayer(playerid, "~g~Lights On", 3500, 3);
	}
	else
	{
	    SetVehicleParamsEx(idx, engine, 0, alarm, doors, bonnet, boot, objective);
	    format(string, sizeof(string), "* %s turns their vehicle's lights off.", RPN(playerid));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		GameTextForPlayer(playerid, "~r~Lights Off", 3500, 3);
	}
	return 1;
}

CMD:trunk(playerid, params[])
{
	new string[128], done, idx;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pVeh] || PlayerInfo[playerid][pVVeh])
    {
        new Float:vx, Float:vy, Float:vz;
	    GetVehiclePos(PlayerInfo[playerid][pVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        idx = PlayerInfo[playerid][pVeh];
	        new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
			if(!boot)
			{

			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, 1, objective);
			    format(string, sizeof(string), "* %s opens their vehicle's trunk.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Trunk Opened", 3500, 3);
			}
			else
			{
			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, 0, objective);
			    format(string, sizeof(string), "* %s closes their vehicle's trunk.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Trunk Closed", 3500, 3);
			}
			done = 1;
			return 1;
	    }
	    GetVehiclePos(PlayerInfo[playerid][pVVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        idx = PlayerInfo[playerid][pVVeh];
	        new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
			if(!boot)
			{

			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, 1, objective);
			    format(string, sizeof(string), "* %s opens their vehicle's trunk.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Trunk Opened", 3500, 3);
			}
			else
			{
			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, 0, objective);
			    format(string, sizeof(string), "* %s closes their vehicle's trunk.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Trunk Closed", 3500, 3);
			}
			done = 1;
	    }
	    if(!done) SendClientMessage(playerid, COLOR_GREY, "You are not near a vehicle you own.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You don't own any vehicle.");
	    return 1;
	}

	return 1;
}

CMD:bonnet(playerid, params[])
{
	new string[128], done, idx;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pVeh] || PlayerInfo[playerid][pVVeh])
    {
        new Float:vx, Float:vy, Float:vz;
	    GetVehiclePos(PlayerInfo[playerid][pVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        idx = PlayerInfo[playerid][pVeh];
	        new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
			if(!bonnet)
			{

			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, 1, boot, objective);
			    format(string, sizeof(string), "* %s opens their vehicle's bonnet.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Trunk Opened", 3500, 3);
			}
			else
			{
			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, 0, boot, objective);
			    format(string, sizeof(string), "* %s closes their vehicle's bonnet.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Trunk Closed", 3500, 3);
			}
			done = 1;
			return 1;
	    }
	    GetVehiclePos(PlayerInfo[playerid][pVVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        idx = PlayerInfo[playerid][pVVeh];
	        new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
			if(!bonnet)
			{

			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, 1, boot, objective);
			    format(string, sizeof(string), "* %s opens their vehicle's bonnet.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Trunk Opened", 3500, 3);
			}
			else
			{
			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, 0, boot, objective);
			    format(string, sizeof(string), "* %s closes their vehicle's bonnet.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Trunk Closed", 3500, 3);
			}
			done = 1;
	    }
	    if(!done) SendClientMessage(playerid, COLOR_GREY, "You are not near a vehicle you own.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You don't own any vehicle.");
	    return 1;
	}

	return 1;
}

CMD:lock(playerid, params[])
{
	new string[128], idx, done, lockdone;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pBiz])
	{
		if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[PlayerInfo[playerid][pBiz]][bX], BizInfo[PlayerInfo[playerid][pBiz]][bY], BizInfo[PlayerInfo[playerid][pBiz]][bZ]))
	    {
	        if(!BizInfo[PlayerInfo[playerid][pBiz]][bStatus])
	        {
		        BizInfo[PlayerInfo[playerid][pBiz]][bStatus] = 1;
				format(string, sizeof(string), "ID: %d\n%s\nOwner: %s\nStatus: %s", PlayerInfo[playerid][pBiz], RBT(PlayerInfo[playerid][pBiz]), BizInfo[PlayerInfo[playerid][pBiz]][bOwner], RBS(PlayerInfo[playerid][pBiz]));
	            UpdateDynamic3DTextLabelText(BizInfo[PlayerInfo[playerid][pBiz]][bText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their business keys and unlocks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Business Unlocked", 3500, 3);
			}
			else if(BizInfo[PlayerInfo[playerid][pBiz]][bStatus])
	        {
		        BizInfo[PlayerInfo[playerid][pBiz]][bStatus] = 0;
				format(string, sizeof(string), "ID: %d\n%s\nOwner: %s\nStatus: %s", PlayerInfo[playerid][pBiz], RBT(PlayerInfo[playerid][pBiz]), BizInfo[PlayerInfo[playerid][pBiz]][bOwner], RBS(PlayerInfo[playerid][pBiz]));
	            UpdateDynamic3DTextLabelText(BizInfo[PlayerInfo[playerid][pBiz]][bText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their business keys and locks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Business Locked", 3500, 3);
			}
			done = 1;
			lockdone = 1;
	    }
    }
    if(PlayerInfo[playerid][pVBiz] && !done)
	{
	    idx = PlayerInfo[playerid][pVBiz];
		if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]))
	    {
	        if(!BizInfo[idx][bStatus])
	        {
		        BizInfo[idx][bStatus] = 1;
				format(string, sizeof(string), "ID: %d\n%s\nOwner: %s\nStatus: %s", idx, RBT(idx), BizInfo[idx][bOwner], RBS(idx));
	            UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their business keys and unlocks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Business Unlocked", 3500, 3);
			}
			else if(BizInfo[idx][bStatus])
	        {
		        BizInfo[idx][bStatus] = 0;
				format(string, sizeof(string), "ID: %d\n%s\nOwner: %s\nStatus: %s", idx, RBT(idx), BizInfo[idx][bOwner], RBS(idx));
	            UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their business keys and locks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Business Locked", 3500, 3);
			}
			done = 1;
			lockdone = 1;
	    }
    }
 	if(PlayerInfo[playerid][pHouse])
	{
	    idx = PlayerInfo[playerid][pHouse];
	    if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]))
	    {
	        if(!HouseInfo[PlayerInfo[playerid][pHouse]][hStatus])
	        {
		        HouseInfo[PlayerInfo[playerid][pHouse]][hStatus] = 1;
				format(string, sizeof(string), "ID: %d\nHouse (Lvl: %d)\nOwner: %s\nStatus: %s", idx, HouseInfo[idx][hLevel], HouseInfo[idx][hOwner], RHS(idx));
	            UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pHouse]][hText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their house keys and unlocks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~House Unlocked", 3500, 3);
			}
			else if(HouseInfo[PlayerInfo[playerid][pHouse]][hStatus])
	        {
		        HouseInfo[PlayerInfo[playerid][pHouse]][hStatus] = 0;
				format(string, sizeof(string), "ID: %d\nHouse (Lvl: %d)\nOwner: %s\nStatus: %s", idx, HouseInfo[idx][hLevel], HouseInfo[idx][hOwner], RHS(idx));
	            UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pHouse]][hText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their house keys and locks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~House Locked", 3500, 3);
			}
			done = 1;
			lockdone = 1;
		}
	}
	if(PlayerInfo[playerid][pVHouse] && !done)
	{
		idx = PlayerInfo[playerid][pVHouse];
		if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]))
	    {
	        if(!HouseInfo[PlayerInfo[playerid][pVHouse]][hStatus])
	        {
		        HouseInfo[PlayerInfo[playerid][pVHouse]][hStatus] = 1;
				format(string, sizeof(string), "ID: %d\nHouse (Lvl: %d)\nOwner: %s\nStatus: %s", idx, HouseInfo[idx][hLevel], HouseInfo[idx][hOwner], RHS(idx));
	            UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pVHouse]][hText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their house keys and unlocks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~House Unlocked", 3500, 3);
			}
			else if(HouseInfo[PlayerInfo[playerid][pVHouse]][hStatus])
	        {
		        HouseInfo[PlayerInfo[playerid][pVHouse]][hStatus] = 0;
				format(string, sizeof(string), "ID: %d\nHouse (Lvl: %d)\nOwner: %s\nStatus: %s", idx, HouseInfo[idx][hLevel], HouseInfo[idx][hOwner], RHS(idx));
	            UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pVHouse]][hText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their house keys and locks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~House Locked", 3500, 3);
			}
			lockdone = 1;
			return 1;
		}
	}
	if(PlayerInfo[playerid][pVeh] || PlayerInfo[playerid][pVVeh])
    {
        new Float:vx, Float:vy, Float:vz;
	    GetVehiclePos(PlayerInfo[playerid][pVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 3, vx, vy, vz))
	    {
	        idx = PlayerInfo[playerid][pVeh];
	        new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
			if(doors)
			{

			    SetVehicleParamsEx(idx, engine, lights, alarm, 0, bonnet, boot, objective);
			    PlayerInfo[playerid][vLocked] = 0;
			    format(string, sizeof(string), "* %s takes out their vehicle keys and unlocks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Vehicle Unlocked", 3500, 3);
			}
			else
			{
			    SetVehicleParamsEx(idx, engine, lights, alarm, 1, bonnet, boot, objective);
			    PlayerInfo[playerid][vLocked] = 1;
			    format(string, sizeof(string), "* %s takes out their vehicle keys and locks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Vehicle Locked", 3500, 3);
			}
			lockdone = 1;
			return 1;
	    }
	    GetVehiclePos(PlayerInfo[playerid][pVVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 3, vx, vy, vz))
	    {
	        idx = PlayerInfo[playerid][pVVeh];
	        new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
			if(doors)
			{

			    SetVehicleParamsEx(idx, engine, lights, alarm, 0, bonnet, boot, objective);
			    PlayerInfo[playerid][vVLocked] = 0;
			    format(string, sizeof(string), "* %s takes out their vehicle keys and unlocks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Vehicle Unlocked", 3500, 3);
			}
			else
			{
			    SetVehicleParamsEx(idx, engine, lights, alarm, 1, bonnet, boot, objective);
			    PlayerInfo[playerid][vVLocked] = 1;
			    format(string, sizeof(string), "* %s takes out their vehicle keys and locks it.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Vehicle Locked", 3500, 3);
			}
			lockdone = 1;
	    }
	    return 1;
    }
    if(!lockdone)
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not near something you can lock/unlock.");
	}
	return 1;
}

CMD:buyhouse(playerid, params[])
{
	new string[128], done;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pHouse] && PlayerInfo[playerid][pVHouse] && PlayerInfo[playerid][pVIP] >= 3) return SendClientMessage(playerid, COLOR_GREY, "You already own two houses.");
	if(PlayerInfo[playerid][pHouse] && PlayerInfo[playerid][pVIP] < 3) return SendClientMessage(playerid, COLOR_GREY, "You already own a house.");
	for(new idx=1; idx<MAX_HOUSES; idx++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]))
	    {
			if(!strcmp("The State", HouseInfo[idx][hOwner], false))
			{
			    if(PlayerInfo[playerid][pMoney] < HouseInfo[idx][hPrice]) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to buy this house.");
				GiveZaiatMoney(playerid, -HouseInfo[idx][hPrice]);
				if(PlayerInfo[playerid][pHouse]) PlayerInfo[playerid][pVHouse] = idx;
				else PlayerInfo[playerid][pHouse] = idx;
			    format(HouseInfo[idx][hOwner], 32, "%s", RPNU(playerid));
			    format(string, sizeof(string), "ID: %d\nHouse (Lvl: %d)\nOwner: %s\nStatus: %s", idx, HouseInfo[idx][hLevel], HouseInfo[idx][hOwner], RHS(idx));
				UpdateDynamic3DTextLabelText(HouseInfo[idx][hText], COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_GREEN, " You have successfully bought a house.");
				SendClientMessage(playerid, COLOR_WHITE, " Type /househelp to view your house commands.");
				format(string, sizeof(string), "%s has bought house id %d.", RPN(playerid), idx);
				Log("logs/house.log", string);
				idx = MAX_HOUSES;
				done = 1;
			}
			if(idx == MAX_HOUSES-1 && !done)
			{
			    SendClientMessage(playerid, COLOR_GREY, "This house is owned by someone else.");
			}
	    }
	    if(idx == MAX_HOUSES-1 && !done)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You are not near a buyable house.");
	    }
	}
	return 1;
}

CMD:sellhousetomarket(playerid, params[])
{
	new string[128], done;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pHouse] && !PlayerInfo[playerid][pVHouse]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a house.");
	if(sscanf(params, "s[8]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sellhousetomarket [confirm]");
	if(!strcmp(params, "confirm", true))
	{
	    new idx = PlayerInfo[playerid][pHouse];
	    if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[PlayerInfo[playerid][pHouse]][hX], HouseInfo[PlayerInfo[playerid][pHouse]][hY], HouseInfo[PlayerInfo[playerid][pHouse]][hZ]))
	    {
	        GiveZaiatMoney(playerid, (75*HouseInfo[PlayerInfo[playerid][pHouse]][hPrice])/100);
			HouseInfo[PlayerInfo[playerid][pHouse]][hStatus] = 0;
		    format(HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], 32, "The State");
		    format(string, sizeof(string), "ID: %d\nHouse (Lvl: %d)\nOwner: %s\nStatus: For Sale\nPrice: $%d", idx, HouseInfo[idx][hLevel], HouseInfo[idx][hOwner], HouseInfo[idx][hPrice]);
		    UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pHouse]][hText], COLOR_WHITE, string);
		    PlayerInfo[playerid][pHouse] = 0;
		    SendClientMessage(playerid, COLOR_GREEN, " You have successfully sold your house to The State. (75 percent of the original price was paid back)");
            format(string, sizeof(string), "%s has sold house id %d to the market.", RPN(playerid), idx);
			Log("logs/house.log", string);
			done = 1;
	    }
		if(!done)
		{
  			idx = PlayerInfo[playerid][pVHouse];
		    if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]))
		    {
		        GiveZaiatMoney(playerid, (75*HouseInfo[idx][hPrice])/100);
				HouseInfo[idx][hStatus] = 0;
			    format(HouseInfo[idx][hOwner], 32, "The State");
			    format(string, sizeof(string), "ID: %d\nHouse (Lvl: %d)\nOwner: %s\nStatus: For Sale\nPrice: $%d", idx, HouseInfo[idx][hLevel], HouseInfo[idx][hOwner], HouseInfo[idx][hPrice]);
			    UpdateDynamic3DTextLabelText(HouseInfo[idx][hText], COLOR_WHITE, string);
			    PlayerInfo[playerid][pVHouse] = 0;
			    SendClientMessage(playerid, COLOR_GREEN, " You have successfully sold your house to The State. (75 percent of the original price was paid back)");
	            format(string, sizeof(string), "%s has sold house id %d to the market.", RPN(playerid), idx);
				Log("logs/house.log", string);
				done = 1;
		    }
		}
	    if(!done)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You are not near your house.");
	        return 1;
	    }
    }
	return 1;
}

CMD:buybiz(playerid, params[])
{
	new string[128], done;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pBiz] && PlayerInfo[playerid][pVBiz] && PlayerInfo[playerid][pVIP] >= 4) return SendClientMessage(playerid, COLOR_GREY, "You already own two businesses.");
	if(PlayerInfo[playerid][pBiz] && PlayerInfo[playerid][pVIP] < 4) return SendClientMessage(playerid, COLOR_GREY, "You already own a business.");
	for(new idx=1; idx<MAX_BIZ; idx++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]))
	    {
			if(!strcmp("The State", BizInfo[idx][bOwner], false))
			{
			    if(PlayerInfo[playerid][pMoney] < BizInfo[idx][bPrice]) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to buy this business.");
				GiveZaiatMoney(playerid, -BizInfo[idx][bPrice]);
				if(PlayerInfo[playerid][pBiz]) PlayerInfo[playerid][pVBiz] = idx;
				else PlayerInfo[playerid][pBiz] = idx;
			    format(BizInfo[idx][bOwner], 32, "%s", RPNU(playerid));
			    format(string, sizeof(string), "ID: %d\n%s\nOwner: %s\nStatus: %s", idx, RBT(idx), BizInfo[idx][bOwner], RBS(idx));
				UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_GREEN, " You have successfully bought a business.");
				SendClientMessage(playerid, COLOR_WHITE, " Type /bizhelp to view your business commands.");
				format(string, sizeof(string), "%s has bought business id %d.", RPN(playerid), idx);
				Log("logs/business.log", string);
				idx = MAX_BIZ;
				done = 1;
			}
			if(idx == MAX_BIZ-1 && !done)
			{
			    SendClientMessage(playerid, COLOR_GREY, "This business is owned by someone else.");
			}
	    }
	    if(idx == MAX_BIZ-1 && !done)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You are not near a buyable business.");
	    }
	}
	return 1;
}



CMD:sellbiztomarket(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pBiz] && !PlayerInfo[playerid][pVBiz]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a business.");
	if(sscanf(params, "s[8]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sellbiztomarket [confirm]");
	if(!strcmp(params, "confirm", true))
	{
	    new done;
	    if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[PlayerInfo[playerid][pBiz]][bX], BizInfo[PlayerInfo[playerid][pBiz]][bY], BizInfo[PlayerInfo[playerid][pBiz]][bZ]))
	    {
	        GiveZaiatMoney(playerid, (75*BizInfo[PlayerInfo[playerid][pBiz]][bPrice])/100);
			BizInfo[PlayerInfo[playerid][pBiz]][bStatus] = 0;
		    format(BizInfo[PlayerInfo[playerid][pBiz]][bOwner], 32, "The State");
		    format(string, sizeof(string), "ID: %d\n%s\nOwner: %s\nStatus: For Sale\nPrice: $%d", PlayerInfo[playerid][pBiz], RBT(PlayerInfo[playerid][pBiz]), BizInfo[PlayerInfo[playerid][pBiz]][bOwner], BizInfo[PlayerInfo[playerid][pBiz]][bPrice]);
		    UpdateDynamic3DTextLabelText(BizInfo[PlayerInfo[playerid][pBiz]][bText], COLOR_WHITE, string);
		    SendClientMessage(playerid, COLOR_GREEN, " You have successfully sold your business to The State. (75 percent of original price was paid back)");
            format(string, sizeof(string), "%s has sold business id %d to the market.", RPN(playerid), PlayerInfo[playerid][pBiz]);
			Log("logs/business.log", string);
			PlayerInfo[playerid][pBiz] = 0;
			done = 1;
	    }
	    if(!done)
	    {
	        new idx = PlayerInfo[playerid][pVBiz];
   	 		if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]))
		    {
		        GiveZaiatMoney(playerid, (75*BizInfo[idx][bPrice])/100);
				BizInfo[idx][bStatus] = 0;
			    format(BizInfo[idx][bOwner], 32, "The State");
			    format(string, sizeof(string), "ID: %d\n%s\nOwner: %s\nStatus: For Sale\nPrice: $%d", idx, RBT(idx), BizInfo[idx][bOwner], BizInfo[idx][bPrice]);
			    UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
			    SendClientMessage(playerid, COLOR_GREEN, " You have successfully sold your business to The State. (75 percent of original price was paid back)");
	            format(string, sizeof(string), "%s has sold business id %d to the market.", RPN(playerid), idx);
				Log("logs/business.log", string);
				PlayerInfo[playerid][pVBiz] = 0;
				done = 1;
		    }
	    }
		if(!done)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You are not near your business.");
	        return 1;
	    }
    }
	return 1;
}

CMD:o(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3 && !OOCStatus) return SendClientMessage(playerid, COLOR_GREY, "The global OOC chat is currently disabled.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/o)oc [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(PlayerInfo[playerid][pAdmin]) format(string, sizeof(string), "(( {FF6347}%s %s: {E0FFFF}%s ))", RPALN(playerid), RPN(playerid), params);
	else format(string, sizeof(string), "(( %s: %s ))", RPN(playerid), params);
	SendClientMessageToAll(COLOR_OOC, string);
	Log("logs/chat.log", string);
	return 1;
}

CMD:n(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	SendClientMessage(playerid, COLOR_GREY, "Use /newbie instead of /n, this is to prevent mischats.");
	return 1;
}

CMD:newbie(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1 && !NewbieStatus) return SendClientMessage(playerid, COLOR_GREY, "The newbie chat is currently disabled.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /newbie [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(NewbieTime[playerid] > 0)
	{
	    format(string, sizeof(string), "You need to wait %d more seconds before using the newbie chat again.", NewbieTime[playerid]);
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}
	if(PlayerInfo[playerid][pNMute]) return SendClientMessage(playerid, COLOR_GREY, "You are muted from the newbie channel.");
	format(string, sizeof(string), "** Newbie %s: %s", RPN(playerid), params);
	if(PlayerInfo[playerid][pVIP]) format(string, sizeof(string), "** %s VIP %s: %s", RPVIPN(playerid), RPN(playerid), params);
	if(PlayerInfo[playerid][pHelper]) format(string, sizeof(string), "** %s %s: %s", RPHLN(playerid), RPN(playerid), params);
	if(PlayerInfo[playerid][pAdmin]) format(string, sizeof(string), "** %s %s: %s", RPALN(playerid), RPN(playerid), params);
	if(PlayerInfo[playerid][pOldskool]) format(string, sizeof(string), "** Oldskool %s: %s", RPN(playerid), params);
	if(PlayerInfo[playerid][pLoyalTag] && !PlayerInfo[playerid][pLoyal]) format(string, sizeof(string), "** Loyal %s: %s", RPN(playerid), params);
	if(!PlayerInfo[playerid][pHelper] && !PlayerInfo[playerid][pAdmin]) NewbieTime[playerid] = 40;
	SendClientMessageToAll(COLOR_NEWBIE, string);
	Log("logs/newbie.log", string);
	SetTimerEx("NewbieTimer", 1000, false, "i", playerid);
	return 1;
}

CMD:gate(playerid, params[])
{
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    // Dynamic Gates
    for(new idx=1; idx<MAX_GATES; idx++)
	{
	    if(GateInfo[idx][gModel] && IsPlayerInRangeOfPoint(playerid, 8, GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ]))
	    {
	        if(strlen(GateInfo[idx][gPassword]))
	        {
	            if(sscanf(params, "s[256]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gate [password]");
	            if(strcmp(params, GateInfo[idx][gPassword])) return SendClientMessage(playerid, COLOR_GREY, "Invalid gate password.");
	            if(!GateInfo[idx][gStatus])
		        {
		            GateInfo[idx][gStatus] = 1;
		            MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gOX], GateInfo[idx][gOY], GateInfo[idx][gOZ], GateInfo[idx][gSpeed]);
		            SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gORX], GateInfo[idx][gORY], GateInfo[idx][gORZ]);
		        }
		        else
		        {
		            GateInfo[idx][gStatus] = 0;
		            MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gSpeed]);
		            SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
		        }
	        }
	        else
	        {
		        if(!GateInfo[idx][gStatus])
		        {
		            GateInfo[idx][gStatus] = 1;
		            MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gOX], GateInfo[idx][gOY], GateInfo[idx][gOZ], GateInfo[idx][gSpeed]);
		            SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gORX], GateInfo[idx][gORY], GateInfo[idx][gORZ]);
		        }
		        else
		        {
		            GateInfo[idx][gStatus] = 0;
		            MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gSpeed]);
		            SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
		        }
	        }
	        idx = MAX_GATES;
	        return 1;
	    }
	}
    // Static Gates
	if(IsACop(playerid) && IsPlayerInRangeOfPoint(playerid, 6, 1544.7363,-1627.0232,13.3672)) // SAPD Barrier
	{
	    if(!SAPDBarrierStatus)
	    {
	        SAPDBarrierStatus = 1;
	        MoveDynamicObject(SAPDBarrier, 1544.6943359375, -1630.73046875, 13.27956199646+0.0001, 0.0002, 0, 0, 90);
	    }
	    else
	    {
	        SAPDBarrierStatus = 0;
	        MoveDynamicObject(SAPDBarrier, 1544.6943359375, -1630.73046875, 13.27956199646-0.0001, 0.0003, 0, 90, 90);
	    }
	    return 1;
	}
	else if(IsACop(playerid) && IsPlayerInRangeOfPoint(playerid, 7, 1588.4501,-1638.5692,13.3672)) // SAPD Gate
	{
	   	if(!SAPDGateStatus)
	    {
	        SAPDGateStatus = 1;
	        MoveDynamicObject(SAPDGate, 1588.6501464844, -1638.0750732422, 6.2343215942383, 3);
	    }
	    else
	    {
	        SAPDGateStatus = 0;
	        MoveDynamicObject(SAPDGate, 1588.6428222656, -1638.02734375, 15.240161895752, 3);
	    }
	    return 1;
	}
	else if(IsAReporter(playerid) && IsPlayerInRangeOfPoint(playerid, 6, 778.0338,-1385.0182,13.7254)) // NA Gate 1
	{
	    if(!SAGateStatus1)
	    {
	        SAGateStatus1 = 1;
	        MoveDynamicObject(SAGate1, 770.497985, -1384.939453, 14.392275, 3);
	    }
	    else
	    {
	        SAGateStatus1 = 0;
	        MoveDynamicObject(SAGate1, 777.457580, -1384.939453, 14.392275, 3);
	    }
	}
	else if(IsAReporter(playerid) && IsPlayerInRangeOfPoint(playerid, 6, 777.5819,-1330.1381,13.5500)) // NA Gate 2
	{
	    if(!SAGateStatus2)
	    {
	        SAGateStatus2 = 1;
	        MoveDynamicObject(SAGate2, 783.026306, -1330.353393, 14.167037, 3);
	    }
	    else
	    {
	        SAGateStatus2 = 0;
	        MoveDynamicObject(SAGate2, 778.548583, -1330.212890, 14.167037, 3);
	    }
	}
	else SendClientMessage(playerid, COLOR_GREY, "You aren't near a gate you can open.");
	return 1;
}

CMD:door(playerid, params[])
{
	new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an SAPD Oficer.");
	if(IsPlayerInRangeOfPoint(playerid, 3, 246.381317,72.578338,1003.706604) || IsPlayerInRangeOfPoint(playerid, 3, 246.381317,72.292190,1003.706604))
	{
	    if(!SAPDLobbyStatus) // SAPD LOBBY
	    {
	        MoveDynamicObject(SAPDLobby[0], 247.3080, 72.3000, 1003.6700, 1.50);
	    	MoveDynamicObject(SAPDLobby[1], 245.480, 72.5750, 1003.6650, 1.50);
	    	MoveDynamicObject(SAPDLobby[2], 247.888, 72.4500, 1003.7000, 1.50);
	    	MoveDynamicObject(SAPDLobby[3], 244.908, 72.4500, 1003.7000, 1.50);
	    	format(string, sizeof(string), "* %s puts their finger on the scanner and opens the lobby door.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        SAPDLobbyStatus = 1;
         	SetTimer("SAPDLobbyTimer", 3000, false);
	    }
	    else if(SAPDLobbyStatus)
	    {
	    	MoveDynamicObject(SAPDLobby[0], 246.4050, 72.3000, 1003.6700, 1.50);
	    	MoveDynamicObject(SAPDLobby[1], 246.4050, 72.5750, 1003.6650, 1.50);
	    	MoveDynamicObject(SAPDLobby[2], 246.9850, 72.4500, 1003.7000, 1.50);
	    	MoveDynamicObject(SAPDLobby[3], 245.8330, 72.4500, 1003.7000, 1.50);
			format(string, sizeof(string), "* %s %s puts their finger on the scanner and closes the lobby door.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SAPDLobbyStatus = 0;
	    }
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3, 259.105194,90.812126,1002.584350) || IsPlayerInRangeOfPoint(playerid, 3, 258.843353,90.840599,1002.584350))
	{
	    if(!SAPDCellsStatus) // SAPD CELLS
	    {
	        MoveDynamicObject(SAPDCells[0], 259.105194,91.844230,1002.584350, 1.50);
	    	MoveDynamicObject(SAPDCells[1], 258.843353,89.812141,1002.584350, 1.50);
	    	MoveDynamicObject(SAPDCells[2], 258.949157,92.435539,1002.528625, 1.50);
	    	MoveDynamicObject(SAPDCells[3], 258.949157,89.254486,1002.528625, 1.50);
	    	format(string, sizeof(string), "* %s puts their finger on the scanner and opens the cells door.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        SAPDCellsStatus = 1;
         	SetTimer("SAPDCellsTimer", 3000, false);
	    }
	    else if(SAPDCellsStatus)
	    {
	    	MoveDynamicObject(SAPDCells[0], 259.105194,90.812126,1002.584350, 1.50);
	    	MoveDynamicObject(SAPDCells[1], 258.843353,90.840599,1002.584350, 1.50);
	    	MoveDynamicObject(SAPDCells[2], 258.949157,91.412040,1002.528625, 1.50);
	    	MoveDynamicObject(SAPDCells[3], 258.949157,90.292076,1002.528625, 1.50);
			format(string, sizeof(string), "* %s puts their finger on the scanner and closes the cells door.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SAPDCellsStatus = 0;
	    }
	}
	else if(IsPlayerInRangeOfPoint(playerid, 0.7, 255.494674,85.290985,1002.445312)) // SAPD Cells Office Left
	{
	    if(!SAPDOfficeStatus[0])
	    {
	        SAPDOfficeStatus[0] = 1;
	        MoveDynamicObject(SAPDOffice[0], 255.494674,85.290985,1005.445312, 3, 0, 0, 0);
	    }
	    else if(SAPDOfficeStatus[0])
	    {
	        SAPDOfficeStatus[0] = 0;
	        MoveDynamicObject(SAPDOffice[0], 255.494674,85.290985,1002.445312, 3, 0, 0, 0);
	    }
	}
	else if(IsPlayerInRangeOfPoint(playerid, 0.7, 254.380661,85.286033,1002.445312)) // SAPD Cells Office Right
	{
		if(!SAPDOfficeStatus[1])
	    {
	        SAPDOfficeStatus[1] = 1;
	        MoveDynamicObject(SAPDOffice[1], 254.380661,85.286033,1005.445312, 3, 0, 0, 180);
	    }
	    else if(SAPDOfficeStatus[1])
	    {
	        SAPDOfficeStatus[1] = 0;
	        MoveDynamicObject(SAPDOffice[1], 254.380661,85.286033,1002.445312, 3, 0, 0, 180);
	    }
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3, 222.1266,69.7867,1005.0391))
	{
	    if(!PlayerInfo[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not the SAPD Chief.");
	    if(!SAPDChiefStatus) // Chief's Office
	    {
	       	MoveDynamicObject(SAPDChief[0], 222.331802,70.714004,1005.079895, 1.50);
	    	MoveDynamicObject(SAPDChief[1], 222.002853,68.871803,1005.072875, 1.50);
         	MoveDynamicObject(SAPDChief[2], 222.120773,71.322158,1005.128601, 1.50);
	    	MoveDynamicObject(SAPDChief[3], 222.120773,68.324714,1005.128601, 1.50);
	    	format(string, sizeof(string), "* %s puts their finger on the scanner and opens the office door.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        SAPDChiefStatus = 1;
	    }
	    else if(SAPDChiefStatus)
	    {
	    	MoveDynamicObject(SAPDChief[0], 222.281802,69.786598,1005.079895, 1.50);
	    	MoveDynamicObject(SAPDChief[1], 222.002853,69.801109,1005.072875, 1.50);
	    	MoveDynamicObject(SAPDChief[2], 222.120773,70.343833,1005.128601, 1.50);
	    	MoveDynamicObject(SAPDChief[3], 222.120773,69.220504,1005.128601, 1.50);
			format(string, sizeof(string), "* %s puts their finger on the scanner and closes the office door.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SAPDChiefStatus = 0;
	    }
	}
	else
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not near a door you can open.");
	}
	return 1;
}


CMD:frisk(playerid, params[])
{
	new playerb, string[128], weaps, weapons[13][2];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	//if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an SAPD Oficer.");
	if(sscanf(params,"u",playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /frisk [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsPlayerNearPlayer(playerid, playerb, 3)) return SendClientMessage(playerid, COLOR_GREY, "You can't frisk someone from that distance.");
	if(!IsPlayerCuffed(playerb) && !Tied[playerb] && GetPlayerSpecialAction(playerb) != SPECIAL_ACTION_HANDSUP) return SendClientMessage(playerid, COLOR_GREY, "Player is not cuffed, tied nor has their hands up.");
	SendClientMessage(playerid, COLOR_GREEN, "____________________________");
	format(string, sizeof(string), "*** %s's Items ***", RPN(playerb));
	SendClientMessage(playerid, COLOR_ORANGE, string);
	format(string, sizeof(string), " Money ($%d)", PlayerInfo[playerb][pMoney]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	if(PlayerInfo[playerb][pMaterials]) {format(string, sizeof(string), " Materials (%d)", PlayerInfo[playerb][pMaterials]); SendClientMessage(playerid, COLOR_WHITE, string);}
	if(PlayerInfo[playerb][pWeed]) {format(string, sizeof(string), " Weed (%d)", PlayerInfo[playerb][pWeed]); SendClientMessage(playerid, COLOR_WHITE, string);}
	if(PlayerInfo[playerb][pCrack]) {format(string, sizeof(string), " Crack(%d)", PlayerInfo[playerb][pCrack]); SendClientMessage(playerid, COLOR_WHITE, string);}
	format(string, sizeof(string), "*** %s's Weapons ***", RPN(playerb));
	SendClientMessage(playerid, COLOR_ORANGE, string);
	for(new i=0; i<13; i++)
	{
       	GetPlayerWeaponData(playerb, i, weapons[i][0], weapons[i][1]);
        if(weapons[i][0] != PlayerInfo[playerb][pWeapon][i] && weapons[i][1] != 0)
        {
	        format(string, sizeof(string), " %s (Ammo: %d) (Hacked)", RWN(weapons[i][0]), weapons[i][1]);
	        SendClientMessage(playerid, COLOR_MEDIC, string);
	        weaps++;
        }
        else if(weapons[i][0] == PlayerInfo[playerb][pWeapon][i] && weapons[i][0] != 0)
        {
            format(string, sizeof(string), " %s (Ammo: %d)", RWN(PlayerInfo[playerb][pWeapon][i]), weapons[i][1]);
	        SendClientMessage(playerid, COLOR_MEDIC, string);
	        weaps++;
        }
	}
	if(weaps == 0) return SendClientMessage(playerid, COLOR_MEDIC, "None");
	format(string, sizeof(string), "* %s has frisked %s.", RPN(playerid), RPN(playerb));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}



CMD:showbadge(playerid, params[])
{
	new playerb, string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid) && !IsAGov(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an SAPD Oficer/Government Official.");
	if(sscanf(params,"u",playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /showbadge [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsPlayerNearPlayer(playerid, playerb, 5)) return SendClientMessage(playerid, COLOR_GREY, "You can't flash your badge to someone from that distance.");
	if(IsACop(playerid)) SendClientMessage(playerb, COLOR_BLUE, "[San Andreas Police Department]");
	else if(IsAGov(playerid)) SendClientMessage(playerb, COLOR_BLUE, "[San Andreas Government]");
	format(string, sizeof(string), " Name: {FFFFFF}%s", RPN(playerid));
	SendClientMessage(playerb, COLOR_BLUE, string);
	format(string, sizeof(string), " Rank: {FFFFFF}%s", RPFRN(playerid));
	SendClientMessage(playerb, COLOR_BLUE, string);
	format(string, sizeof(string), "* %s flashes their badge to %s.", RPN(playerid), RPN(playerb));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:locker(playerid, params[])
{
	new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(IsACop(playerid))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 2.2,256.2174,77.3295,1004.0344)) return SendClientMessage(playerid, COLOR_GREY, "You aren't near your locker.");
	    ShowDialog(playerid, 5);
	}
	else if(IsAGov(playerid))
	{
	    if(PlayerInfo[playerid][pFacRank] != 0) return SendClientMessage(playerid, COLOR_GREY, "Only bodyguards can access the lockers. (Rank 0)");
		if(!IsPlayerInRangeOfPoint(playerid, 2, 352.1964,173.3516,1025.7891)) return SendClientMessage(playerid, COLOR_GREY, "You aren't near your locker.");
		GiveZaiatWeapon(playerid, 29, 500);
		GiveZaiatWeapon(playerid, 24, 200);
		format(string, sizeof(string), "* %s grabs a Desert Eagel and an MP5 from the lockers.", RPN(playerid), params);
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	else if(IsAReporter(playerid))
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 2, 1203.1322,-751.8103,1073.1819)) return SendClientMessage(playerid, COLOR_GREY, "You aren't near your locker.");
		ShowDialog(playerid, 27);
	}
	else SendClientMessage(playerid, COLOR_GREY, "You are not near a locker you can open.");
	return 1;
}

CMD:gov(playerid, params[])
{
	new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid) && !IsAGov(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an SAPD Officer/Government Official.");
	if(!PlayerInfo[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not a faction leader.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/gov)ernment announcement [text]");
	if(AntiAdv(playerid, params)) return 1;
	SendClientMessageToAll(COLOR_WHITE, "|___________ Government News Announcement ___________|");
	format(string, sizeof(string), "** [%s] %s %s: %s **", RPFN(playerid), RPFRN(playerid), RPN(playerid), params);
	SendClientMessageToAll(COLOR_BLUE, string);
	return 1;
}


CMD:track(playerid, params[])
{
    new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid) && !IsAHitman(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an SAPD Oficer.");
	if(IsACop(playerid) && !PlayerInfo[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
	if(Tracking[playerid] != -1)
	{
	    playerb = Tracking[playerid];
	    Tracking[playerid] = -1;
	    SetPlayerMarkerForPlayer(playerid, playerb, GetPlayerColor(playerb));
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You shut your tracker down.");
	    return 1;
	}
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /track [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pCellphone]) return SendClientMessage(playerid, COLOR_GREY, "Player has no cellphone.");
	if(PhoneOff[playerb]) return SendClientMessage(playerid, COLOR_GREY, "Player has their phone turned off.");
	if(GetPlayerInterior(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Player is in an interior.");
	if(GetPlayerVirtualWorld(playerb) != GetPlayerVirtualWorld(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Player is in another virtual world.");
	// Tracking
    Tracking[playerid] = playerb;
    format(string, sizeof(string), " You turned your tracker on. (Tracking: %s)", RPN(playerb));
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    SetPlayerMarkerForPlayer(playerid, playerb, MARKER_LIGHTBLUE);
	return 1;
}



CMD:detain(playerid, params[])
{
	new playerb, seatid, string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an SAPD Oficer.");
	if(sscanf(params, "ui", playerb, seatid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /detain [playerid] [seatid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You can't detain someone from this disatance.");
	if(!IsPlayerCuffed(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Player is not cuffed.");
	if(!IsCruiser(LastCar[playerid])) return SendClientMessage(playerid, COLOR_GREY, "You need an SAPD crusier to detain someone in.");
	if(seatid < 2 || seatid > 3) return SendClientMessage(playerid, COLOR_GREY, "You can only detain people in seats 2 and 3.");
	PutPlayerInVehicle(playerb, LastCar[playerid], seatid);
	format(string, sizeof(string), "* %s grabs %s from their cuffs and throws him inside the SAPD cruiser.", RPN(playerid), RPN(playerb));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:cuff(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an SAPD Oficer.");
	if(!PlayerInfo[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /cuff [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
	if(!IsPlayerTazed(playerb) && GetPlayerSpecialAction(playerb) != SPECIAL_ACTION_HANDSUP) return SendClientMessage(playerid, COLOR_GREY, "Player is not tazed nor has their hands up.");
	// /me Message & Animation
	GameTextForPlayer(playerb, "~r~Cuffed", 3500, 3);
    format(string, sizeof(string), "* %s pulls a pair of steel cuffs from their belt and puts %s's hands inside them.", RPN(playerid), RPN(playerb));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	ClearAnimations(playerb);
	//ApplyAnimation(playerb,"ped","cower",1,1,0,0,0,0,1);
	// Custom Freeze
	TogglePlayerControllable(playerb, 0);
	//ApplyAnimation(playerb,"ped","cower",1,1,0,0,0,0,1);
	SetPlayerAttachedObject(playerb, 0, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
    SetPlayerSpecialAction(playerb,SPECIAL_ACTION_CUFFED);
	// Tazed Setting
	TogglePlayerTazed(playerb, 0);
	TogglePlayerCuffed(playerb, 1);
	// Cuff Timeout
	CuffTimeout[playerb] = 300;
	KillTimer(TazeCountDown[playerb]);
	CuffCountDown[playerb] = SetTimerEx("CuffTimer", 1000, true, "d", playerb);
	return 1;
}


CMD:uncuff(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an SAPD Oficer.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /uncuff [playerid]");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't uncuff yourself.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
	if(!IsPlayerCuffed(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Player is not cuffed");
	if(IsPlayerTied(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Player is tied.");
	CuffTimeout[playerb] = 0;
	format(string, sizeof(string), "* %s reaches to %s and uncuffs them.", RPN(playerid), RPN(playerb));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	TogglePlayerTazed(playerb, 0);
	TogglePlayerCuffed(playerb, 0);
	Uncuffed[playerb] = 1;
	KillTimer(CuffCountDown[playerid]);
	RemovePlayerAttachedObject(playerb, 0);
	SetPlayerSpecialAction(playerb, SPECIAL_ACTION_NONE);
	TogglePlayerControllable(playerb, 1);
	return 1;
}


CMD:tazer(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an SAPD Oficer.");
	if(!PlayerInfo[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GREY, "You are not on duty.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You can't use this command while being in a vehicle.");
	if(!Tazer[playerid])
	{
	    Tazer[playerid] = 1;
	    format(string, sizeof(string), "* %s takes out their tazer from their holster and loads it.", RPN(playerid));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    if(PlayerInfo[playerid][pWeapon][2] == 24)
	    {
			ReplaceTazer[playerid] = 1;
			GetPlayerWeaponData(playerid, 2, OldGun[playerid], OldAmmo[playerid]);
			SendClientMessage(playerid, COLOR_WHITE, "Your desert eagle will be given back when you holster your tazer.");
	    }
	    GunsBeingRemoved[playerid] = 1;
	    RemoveZaiatWeapon(playerid, 24);
	    GunsBeingRemoved[playerid] = 1;
	    GiveZaiatWeapon(playerid, 23, 500);
	    GunsBeingRemoved[playerid] = 1;
    }
    else
    {
        Tazer[playerid] = 0;
        RemoveZaiatWeapon(playerid, 23);
   		format(string, sizeof(string), "* %s unloads their tazer and puts it back to their holster.", RPN(playerid));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    if(ReplaceTazer[playerid])
        {

            ReplaceTazer[playerid] = 0;
            GunsBeingRemoved[playerid] = 1;
            GiveZaiatWeapon(playerid, OldGun[playerid], OldAmmo[playerid]);
            GunsBeingRemoved[playerid] = 1;
            OldGun[playerid] = 0;
            OldAmmo[playerid] = 0;
            SendClientMessage(playerid, COLOR_WHITE, "You have recieved your desert eagle back as you've holstered your tazer.");
        }
    }
	return 1;
}

CMD:next(playerid, params[])
{
	new family = PlayerInfo[playerid][pFam];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!fskin[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not choosing a family skin.");
	if(pskin[playerid] >= 6)
	{
		pskin[playerid] = 0;
		SetPlayerSkin(playerid, FamInfo[family][fSkins][pskin[playerid]]);
	}
	else
	{
		SetPlayerSkin(playerid, FamInfo[family][fSkins][pskin[playerid]+1]);
		pskin[playerid] ++;
	}
	return 1;
}

CMD:done(playerid, params[])
{
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!fskin[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not choosing a family skin.");
    if(GetPlayerSkin(playerid) == 0) return SendClientMessage(playerid, COLOR_GREY, "This skin slot is empty, choose another one.");
	PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have chosen your family skin.");
	fskin[playerid] = 0; pskin[playerid] = 0;
    TogglePlayerControllable(playerid, 1);
    return 1;
}


CMD:accept(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[128]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /accept [option]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: faction | materials | weapon");
		return 1;
	}
	if(!strcmp(params, "faction", true))
	{
	    if(!Invited[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You haven't been invited to a faction.");
	    {
			PlayerInfo[playerid][pFac] = Faction[playerid];
			PlayerInfo[playerid][pFacRank] = 0;
			PlayerInfo[playerid][pFacLeader] = 0;
			PlayerInfo[playerid][pFacDiv] = 0;
			PlayerInfo[playerid][pFacDivLeader] = 0;
			Invited[playerid] = 0;
			Faction[playerid] = 0;
			format(string, sizeof(string), " You have accepted %s's invitation to join the {33AA33}%s {33CCFF}faction.", RPN(Inviter[playerid]), RPFNEx(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), " %s has accepted your faction invitation.", RPN(playerid));
			SendClientMessage(Inviter[playerid], COLOR_LIGHTBLUE, string);
			return 1;
	    }
	}
	else if(!strcmp(params, "family", true))
	{
	    if(!fInvited[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You haven't been invited to a family.");
	    {
	        new idx = Family[playerid];
			PlayerInfo[playerid][pFam] = Family[playerid];
			PlayerInfo[playerid][pFamRank] = 1;
			FamInfo[idx][fMembers] ++;
			fInvited[playerid] = 0;
			Family[playerid] = 0;
			format(string, sizeof(string), " You have accepted %s's invitation to join the {33AA33}%s {33CCFF}family.", RPN(fInviter[playerid]), FamInfo[idx][fName]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), " %s has accepted your family invitation.", RPN(playerid));
			SendClientMessage(fInviter[playerid], COLOR_LIGHTBLUE, string);
			TogglePlayerControllable(playerid, 0);
			new family = PlayerInfo[playerid][pFam]; fskin[playerid] = 1; pskin[playerid] = 0;
			SetPlayerSkin(playerid, FamInfo[family][fSkins][0]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, " Type /next for the next family skin, type /done to choose a skin.");
			return 1;
	    }
	}
	else if(!strcmp(params, "materials", true))
	{
	    if(BeenOfferedMaterials[playerid])
	    {
			new playerb = BuyMaterialsFrom[playerid];
		    new amount = BuyMaterialsAmount[playerid];
		    new price = BuyMaterialsPrice[playerid];
		    if(PlayerInfo[playerb][pMaterials] < amount)
			{
			    SellMaterialsTo[playerb] = -1;
				BuyMaterialsFrom[playerid] = -1;
				BuyMaterialsAmount[playerid] = 0;
				BuyMaterialsPrice[playerid] = 0;
				BeenOfferedMaterials[playerid] = 0;
				SendClientMessage(playerid, COLOR_GREY, "That player doesn't have that much materials on them.");
				SendClientMessage(playerb, COLOR_GREY, "The trade has been cancelled as you don't have the materials you offered.");
				return 1;
			}
			if(PlayerInfo[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much on you right now.");
			if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
			PlayerInfo[playerid][pMaterials] += amount;
			PlayerInfo[playerb][pMaterials] -= amount;
			GiveZaiatMoney(playerid, -price);
			GiveZaiatMoney(playerb, price);
			format(string, sizeof(string), "* %s takes out a bag of materials, hands it to %s and takes $%d from him", RPN(playerb), RPN(playerid), price);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			format(string, sizeof(string), " You have bought %d materials for $%d from %s.", amount, price, RPN(playerb));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), " %s has bought %d materials for $%d from you.", RPN(playerid), amount, price);
			SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
			SellMaterialsTo[playerb] = -1;
			BuyMaterialsFrom[playerid] = -1;
			BuyMaterialsAmount[playerid] = 0;
			BuyMaterialsPrice[playerid] = 0;
			BeenOfferedMaterials[playerid] = 0;
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Nobody has offered to sell you materials.");
		    return 1;
		}
	}
	else if(!strcmp(params, "weapon", true))
	{
	    if(BeenOfferedWeapon[playerid])
	    {
			new playerb = BuyWeaponFrom[playerid], price = BuyWeaponPrice[playerid], materials;
		    if(PlayerInfo[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much on you right now.");
			if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
			// Seller Materials
			if(BeenOfferedWeapon[playerid] == 14) materials = 25;
			else if(BeenOfferedWeapon[playerid] == 2) materials = 50;
			else if(BeenOfferedWeapon[playerid] == 6) materials = 50;
			else if(BeenOfferedWeapon[playerid] == 5) materials = 50;
			else if(BeenOfferedWeapon[playerid] == 8) materials = 50;
			else if(BeenOfferedWeapon[playerid] == 23) materials = 100;
			else if(BeenOfferedWeapon[playerid] == 25) materials = 200;
			else if(BeenOfferedWeapon[playerid] == 29) materials = 500;
			else if(BeenOfferedWeapon[playerid] == 33) materials = 750;
			else if(BeenOfferedWeapon[playerid] == 24) materials = 2000;
			else if(BeenOfferedWeapon[playerid] == 30) materials = 4000;
			else if(BeenOfferedWeapon[playerid] == 31) materials = 4500;
			else if(BeenOfferedWeapon[playerid] == 27) materials = 6500;
			else if(BeenOfferedWeapon[playerid] == 34) materials = 7000;

			// The deal
			if(PlayerInfo[playerb][pMaterials] < materials)
			{
			    SellWeaponTo[playerb] = -1;
				BuyWeaponFrom[playerid] = -1;
				BuyWeaponPrice[playerid] = 0;
				BeenOfferedWeapon[playerid] = 0;
				SendClientMessage(playerid, COLOR_GREY, "That player doesn't have the materials needed for that weapon");
				SendClientMessage(playerb, COLOR_GREY, "The trade has been cancelled as you don't have enough materials for the weapon you offered.");
			    return 1;
			}
			PlayerInfo[playerb][pJobSkill][JOB_WDEALER] ++;
			GiveZaiatMoney(playerid, -price);
			GiveZaiatMoney(playerb, price);
			PlayerInfo[playerb][pMaterials] -= materials;
			GiveZaiatWeapon(playerid, BeenOfferedWeapon[playerid], 5);
			format(string, sizeof(string), "* %s takes out a %s, hands it to %s and takes $%d from him", RPN(playerb), RWN(BeenOfferedWeapon[playerid]), RPN(playerid), price);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			format(string, sizeof(string), " You have bought a %s for $%d from %s.", RWN(BeenOfferedWeapon[playerid]), price, RPN(playerb));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), " %s has bought a %s for $%d from you.", RPN(playerid), RWN(BeenOfferedWeapon[playerid]), price);
			SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
			SellWeaponTo[playerb] = -1;
			BuyWeaponFrom[playerid] = -1;
			BuyWeaponPrice[playerid] = 0;
			BeenOfferedWeapon[playerid] = 0;
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Nobody has offered to sell you a weapon.");
		    return 1;
		}
	}
	else if(!strcmp(params, "free", true))
	{
		if(!PlayerInfo[playerid][pPrison]) return SendClientMessage(playerid, COLOR_GREY, "You are not prisoned.");
		if(FreeBy[playerid] == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered to free you.");
		GiveZaiatMoney(playerid, -FreePrice[FreeBy[playerid]][playerid]);
		GiveZaiatMoney(FreeBy[playerid], FreePrice[FreeBy[playerid]][playerid]);
		PlayerInfo[FreeBy[playerid]][pJobSkill][JOB_LAWYER] ++;
		FreeTimeout[FreeBy[playerid]] = 60;
		if(PlayerInfo[playerid][pMoney] < FreePrice[FreeBy[playerid]][playerid]) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		PlayerInfo[playerid][pPrisonTime] -= FreeTime[playerid]*60;
		SetTimerEx("FreeTimer", 1000, false, "i", FreeBy[playerid]);
		format(string, sizeof(string), " Lawyer %s has reduced your prison sentence by %d for $%d.", RPN(FreeBy[playerid]), FreeTime[playerid], FreePrice[FreeBy[playerid]][playerid]);
		SendClientMessage(playerid, COLOR_LIME, string);
		format(string, sizeof(string), " You have reduced %s's prison sentence by %d for $%d.", RPN(playerid), FreeTime[playerid], FreePrice[FreeBy[playerid]][playerid]);
	    SendClientMessage(FreeBy[playerid], COLOR_LIME, string);
	    FreePrice[FreeBy[playerid]][playerid] = 0;
		FreeBy[playerid] = -1;
		FreeTime[playerid] = 0;
		return 1;
	}
	else if(!strcmp(params, "defend", true))
	{
		new playerb = DefendBy[playerid];
		if(!PlayerInfo[playerid][pWanted]) return SendClientMessage(playerid, COLOR_GREY, "You are not wanted.");
		if(playerb == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered to defend you.");
		GiveZaiatMoney(playerid, -DefendPrice[playerb][playerid]);
		GiveZaiatMoney(playerb, DefendPrice[playerb][playerid]);
		PlayerInfo[playerb][pJobSkill][JOB_LAWYER] ++;
		DefendTimeout[DefendBy[playerid]] = 60;
		if(PlayerInfo[playerid][pMoney] < DefendPrice[playerb][playerid]) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		PlayerInfo[playerid][pWanted] --;
		SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)-1);
		SetTimerEx("DefendTimer", 1000, false, "i", playerb);
		format(string, sizeof(string), " Lawyer %s has defended you for one crime for $%d.", RPN(playerb), DefendPrice[playerb][playerid]);
		SendClientMessage(playerid, COLOR_LIME, string);
		format(string, sizeof(string), " You have defended %s's for one crime $%d.", RPN(playerid), DefendPrice[playerb][playerid]);
	    SendClientMessage(playerb, COLOR_LIME, string);
        DefendPrice[playerb][playerid] = 0;
		DefendBy[playerid] = -1;
		return 1;
	}
	else if(!strcmp(params, "weed", true))
	{
		new seller = WeedSeller[playerid];
		if(seller == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered to sell you weed.");
		if(!IsPlayerNearPlayer(playerid, seller, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
	    if(PlayerInfo[seller][pWeed] < WeedAmount[seller][playerid])
		{
		    WeedSeller[playerid] = -1;
			WeedPrice[seller][playerid] = 0;
			WeedAmount[seller][playerid] = 0;
			SendClientMessage(playerid, COLOR_GREY, "That player doesn't have that much weed on them.");
			SendClientMessage(seller, COLOR_GREY, "The trade has been cancelled as you don't have the weed you offered.");
			return 1;
		}
		if(WeedPrice[seller][playerid] > PlayerInfo[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		GiveZaiatMoney(playerid, -WeedPrice[seller][playerid]);
		GiveZaiatMoney(seller, WeedPrice[seller][playerid]);
		PlayerInfo[seller][pWeed] -= WeedAmount[seller][playerid];
		PlayerInfo[playerid][pWeed] += WeedAmount[seller][playerid];
		PlayerInfo[seller][pJobSkill][JOB_DDEALER] ++;
		format(string, sizeof(string), "* %s takes out a pack of weed, hands it to %s and takes $%d from him", RPN(seller), RPN(playerid), WeedPrice[seller][playerid]);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), " You have bought %d grams of weed $%d from %s.", WeedAmount[seller][playerid], WeedPrice[seller][playerid], RPN(seller));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), " %s has bought %d grams of weed for $%d from you.", RPN(playerid), WeedAmount[seller][playerid], WeedPrice[seller][playerid]);
		SendClientMessage(seller, COLOR_LIGHTBLUE, string);
		WeedSeller[playerid] = -1;
		WeedPrice[seller][playerid] = 0;
		WeedAmount[seller][playerid] = 0;
	}
	else if(!strcmp(params, "crack", true))
	{
		new seller = CrackSeller[playerid];
		if(seller == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered to sell you crack.");
		if(!IsPlayerNearPlayer(playerid, seller, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
	    if(PlayerInfo[seller][pCrack] < CrackAmount[seller][playerid])
		{
		    CrackSeller[playerid] = -1;
			CrackPrice[seller][playerid] = 0;
			CrackAmount[seller][playerid] = 0;
			SendClientMessage(playerid, COLOR_GREY, "That player doesn't have that much crack on them.");
			SendClientMessage(seller, COLOR_GREY, "The trade has been cancelled as you don't have the crack you offered.");
			return 1;
		}
		if(CrackPrice[seller][playerid] > PlayerInfo[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		GiveZaiatMoney(playerid, -CrackPrice[seller][playerid]);
		GiveZaiatMoney(seller, CrackPrice[seller][playerid]);
		PlayerInfo[seller][pCrack] -= CrackAmount[seller][playerid];
		PlayerInfo[playerid][pCrack] += CrackAmount[seller][playerid];
		PlayerInfo[seller][pJobSkill][JOB_DDEALER] ++;
		format(string, sizeof(string), "* %s takes out a pack of crack, hands it to %s and takes $%d from him", RPN(seller), RPN(playerid), CrackPrice[seller][playerid]);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), " You have bought %d grams of crack $%d from %s.", CrackAmount[seller][playerid], CrackPrice[seller][playerid], RPN(seller));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), " %s has bought %d grams of crack for $%d from you.", RPN(playerid), CrackAmount[seller][playerid], CrackPrice[seller][playerid]);
		SendClientMessage(seller, COLOR_LIGHTBLUE, string);
		CrackSeller[playerid] = -1;
		CrackPrice[seller][playerid] = 0;
		CrackAmount[seller][playerid] = 0;
	}
	else if(!strcmp(params, "ticket", true))
	{
		new playerb = TicketBy[playerid];
		if(playerb == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has written you a ticket.");
	    new amount = TicketPrice[playerb][playerid];
	    if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
		if(PlayerInfo[playerid][pMoney] < amount) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
		GiveZaiatMoney(playerid, -amount);
		GiveZaiatMoney(playerb, amount);
		format(string, sizeof(string), "* %s takes the ticket from %s and gives him some money.", RPN(playerid), RPN(playerb));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), " You have paid $%d to %s for the ticket.", amount, RPN(playerb));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), " %s has paid $%d to you for the ticket.", RPN(playerid), amount);
		SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
		TicketBy[playerid] = -1;
		TicketPrice[playerb][playerid] = 0;
	}
	else if(!strcmp(params, "vest", true))
	{
	    new playerb = VestBy[playerid], Float:A;
        if(playerb == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered you a vest.");
        if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
   		if(Boxing[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You can't buy a vest in a boxing match.");
        new price = VestPrice[playerb][playerid];
        if(PlayerInfo[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
        if(A > 50)
		{
			SendClientMessage(playerid, COLOR_GREY, "Your armor is already over 50.");
			SendClientMessage(playerb, COLOR_GREY, "Player's vest is already over 50, your offer has been cancelled.");
			VestPrice[playerb][playerid] = 0;
			VestBy[playerb] = -1;
			return 1;
		}
		GetPlayerArmour(playerid, A);
		GiveZaiatMoney(playerid, -price);
		GiveZaiatMoney(playerb, price);
		SetPlayerArmour(playerid, 50);
		format(string, sizeof(string), " You have paid $%d to %s for the vest.", price, RPN(playerb));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), " %s has paid $%d to you for the vest.", RPN(playerid), price);
		SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	    VestPrice[playerb][playerid] = 0;
		VestBy[playerb] = -1;
	}
	else if(!strcmp(params, "fight", true))
	{
	    if(GetPlayerSkin(playerid) != 80 && GetPlayerSkin(playerid) != 81) return SendClientMessage(playerid, COLOR_GREY, "You are not wearing a boxing uniform.");
        if(GetPlayerFightingStyle(playerid) != FIGHT_STYLE_BOXING) return SendClientMessage(playerid, COLOR_GREY, "You must use the boxing fighting style to fight.");
		new playerb = BoxBy[playerid];
		if(playerb == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered you a fight.");
		if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
		if(BoxingMatch) return SendClientMessage(playerid, COLOR_GREY, "Another boxing match is going on.");
		// Setting Boxers
		Boxer[1] = playerb;
		pBoxer[playerb] = 1;
		Boxer[2] = playerid;
		pBoxer[playerid] = 2;
		// Setting them to boxing
		Boxing[playerb] = 1;
		Boxing[playerid] = 1;
		// Ending the boxing offer
		BoxBy[playerb] = -1;
		BoxBy[playerid] = -1;
		// Setting Their HP & Armor
		SetPlayerHealth(playerb, 100);
		SetPlayerArmour(playerb, 0);
		SetPlayerHealth(playerid, 100);
		SetPlayerArmour(playerid, 0);
		// Setting their positions
		SetPlayerPos(playerb, 763.1202,2.4917,1001.5942); // Boxer 1 spot
		SetPlayerFacingAngle(playerb, 136.4230);
		SetCameraBehindPlayer(playerb);
	    SetPlayerPos(playerid, 758.5969,-1.9768,1001.5942); // Boxer 2 spot
	    SetPlayerFacingAngle(playerid, 315.0247);
	    SetCameraBehindPlayer(playerid);
	    // Freezing them
	    TogglePlayerControllable(playerb, 0);
		TogglePlayerControllable(playerid, 0);
		// Setting global box countdown
		BoxTime = 40;
		BoxingMatch = 1;
		// Timer to unfreeze them
		SetTimerEx("BoxCountDown", 1000, false, "ii", playerid, playerb);
		// Global Message
		SendClientMessageToAll(COLOR_WHITE, "Boxing News: A boxing match is starting in 40 seconds, place your bets in ganton gym.");
		// Removing Weapons
		SendClientMessage(playerb, COLOR_LIGHTRED, " You will recieve your weapons after the match.");
		SendClientMessage(playerid, COLOR_LIGHTRED, " You will recieve your weapons after the match.");
	}
	else if(!strcmp(params, "live", true))
	{
		new playerb = LiveBy[playerid];
		if(playerb == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered you a live news conference.");
		LiveBy[playerid] = -1;
		LiveRequest[playerb] = 0;
		Live[playerid] = 1;
		Live[playerb] = 1;
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "You are now on air, you can speak on live news using your normal chat.");
		SendClientMessage(playerb, COLOR_LIGHTBLUE, "You are now on air, you can speak on live news using your normal chat. (/live to end the conference)");
	}
	return 1;
}


CMD:cancel(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[128]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /cancel [option]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: faction | materials");
		return 1;
	}
	if(!strcmp(params, "faction", true))
	{
	    if(!Invited[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You haven't been invited to a faction.");
	    {
			PlayerInfo[playerid][pFac] = 0;
			PlayerInfo[playerid][pFacRank] = 0;
			PlayerInfo[playerid][pFacLeader] = 0;
			PlayerInfo[playerid][pFacDiv] = 0;
			PlayerInfo[playerid][pFacDivLeader] = 0;
			Invited[playerid] = 0;
			Faction[playerid] = 0;
			format(string, sizeof(string), " You have cancelled %s's faction invitation.", RPN(Inviter[playerid]));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), " %s has cancelled your faction invitation.", RPN(playerid));
			SendClientMessage(Inviter[playerid], COLOR_LIGHTBLUE, string);
	    }
	}
	else if(!strcmp(params, "family", true))
	{
	    if(!fInvited[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You haven't been invited to a family.");
	    {
			PlayerInfo[playerid][pFam] = 0;
			PlayerInfo[playerid][pFamRank] = 0;
			fInvited[playerid] = 0;
			Family[playerid] = 0;
			format(string, sizeof(string), " You have cancelled %s's family invitation.", RPN(fInviter[playerid]));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), " %s has cancelled your family invitation.", RPN(playerid));
			SendClientMessage(fInviter[playerid], COLOR_LIGHTBLUE, string);
	    }
	}
	else if(!strcmp(params, "materials", true))
	{
	    if(BeenOfferedMaterials[playerid])
	    {
			new playerb = BuyMaterialsFrom[playerid];
			if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
			format(string, sizeof(string), " You have cancelled %d's materials offer.", RPN(playerb));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), " %s has cancelled your materials offer.", RPN(playerid));
			SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
			SellMaterialsTo[playerb] = -1;
			BuyMaterialsFrom[playerid] = -1;
			BuyMaterialsAmount[playerid] = 0;
			BuyMaterialsPrice[playerid] = 0;
			BeenOfferedMaterials[playerid] = 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Nobody has offered to sell you materials.");
		    return 1;
		}
	}
	else if(!strcmp(params, "weapon", true))
	{
		if(BeenOfferedWeapon[playerid])
	    {
			new playerb = BuyWeaponFrom[playerid];
			if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
			format(string, sizeof(string), " You have cancelled %s's weapon offer.", RPN(playerb));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), " %s has cancelled your weapon offer.", RPN(playerid));
			SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
			SellWeaponTo[playerb] = -1;
			BuyWeaponFrom[playerid] = -1;
			BuyWeaponPrice[playerid] = 0;
			BeenOfferedWeapon[playerid] = 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Nobody has offered to sell you a weapon.");
		    return 1;
		}
	}
	else if(!strcmp(params, "free", true))
	{
		if(!PlayerInfo[playerid][pPrison]) return SendClientMessage(playerid, COLOR_GREY, "You are not prisoned.");
		if(FreeBy[playerid] == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered to free you.");
		format(string, sizeof(string), " You have cancelled %s's prison sentence reducing offer.", RPN(FreeBy[playerid]));
		SendClientMessage(playerid, COLOR_LIME, string);
		format(string, sizeof(string), " %s has cancelled your prison sentence reducing offer.", RPN(playerid));
	    SendClientMessage(FreeBy[playerid], COLOR_LIME, string);
		FreeTime[playerid] = 0;
		FreePrice[FreeBy[playerid]][playerid] = 0;
		FreeBy[playerid] = -1;
	}
	else if(!strcmp(params, "defend", true))
	{
		if(!PlayerInfo[playerid][pWanted]) return SendClientMessage(playerid, COLOR_GREY, "You are not wanted.");
		if(DefendBy[playerid] == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered to defend you.");
		format(string, sizeof(string), " You have cancelled %s's defend offer.", RPN(DefendBy[playerid]));
		SendClientMessage(playerid, COLOR_LIME, string);
		format(string, sizeof(string), " %s has cancelled your defend request.", RPN(playerid));
	    SendClientMessage(DefendBy[playerid], COLOR_LIME, string);
		DefendPrice[DefendBy[playerid]][playerid] = 0;
		DefendBy[playerid] = -1;
	}
	else if(!strcmp(params, "weed", true))
	{
		new seller = WeedSeller[playerid];
		if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
		if(seller == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered to sell you weed.");
		format(string, sizeof(string), " You have cancelled %s's weed offer.", RPN(seller));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), " %s has cancelled your weed offer.", RPN(playerid));
		SendClientMessage(seller, COLOR_LIGHTBLUE, string);
		WeedSeller[playerid] = -1;
		WeedPrice[seller][playerid] = 0;
		WeedAmount[seller][playerid] = 0;
	}
    else if(!strcmp(params, "crack", true))
	{
		new seller = CrackSeller[playerid];
		if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
		if(seller == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered to sell you crack.");
		format(string, sizeof(string), " You have cancelled %s's crack offer.", RPN(seller));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), " %s has cancelled your crack offer.", RPN(playerid));
		SendClientMessage(seller, COLOR_LIGHTBLUE, string);
		CrackSeller[playerid] = -1;
		CrackPrice[seller][playerid] = 0;
		CrackAmount[seller][playerid] = 0;
	}
	else if(!strcmp(params, "contract", true))
	{
		if(IsAHitman(playerid))
		{
    	   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
			if(Hitman[playerid] == -1) return SendClientMessage(playerid, COLOR_GREY, "You are not assigned to any contracts.");
			format(string, sizeof(string), "HitmanWarn: %s has cancelled their contract assignment on %s's head.", RPN(playerid), RPN(Hitman[playerid]));
			SendHitmanMessage(COLOR_YELLOW, string);
			Hitman[playerid] = -1;
		}
	}
	else if(!strcmp(params, "vest", true))
	{
	    new playerb = VestBy[playerid];
	    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
        if(playerb == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered you a vest.");
        if(!IsPlayerNearPlayer(playerid, playerb, 2)) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from that player.");
		format(string, sizeof(string), " You have cancelled %s's vest offer.", RPN(playerb));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), " %s has cancelled your vest offer.", RPN(playerid));
		SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	    VestPrice[playerb][playerid] = 0;
		VestBy[playerb] = -1;
	}
	else if(!strcmp(params, "fight", true))
	{
		new playerb = BoxBy[playerid];
		if(playerb == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered you a fight.");
        format(string, sizeof(string), " You have canceled %s's boxing match offer.", RPN(playerb));
		SendClientMessage(playerid, COLOR_LIME, string);
		format(string, sizeof(string), " %s has cancelled your boxing match offer.", RPN(playerid));
		SendClientMessage(playerb, COLOR_LIME, string);
		// Ending the boxing offer
		BoxBy[playerid] = -1;
	}
	else if(!strcmp(params, "live", true))
	{
		new playerb = LiveBy[playerid];
		if(playerb == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has offered you a live news conference.");
		LiveBy[playerid] = -1;
		LiveRequest[playerb] = 0;
		Live[playerid] = 0;
		Live[playerb] = 0;
		format(string, sizeof(string), " You have canceled %s's live news conference.", RPN(playerb));
		SendClientMessage(playerid, COLOR_LIME, string);
		format(string, sizeof(string), " %s has canceled your live news conference.", RPN(playerid));
		SendClientMessage(playerb, COLOR_LIME, string);
	}
	return 1;
}

CMD:uninvite(playerid, params[])
{
	new playerb, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not a faction leader.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /invite [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerb][pFac] != PlayerInfo[playerid][pFac]) return SendClientMessage(playerid, COLOR_GREY, "Player is not in your faction.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't uninvite yourself.");
	PlayerInfo[playerb][pFac] = 0;
	PlayerInfo[playerb][pFacRank] = 0;
	PlayerInfo[playerb][pFacLeader] = 0;
	PlayerInfo[playerb][pFacDuty] = 0;
	SetPlayerColor(playerb, TRANSPARENT_WHITE);
	format(string, sizeof(string), " You have kicked %s out of the {33AA33}%s {33CCFF}faction.", RPN(playerb), RPFNEx(playerid));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has kicked you out of the {33AA33}%s {33CCFF}faction, you are now a civilian.", RPN(playerid), RPFNEx(playerid));
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:fackick(playerid, params[])
{
	new playerb, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4 && !PlayerInfo[playerid][pFacMod]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fackick [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pFac]) return SendClientMessage(playerid, COLOR_GREY, "Player is not in a faction.");
	SetPlayerColor(playerb, TRANSPARENT_WHITE);
	format(string, sizeof(string), " You have kicked %s out of the {33AA33}%s {33CCFF}faction.", RPN(playerb), RPFNEx(playerb));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " Administrator %s has kicked you out of the {33AA33}%s {33CCFF}faction, you are now a civilian.", RPN(playerid), RPFNEx(playerb));
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	PlayerInfo[playerb][pFac] = 0;
	PlayerInfo[playerb][pFacRank] = 0;
	PlayerInfo[playerb][pFacLeader] = 0;
	PlayerInfo[playerb][pFacDuty] = 0;
	return 1;
}


CMD:finvite(playerid, params[])
{
	new playerb, string[128], idx = PlayerInfo[playerid][pFam];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pFamRank] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not a family leader.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /finvite [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerb][pFam]) return SendClientMessage(playerid, COLOR_GREY, "Player is already in a family.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't invite yourself.");
	// Inviting
	fInvited[playerb] = 1;
	fInviter[playerb] = playerid;
	Family[playerb] = idx;
	format(string, sizeof(string), " You have invited %s to join the {33AA33}%s {33CCFF}family.", RPN(playerb), FamInfo[idx][fName]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has invited you to join the {33AA33}%s {33CCFF}family. (/accept family) (/cancel family)", RPN(playerid), FamInfo[idx][fName]);
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:funinvite(playerid, params[])
{
	new playerb, string[128], idx = PlayerInfo[playerid][pFam];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pFamRank] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not a family leader.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fuinvite [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerb][pFam] != PlayerInfo[playerid][pFam]) return SendClientMessage(playerid, COLOR_GREY, "Player is not in your family.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't unnvite yourself.");
	if(!strcmp(RPN(playerb), FamInfo[idx][fLeader], false)) return SendClientMessage(playerid, COLOR_GREY, "You cannot uninvite the family leader.");
	PlayerInfo[playerb][pFam] = 0;
	PlayerInfo[playerb][pFamRank] = 0;
	FamInfo[idx][fMembers] --;
	format(string, sizeof(string), " You have kicked %s out of the {33AA33}%s {33CCFF}family.", RPN(playerb), FamInfo[idx][fName]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has kicked you out of the {33AA33}%s {33CCFF}family.", RPN(playerid), FamInfo[idx][fName]);
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);

	return 1;
}

CMD:invite(playerid, params[])
{
	new playerb, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not a faction leader.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /invite [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerb][pFac]) return SendClientMessage(playerid, COLOR_GREY, "Player is already in a faction.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't invite yourself.");
	// Inviting
	Invited[playerb] = 1;
	Inviter[playerb] = playerid;
	Faction[playerb] = PlayerInfo[playerid][pFac];
	format(string, sizeof(string), " You have invited %s to join the {33AA33}%s {33CCFF}faction.", RPN(playerb), RPFNEx(playerid));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has invited you to join the {33AA33}%s {33CCFF}faction. (/accept faction) (/cancel faction)", RPN(playerid), RPFNEx(playerid));
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:setrank(playerid, params[])
{
	new playerb, rank, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not a faction leader.");
	if(sscanf(params, "ui", playerb, rank)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setrank [playerid] [rank]");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't change your rank.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerb][pFac] != PlayerInfo[playerid][pFac]) return SendClientMessage(playerid, COLOR_GREY, "Player is not in your faction.");
	if(rank < 0 || rank > 6) return SendClientMessage(playerid, COLOR_GREY, "Ranks are between 0 and 6.");
	if(PlayerInfo[playerb][pFacRank] == rank) return SendClientMessage(playerid, COLOR_GREY, "Player already has that rank.");
	if(PlayerInfo[playerb][pFacRank] < rank)
	{
	    PlayerInfo[playerb][pFacRank] = rank;
		format(string, sizeof(string), "You have {33AA33}promoted {33CCFF}%s to {33AA33}%s (%d){33CCFF}.", RPN(playerb), RPFRN(playerb), rank);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "%s has {33AA33}promoted {33CCFF}you to {33AA33}%s (%d){33CCFF}.", RPN(playerid), RPFRN(playerb), rank);
		SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	}
	else if(PlayerInfo[playerb][pFacRank] > rank)
	{
	    PlayerInfo[playerb][pFacRank] = rank;
		format(string, sizeof(string), "You have {FF9900}demoted {33CCFF}%s to {FF9900}%s (%d){33CCFF}.", RPN(playerb), RPFRN(playerb), rank);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "%s has {FF9900}demoted {33CCFF}you to {FF9900}%s (%d){33CCFF}.", RPN(playerid), RPFRN(playerb), rank);
		SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

CMD:adjustrankname(playerid, params[])
{
	new rank, name[32], string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not a faction leader.");
	if(sscanf(params, "is[32]", rank, name)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /adjustrankname [rank] [name]");
	switch(rank)
	{
	    case 0:
	    {
	        format(FacInfo[PlayerInfo[playerid][pFac]][fRank0], 32, "%s", name);
	        format(string, sizeof(string), "You have set rank 0's name to %s", name);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    }
	    case 1:
	    {
	        format(FacInfo[PlayerInfo[playerid][pFac]][fRank1], 32, "%s", name);
	        format(string, sizeof(string), "You have set rank 1's name to %s", name);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    }
	    case 2:
	    {
	        format(FacInfo[PlayerInfo[playerid][pFac]][fRank2], 32, "%s", name);
	        format(string, sizeof(string), "You have set rank 2's name to %s", name);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    }
	    case 3:
	    {
	        format(FacInfo[PlayerInfo[playerid][pFac]][fRank3], 32, "%s", name);
	        format(string, sizeof(string), "You have set rank 3's name to %s", name);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    }
	    case 4:
	    {
	        format(FacInfo[PlayerInfo[playerid][pFac]][fRank4], 32, "%s", name);
	        format(string, sizeof(string), "You have set rank 4's name to %s", name);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    }
	    case 5:
	    {
	        format(FacInfo[PlayerInfo[playerid][pFac]][fRank5], 32, "%s", name);
	        format(string, sizeof(string), "You have set rank 5's name to %s", name);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    }
	    case 6:
	    {
	        format(FacInfo[PlayerInfo[playerid][pFac]][fRank6], 32, "%s", name);
	        format(string, sizeof(string), "You have set rank 6's name to %s", name);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    }
	}
	return 1;
}

CMD:dinvite(playerid, params[])
{
	new playerb, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pFacDivLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not a division leader.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /dinvite");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerb][pFac] != PlayerInfo[playerid][pFac]) return SendClientMessage(playerid, COLOR_GREY, "Player is not in your faction.");
	if(PlayerInfo[playerb][pFacDiv]) return SendClientMessage(playerid, COLOR_GREY, "Player is already in a division.");
	PlayerInfo[playerb][pFacDiv] = PlayerInfo[playerid][pFacDiv];
	PlayerInfo[playerb][pFacDivLeader] = 0;
	format(string, sizeof(string), "You have assigned %s to the {33AA33}%s {33CCFF}division.", RPN(playerb), RPFDN(playerb));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "%s has assigned you to the {33AA33}%s {33CCFF}division.", RPN(playerid), RPFDN(playerb));
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:duninvite(playerid, params[])
{
	new playerb, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pFacDivLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not a division leader.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /dinvite");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerb][pFac] != PlayerInfo[playerid][pFac]) return SendClientMessage(playerid, COLOR_GREY, "Player is not in your faction.");
	if(PlayerInfo[playerb][pFacDiv] != PlayerInfo[playerid][pFacDiv]) return SendClientMessage(playerid, COLOR_GREY, "Player is not in in your division.");
	PlayerInfo[playerb][pFacDiv] = 0;
	PlayerInfo[playerb][pFacDivLeader] = 0;
	format(string, sizeof(string), "You have removed %s from the {33AA33}%s {33CCFF}division.", RPN(playerb), RPFDN(playerb));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "%s has removed you from to the {33AA33}%s {33CCFF}division.", RPN(playerid), RPFDN(playerb));
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:setdivision(playerid, params[])
{
	new playerb, division, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid) || !PlayerInfo[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not an LSPD faction leader.");
	if(sscanf(params, "ui", playerb, division))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: setdivision [playerid] [division]");
		format(string, sizeof(string), "DIVISIONS: 1) %s | 2) %s | 3) %s | 4) %s", FacInfo[1][fDiv1], FacInfo[1][fDiv2], FacInfo[1][fDiv3], FacInfo[1][fDiv4]);
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerb][pFac] != PlayerInfo[playerid][pFac]) return SendClientMessage(playerid, COLOR_GREY, "Player is not in your faction.");
	if(division < 0 || division > 4) return SendClientMessage(playerid, COLOR_GREY, "Divisions are between 1 and 4.");
	if(PlayerInfo[playerb][pFacDiv] == division) return SendClientMessage(playerid, COLOR_GREY, "Player is already in a division.");
    PlayerInfo[playerb][pFacDiv] = division;
    PlayerInfo[playerb][pFacDivLeader] = division;
	format(string, sizeof(string), "You have assigned %s to lead the {33AA33}%s {33CCFF}division.", RPN(playerb), RPFDN(playerb));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "%s has assigned you to lead the {33AA33}%s {33CCFF}division.", RPN(playerid), RPFDN(playerb));
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:adjustdivisionname(playerid, params[])
{
	new division, name[8], string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid) || !PlayerInfo[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not an LSPD faction leader.");
	if(sscanf(params, "is[32]", division, name)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /adjustdivisionname [division] [name]");
	switch(division)
	{
	    case 1:
	    {
	        FacInfo[1][fDiv1] = name;
	        format(string, sizeof(string), "You have set division 1's name to %s", name);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    }
	    case 2:
	    {
	        FacInfo[1][fDiv2] = name;
	        format(string, sizeof(string), "You have set division 2's name to %s", name);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    }
	    case 3:
	    {
	        FacInfo[1][fDiv3] = name;
	        format(string, sizeof(string), "You have set division 3's name to %s", name);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    }
	    case 4:
	    {
	        FacInfo[1][fDiv4] = name;
	        format(string, sizeof(string), "You have set division 3's name to %s", name);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    }
	}
	return 1;
}

CMD:admins(playerid, params[])
{
	new online, string[128], file[32];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
		foreach(Player, i)
		{
		    if(PlayerInfo[i][pAdmin] && aDuty[i])
		    {
		        online ++;
		    }
		}
		format(string, sizeof(string), "On-Duty Admins: %d", online);
		SendClientMessage(playerid, COLOR_ORANGE, string);
		foreach(Player, i)
		{
		    if(PlayerInfo[i][pAdmin] && aDuty[i])
		    {
		     	format(string, sizeof(string), "- [Level: %d] %s", PlayerInfo[i][pAdmin], RPN(i));
		     	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		    }
		}
	}
	else
	{
		foreach(Player, i)
		{
		    if(PlayerInfo[i][pAdmin])
		    {
		        online ++;
		    }
		}
		format(string, sizeof(string), "Online Admins: %d", online);
		SendClientMessage(playerid, COLOR_ORANGE, string);
		foreach(Player, i)
		{
		    if(PlayerInfo[i][pAdmin])
		    {
		     	if(!aDuty[i])
	 			{
	 			    format(file, sizeof(file), "users/%s.ini",RPNU(i));
				 	format(string, sizeof(string), "- [Level: %d] %s [Admin Name: %s] ", PlayerInfo[i][pAdmin], RPN(i), dini_Get(file, "AdminName"));
				}
		     	else
	 			{
	 			    format(file, sizeof(file), "users/%s.ini",RPNU(i));
					format(string, sizeof(string), "- [Level: %d] %s [RP Name: %s]", PlayerInfo[i][pAdmin], RPN(i), dini_Get(file, "OldName"));
				}
				if(PlayerInfo[i][pGangMod]) strcat(string, " [Gang Mod]");
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		    }
		}
	}
	return 1;
}

CMD:members(playerid, params[])
{
	new string[128], online;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pFac])
	{
		foreach(Player, i)
		{
		    if(PlayerInfo[i][pFac] == PlayerInfo[playerid][pFac])
		    {
		        online ++;
		    }
		}
		format(string, sizeof(string), "Online Faction Members: %d", online);
		SendClientMessage(playerid, COLOR_ORANGE, string);
		foreach(Player, i)
		{
		    if(PlayerInfo[i][pFac] == PlayerInfo[playerid][pFac])
		    {
		        if(PlayerInfo[i][pFacLeader])
		        {
		            if(PlayerInfo[playerid][pFacLeader] && PlayerInfo[i][pFacDiv]) format(string, sizeof(string), "- [Leader] [%s] [%s (%d)] %s", RPFDN(i), RPFRN(i), PlayerInfo[i][pFacRank], RPN(i));
		            else format(string, sizeof(string), "- [Leader] [%s (%d)] %s", RPFRN(i), PlayerInfo[i][pFacRank], RPN(i));
		            if(PlayerInfo[playerid][pFac] == 3) format(string, sizeof(string), "- [Leader] [%s (%d)] %s (Success: %d | Fail: %d)", RPFRN(i), PlayerInfo[i][pFacRank], RPN(i), PlayerInfo[i][pCSuccess], PlayerInfo[i][pCFail]);
		        }
		        else
		        {
		            if(PlayerInfo[playerid][pFacLeader] && PlayerInfo[i][pFacDiv]) format(string, sizeof(string), "- [%s] [%s (%d)] %s", RPFDN(i), RPFRN(i), PlayerInfo[i][pFacRank], RPN(i));
		            else format(string, sizeof(string), "- [%s (%d)] %s", RPFRN(i), PlayerInfo[i][pFacRank], RPN(i));
  					if(PlayerInfo[playerid][pFac] == 3) format(string, sizeof(string), "- [%s (%d)] %s (Success: %d | Fail: %d)", RPFRN(i), PlayerInfo[i][pFacRank], RPN(i), PlayerInfo[i][pCSuccess], PlayerInfo[i][pCFail]);

				}
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		    }
		}
	}
	if(PlayerInfo[playerid][pFam])
	{
	    online = 0;
		foreach(Player, i)
		{
		    if(PlayerInfo[i][pFam] == PlayerInfo[playerid][pFam])
		    {
		        online ++;
		    }
		}
		format(string, sizeof(string), "Online Family Members: %d", online);
		SendClientMessage(playerid, COLOR_ORANGE, string);
		foreach(Player, i)
		{
		    if(PlayerInfo[i][pFam] == PlayerInfo[playerid][pFam])
		    {
	            format(string, sizeof(string), "- [%s (%d)] %s", RPFaRN(i), PlayerInfo[i][pFamRank], RPN(i));
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		    }
		}
	}
	return 1;
}

CMD:quitfaction(playerid, params[])
{
	new string[128], faction[32];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pFac]) return SendClientMessage(playerid, COLOR_GREY, "You are not in a faction.");
	if(sscanf(params, "s[8]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /quitfaction [confirm]");
	if(!strcmp(params, "confirm", true))
	{
		// Detecting Faction
		if(PlayerInfo[playerid][pFac] == 1) format(faction, sizeof(faction), "San Andreas Police Department");
		else if(PlayerInfo[playerid][pFac] == 2) format(faction, sizeof(faction), "Government");
		// Quitting Faction
		PlayerInfo[playerid][pFac] = 0;
		PlayerInfo[playerid][pFacRank] = 0;
		PlayerInfo[playerid][pFacLeader] = 0;
		format(string, sizeof(string), " You have quit the {33AA33}%s {33CCFF}faction, you are now a civilian.", faction);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

CMD:quitfamily(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pFam]) return SendClientMessage(playerid, COLOR_GREY, "You are not in a  family.");
	if(sscanf(params, "s[8]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /quitfamily [confirm]");
	if(!strcmp(params, "confirm", true))
	{
	    new idx = PlayerInfo[playerid][pFam];
		format(string, sizeof(string), " You have quit the {33AA33}%s {33CCFF}family.", FamInfo[idx][fName]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		FamInfo[idx][fMembers] --;
		PlayerInfo[playerid][pFam] = 0;
		PlayerInfo[playerid][pFamRank] = 0;
	}
	return 1;
}

CMD:na(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsAReporter(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not a news reporter.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /na [text]");
	if(AntiAdv(playerid, params)) return 1;
    format(string, sizeof(string), "** [NA] (%d) %s %s: %s", PlayerInfo[playerid][pFacRank], RPFRN(playerid), RPN(playerid), params);
	SendPlayerFactionMessage(playerid, 0, COLOR_LIGHTGREEN, string);
	Log("logs/NA.log", string);
	return 1;
}

CMD:news(playerid, params[])
{
	new string[128];
	if(!IsAReporter(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not a news reporter.");
	if(!IsNewsVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_GREY, "You are not in a news vehicle.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /news [text]");
	if(AntiAdv(playerid, params)) return 1;
	format(string, sizeof(string), "** [News] %s: %s", RPN(playerid), params);
	SendClientMessageToAll(COLOR_ORANGE, string);
	Log("logs/news.log", string);
	return 1;
}

CMD:newsvault(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsAReporter(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not a news reporter.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 1202.8289,-762.5840,1073.1819)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the News Agency Vault.");
	format(string, sizeof(string), "[News Agency Vault]: The vault contains $%d.", NewsMoney);
	SendClientMessage(playerid, COLOR_DARKRED, string);
	return 1;
}

CMD:vaultwithdraw(playerid, params[])
{
	new amount, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsAReporter(playerid) || !PlayerInfo[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 1202.8289,-762.5840,1073.1819)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the News Agency Vault.");
	if(sscanf(params, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /vaultwithdraw [amount]");
	if(amount > NewsMoney) return SendClientMessage(playerid, COLOR_GREY, "The vault doesn't have that much money inside it.");
	if(amount <= 0)  return SendClientMessage(playerid, COLOR_GREY, "Invalid money amount.");
	NewsMoney -= amount;
	GiveZaiatMoney(playerid, amount);
	format(string, sizeof(string), "[News Agency Warning]: %s has withdrawn $%d from the vault, amount left: $%d.", RPN(playerid), amount, NewsMoney);
	SendPlayerFactionMessage(playerid, 0, COLOR_DARKRED, string);
	Log("logs/newsvault.log", string);
	return 1;
}

CMD:live(playerid, params[])
{
	new string[128], playerb;
	if(!IsAReporter(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not a news reporter.");
	if(!IsNewsVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_GREY, "You are not in a news vehicle.");
	if(Live[playerid])
	{
	    foreach(Player, i)
	    {
	        if(Live[i] && i != playerid) playerb = i;
	    }
	    Live[playerid] = 0;
	    Live[playerb] = 0;
	    LiveConference = 0;
	    SendClientMessage(playerid, COLOR_LIGHTRED, "You have ended the live news conference.");
	    SendClientMessage(playerb, COLOR_LIGHTRED, "The live news conference has ended.");
	}
	else
	{
	    if(LiveRequest[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You have already offered someone a live news conference.");
	    if(LiveConference) return SendClientMessage(playerid, COLOR_GREY, "Another live news conference is already being held.");
		if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /live [playerid]");
		if(playerb == playerid) return SendClientMessage(playerid, COLOR_GREY, "You can't offer yourself to a live news conference.");
		if(LiveBy[playerb] != -1) return SendClientMessage(playerid, COLOR_GREY, "Player has been already offered a live news conference.");
		LiveBy[playerb] = playerid;
		LiveRequest[playerid] = 1;
		format(string, sizeof(string), " You have offered %s a live news conference.", RPN(playerb));
		SendClientMessage(playerid, COLOR_LIME, string);
		format(string, sizeof(string), " News Reporter %s has offered you a live news conference. (/accept live) (/cancel live)", RPN(playerid));
		SendClientMessage(playerb, COLOR_LIME, string);
	}
	return 1;
}

CMD:r(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!IsACop(playerid) && !IsAGov(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an SAPD Oficer/Government Official.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/r)adio [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(PlayerInfo[playerid][pFacDiv]){format(string, sizeof(string), "** [%s] %s %s: %s", RPFDN(playerid), RPFRN(playerid), RPN(playerid), params);}
	else {format(string, sizeof(string), "** %s %s: %s", RPFRN(playerid), RPN(playerid), params);}
	SendPlayerFactionMessage(playerid, 0, COLOR_RADIO, string);
	if(IsACop(playerid)) Log("logs/SAPD.log", string);
	else if(IsAGov(playerid)) Log ("logs/GOV.log", string);
	return 1;
}

CMD:d(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(!IsACop(playerid) && !IsAGov(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not an SAPD Oficer/Government Official.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/d)epartments radio [text]");
	if(AntiAdv(playerid, params)) return 1;
	// Raido Message
	format(string, sizeof(string), "** [%s] %s %s: %s", RPFN(playerid),  RPFRN(playerid), RPN(playerid), params);
	foreach(Player, i)
	{
	    if(IsACop(i) || IsAGov(i))
	    {
			SendClientMessage(i, COLOR_DEPTRADIO, string);
	    }
	}
	Log("logs/departments.log", string);
	return 1;
}

CMD:rolldice(playerid, params[])
{
	new string[128], val1, val2;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pDice]) return SendClientMessage(playerid, COLOR_GREY, "You have no dice on you.");
	val1 = 1+random(6);
	val2 = 1+random(6);
    format(string, sizeof(string), "* %s rolls a pair of dice on the floor, the first dice shows %d while the other shows %d.", RPN(playerid), val1, val2);
	SendNearbyMessage(playerid, 4, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:list(playerid, params[])
{
	new idx = GetPlayerVirtualWorld(playerid)-100, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(idx > 0 && idx < MAX_BIZ && BizInfo[idx][bType] != 1 && BizInfo[idx][bType] != 2 && BizInfo[idx][bType] != 3 && BizInfo[idx][bType] != 4 && BizInfo[idx][bType] != 6 || idx < 1 || idx > MAX_BIZ) return SendClientMessage(playerid, COLOR_GREY, "You are not inside a business.");
	if(BizInfo[idx][bType] == 1)
	{
	    format(string, sizeof(string), "** %s's 24/7 Market menu list **", BizInfo[idx][bOwner]);
	    SendClientMessage(playerid, COLOR_ORANGE, string);
		if(BizInfo[idx][bLevel] >= 1) SendClientMessage(playerid, COLOR_WHITE, "UPGRADE 1: Cellphone ($100) | Phonebook ($50) | Dice ($20) | Cigar ($100)");
		if(BizInfo[idx][bLevel] >= 2) SendClientMessage(playerid, COLOR_WHITE, "UPGRADE 2: Speedometer ($200) | Sprunk ($30) | Spraycan ($100) | Rope ($60)");
		if(BizInfo[idx][bLevel] >= 3) SendClientMessage(playerid, COLOR_WHITE, "UPGRADE 3: Blindfold ($60) | WalkieTalkie ($200) | Smartphone($500)");
		if(BizInfo[idx][bLevel] >= 4) SendClientMessage(playerid, COLOR_WHITE, "UPGRADE 4: Camera ($300) | GasCan ($100)");
		//if(BizInfo[idx][bLevel] >= 5) SendClientMessage(playerid, COLOR_WHITE, "UPGRADE 5: Radio ($300)");
	}
	else if(BizInfo[idx][bType] == 3)
	{
	    format(string, sizeof(string), "** %s's Ammunation menu list **", BizInfo[idx][bOwner]);
	    SendClientMessage(playerid, COLOR_ORANGE, string);
		if(BizInfo[idx][bLevel] >= 1) SendClientMessage(playerid, COLOR_WHITE, "UPGRADE 1: 1) Shotgun Ammo ($400) | 2) Rifle Ammo ($2000)");
		if(BizInfo[idx][bLevel] >= 4) SendClientMessage(playerid, COLOR_WHITE, "UPGRADE 2: 3) Gun Ammo ($800)");
		if(BizInfo[idx][bLevel] >= 2) SendClientMessage(playerid, COLOR_WHITE, "UPGRADE 3: 4) Light-Machinegun Ammo ($1200)");
		if(BizInfo[idx][bLevel] >= 3) SendClientMessage(playerid, COLOR_WHITE, "UPGRADE 4: 5) Heavy-Machinegun Ammo ($2200)");
		if(BizInfo[idx][bLevel] >= 5) SendClientMessage(playerid, COLOR_WHITE, "UPGRADE 5: 6) Vest ($1000)");
	}
	else if(BizInfo[idx][bType] == 4)
	{
	    format(string, sizeof(string), "** %s's Club menu list **", BizInfo[idx][bOwner]);
	    SendClientMessage(playerid, COLOR_ORANGE, string);
		SendClientMessage(playerid, COLOR_WHITE, "1) Sprunk ($50) | 2) Beer ($100) | 3) Vodka ($200)");
	}
	else if(BizInfo[idx][bType] == 6)
	{
	    format(string, sizeof(string), "** %s's Fast Food menu list **", BizInfo[idx][bOwner]);
	    SendClientMessage(playerid, COLOR_ORANGE, string);
		SendClientMessage(playerid, COLOR_WHITE, "1) Small Meal ($10) | 2) Medium Meal ($30) | 3) Big Meal ($50)");
	}
	return 1;
}


/*CMD:speedo(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pSpeedo]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a speedometer.");
	if(!Speedo[playerid])
	{
	    Speedo[playerid] = 1;
	    format(string, sizeof(string), "You have turned your speedometer {33AA33}on{33CCFF}.");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	else
	{
	    Speedo[playerid] = 0;
	    format(string, sizeof(string), "You have turned your speedometer {FF9900}off{33CCFF}.");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	return 1;
}*/


CMD:sms(playerid, params[])
{
	new number, string[128], text[64],done;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pHasCellphone]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a cellphone yet.");
	if(sscanf(params, "is[64]", number, text)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sms [number] [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(PhoneOff[playerid]) return SendClientMessage(playerid, COLOR_GREY, "Your phone is turned off.");
	if(number == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid phone number.");
	if(!strlen(text)) return SendClientMessage(playerid, COLOR_GREY, "You haven't entered any text to SMS.");
	if(strlen(text) > 64) return SendClientMessage(playerid, COLOR_GREY, "You may only use 64 characters per SMS.");
	format(string, sizeof(string), "* %s takes out their cellphone and starts pressing some keys.", RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i))
		{
		    if(PlayerInfo[i][pCellphone] == number)
		    {
		        if(PhoneOff[i]) return SendClientMessage(playerid, COLOR_GREY, "Player has their phone turned off.");
		        format(string, sizeof(string), "* %s's cellphone beeps once.", RPN(i));
				SendNearbyMessage(i, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        format(string, sizeof(string), "[SMS TO] %s: %s, (Ph: %d)", RPN(i), text, number);
		        SendClientMessage(playerid, COLOR_YELLOW, string);
		        format(string, sizeof(string), "[SMS FROM] %s: %s, (Ph: %d)", RPN(playerid), text, PlayerInfo[playerid][pCellphone]);
		        SendClientMessage(i, COLOR_YELLOW, string);
		        GiveZaiatMoney(playerid, -1);
		        TaxMoney += 1;
				done = 1;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
				new log[256];
				format(log, sizeof(log), "%s to %s: %s", RPN(playerid), RPN(i), text);
				Log("logs/sms.log", log);
				foreach(Player, x)
				{
				    if(PlayerInfo[x][pAdmin] >= 6 && SMSes[x] && x != playerid && x != i)
				    {
				        format(log, sizeof(log), "[SMS] %s to %s: %s", RPN(playerid), RPN(i), text);
				        SendClientMessage(x, COLOR_YELLOW, log);
				    }
				}
		    }
	    }
	}
	if(done != 1)
	{
	    SendClientMessage(playerid, COLOR_GREY, "Number is not currently available.");
	}
	return 1;
}

CMD:call(playerid, params[])
{
	new number, string[128], done;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pHasCellphone]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a cellphone.");
	if(!PlayerInfo[playerid][pCellphone]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a simcard.");
	if(sscanf(params, "i", number)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /call [number]");
	if(PhoneOff[playerid]) return SendClientMessage(playerid, COLOR_GREY, "Your phone is turned off.");
	if(Calling[playerid] || BeingCalled[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are already on a call.");
	if(number == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid phone number.");
	format(string, sizeof(string), "* %s takes out their cellphone and starts calling a number.", RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	if(number == 911)
	{
	    Calling[playerid] = 1;
	    Call911[playerid] = 1;
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	    SendClientMessage(playerid, COLOR_YELLOW, "[Cellphone]: You are connected to the SAPD emergency line, please explain your emergency.");
	}
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pCellphone] == number)
	    {
	        if(PhoneOff[i]) return SendClientMessage(playerid, COLOR_GREY, "Player has their phone turned off.");
	        if(BeingCalled[i] || Calling[i]) return SendClientMessage(playerid, COLOR_GREY, "Number busy.");
	        Calling[playerid] = 1;
	        BeingCalled[i] = 1;
	        Called[playerid] = i;
			Caller[i] = playerid;
			SendClientMessage(playerid, COLOR_ORANGE, " The cellphone is ringing, wait for someone to pickup.");
	        format(string, sizeof(string), "* %s's cellphone starts ringing.", RPN(i));
			SendNearbyMessage(i, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			format(string, sizeof(string), " [Cellphone]: Incoming call from %s, Ph: %d", RPN(playerid), PlayerInfo[playerid][pCellphone]);
			SendClientMessage(i, COLOR_YELLOW, string);
			SendClientMessage(i, COLOR_WHITE, " Type /pickup to answer or /hangup to cancel the incoming call.");
			done = 1;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	    }
	}
	if(done != 1)
	{
	    SendClientMessage(playerid, COLOR_GREY, "Number is not currently available.");
	}
	return 1;
}

CMD:p(playerid, params[])
{
	return cmd_pickup(playerid, params);
}
CMD:pickup(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pHasCellphone]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a cellphone.");
	if(!BeingCalled[playerid]) return SendClientMessage(playerid, COLOR_GREY, "Nobody is caling you.");
	format(string, sizeof(string), "* %s answers their cellphone.", RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SendClientMessage(playerid, COLOR_ORANGE, " You have picked up the line.");
	SendClientMessage(Caller[playerid], COLOR_ORANGE, " They pickedup the line.");
	Calling[Caller[playerid]] = 2;
	BeingCalled[playerid] = 2;
	SetTimerEx("PhoneCall", 1000, false, "d", Caller[playerid]);
	return 1;
}

CMD:hangup(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pHasCellphone]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a cellphone.");
	if(!BeingCalled[playerid] && !Calling[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on a call nor is anybody calling you.");
	format(string, sizeof(string), "* %s puts their cellphone away.", RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SendClientMessage(playerid, COLOR_ORANGE, " You have hungup the line.");
	if(BeingCalled[playerid]) SendClientMessage(Caller[playerid], COLOR_ORANGE, " They hungup the line.");
    else if(Calling[playerid]) SendClientMessage(Called[playerid], COLOR_ORANGE, " They hungup the line.");
    if(Call911[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You can't hangup on a 911 call.");
	//
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	if(Calling[playerid])
	{
	    SetPlayerSpecialAction(Called[playerid], SPECIAL_ACTION_STOPUSECELLPHONE);
	    format(string, sizeof(string), "[Cellphone] Phonecall lasted for %d seconds, price: $%d", CallTime[playerid], CallTime[playerid]*10/100);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	    GiveZaiatMoney(playerid, -(CallTime[playerid]*10/100));
	    TaxMoney += (CallTime[playerid]*10/100);
	    Calling[playerid] = 0;
	    BeingCalled[playerid] = 0;
		Caller[playerid] = -1;
		CallTime[playerid] = 0;
		Called[playerid] = -1;
	}
	else if(Calling[Caller[playerid]])
	{
	    SetPlayerSpecialAction(Called[playerid], SPECIAL_ACTION_STOPUSECELLPHONE);
	    format(string, sizeof(string), "[Cellphone] Phonecall lasted for %d seconds, price: $%d", CallTime[Caller[playerid]], CallTime[Caller[playerid]]*10/100);
	    SendClientMessage(Caller[playerid], COLOR_YELLOW, string);
	    GiveZaiatMoney(Caller[playerid], -(CallTime[Caller[playerid]]*10/100));
	    TaxMoney += (CallTime[Caller[playerid]]*10/100);
	    Calling[Called[playerid]] = 0;
	    BeingCalled[Called[playerid]] = 0;
		Caller[Called[playerid]] = -1;
		CallTime[Called[playerid]] = 0;
		Called[Called[playerid]] = -1;
	}
	return 1;
}

forward DownloadTimer(playerid, songid);
public DownloadTimer(playerid, songid)
{
	if(IsPlayerLoggedIn(playerid))
	{
	    if(GetProgressBarValue(Download[playerid]) >= 100)
	    {
	    	HideProgressBarForPlayer(playerid, Download[playerid]);
	    	if(songid == 1) SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: You have successfully downloaded 'Champaigne Showers - LMFAO'.");
			else if(songid == 2) SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: You have successfully downloaded 'Club can't Handle Me - David Guetta'.");
			TaxMoney += 50;
			GiveZaiatMoney(playerid, -50);
			PlayerInfo[playerid][pSong][songid] = 1;
	    }
	    else
	    {
	    	SetProgressBarValue(Download[playerid], GetProgressBarValue(Download[playerid])+1);
	    	UpdateProgressBar(Download[playerid], playerid);
	    	SetTimerEx("DownloadTimer", 300, false, "ii", playerid, songid);
	    }
	}
	return 1;
}

CMD:smartphone(playerid, params[])
{
	new id, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pHasCellphone] != 2) return SendClientMessage(playerid, COLOR_GREY, "You don't own a smartphone.");
	if(sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /smartphone [options]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: browse | download | music | advertise");
		return 1;
	}
	if(!strcmp(params, "browse", true, 6))
	{
	    if(!PlayerInfo[playerid][pInternet]) return SendClientMessage(playerid, COLOR_GREY, "Your smartphone's internet service is not currently running.");
		ShowDialog(playerid, 8);
		format(string, sizeof(string), "* %s opens the web browser via their smartphone.", RPN(playerid));
		SendNearbyMessage(playerid, 4, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		return 1;
	}
	if(!strcmp(params, "download", true, 8))
	{
	    if(!PlayerInfo[playerid][pInternet]) return SendClientMessage(playerid, COLOR_GREY, "Your smartphone's internet service is not currently running.");
	    if(sscanf(params, "s[32]i", params, id)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /smartphone download [songid]");
	    if(id == 1) SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: You are currently downloading 'Champaigne Showers - LMFAO', please wait until the download is over.");
	    else if(id == 2) SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: You are currently downloading 'Club can't Handle Me - David Guetta', please wait until the download is over.");
		else return SendClientMessage(playerid, COLOR_GREY, "Invalid music id.");
		ShowProgressBarForPlayer(playerid, Download[playerid]);
		SetProgressBarValue(Download[playerid], 0);
	    SetTimerEx("DownloadTimer", 300, false, "ii", playerid, id);
	    format(string, sizeof(string), "* %s starts downloading a song via their smartphone.", RPN(playerid));
		SendNearbyMessage(playerid, 4, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    return 1;
	}
	else if(!strcmp(params, "music", true, 5))
	{
	    if(sscanf(params, "s[32]i", params, id)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /smartphone music [songid] (0 = off)");
        if(!PlayerInfo[playerid][pSong][id] && id != 0) return SendClientMessage(playerid, COLOR_GREY, "You don't have that song on your smartphone, download it first.");
		switch(id)
		{
		    case 0: {StopAudioStreamForPlayer(playerid); return 1;}
		    case 1: SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: Currently playing 'Champaigne Showers - LMFAO'");
		    case 2: SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: Currently playing 'Club can't Handle Me - David Guetta'");
		}
		if(id == 0)format(string, sizeof(string), "* %s takes off their headset and stops the song being played on their smartphone.", RPN(playerid));
		else format(string, sizeof(string), "* %s puts on their headset and plays a song via their smartphone.", RPN(playerid));
		SendNearbyMessage(playerid, 4, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), "http://www.zGaming.org/music/english/%d.mp3", id);
		PlayAudioStreamForPlayer(playerid, string);
        return 1;
	}
	else if(!strcmp(params, "advertise", true, 9))
	{
	    if(!PlayerInfo[playerid][pInternet]) return SendClientMessage(playerid, COLOR_GREY, "Your smartphone's internet service is not currently running.");
		ShowDialog(playerid, 15);
	}
	else SendClientMessage(playerid, COLOR_GREY, "Invalid option.");
	return 1;
}


CMD:internet(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(!PlayerInfo[playerid][pHasCellphone]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a smartphone.");
    if(!PlayerInfo[playerid][pInternet])
    {
        if(PlayerInfo[playerid][pMoney] < 150) return SendClientMessage(playerid, COLOR_GREY, "You need $150 to activate the internet service.");
        GiveZaiatMoney(playerid, -150);
        TaxMoney += 150;
        PlayerInfo[playerid][pInternet] = 1;
        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have {33CCFF}activated {33CCFF}your smartphone's internet service.");
        SendClientMessage(playerid, COLOR_WHITE, " You will be charged $50 each paycheck for the internet service, you was also charged $150 for service activation.");
    }
    else
    {
        PlayerInfo[playerid][pInternet] = 0;
        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have {FF9900}deactivated {33CCFF}your smartphone's internet service.");
    }
	return 1;
}

CMD:buysim(playerid, params[])
{
	new string[128], number, File:file = fopen("cellphones.cfg", io_read);
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pHasCellphone]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a cellphone yet.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 1154.1257,-1180.9600,32.8187)) return SendClientMessage(playerid, COLOR_GREY, "You are not at the Telecom Company.");
	if(sscanf(params, "i", number)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /buysim [desired number]");
	if(number == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid phone number.");
    if(PlayerInfo[playerid][pCellphone] == number) return SendClientMessage(playerid, COLOR_GREY, "You already have this phone number.");
	new idx = 1;
	while(fread(file, string))
	{
	    if(strval(string) == number) return SendClientMessage(playerid, COLOR_GREY, "This number is already registered.");
	    if(strval(string) == PlayerInfo[playerid][pCellphone])
	    {
			fdeleteline("cellphones.cfg", idx);
	    }
	    idx ++;
	}
	fclose(file);
	file = fopen("cellphones.cfg", io_append);
	format(string, sizeof(string), "%d\r\n", number);
	fwrite(file, string);
	fclose(file);
	format(string, sizeof(string), "* %s has bought a new sim card.", RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	if(!PlayerInfo[playerid][pCellphone])
	{
	    SendClientMessage(playerid, COLOR_WHITE, " The company gave you the sim card for free as it's your first.");
	    SendClientMessage(playerid, COLOR_WHITE, " You can use /call and /sms now.");
	}
	else
	{
		GiveZaiatMoney(playerid, -500);
		TaxMoney += 500;
	    SendClientMessage(playerid, COLOR_WHITE, " The company has charged you $500 for changing your sim card.");
	}
	PlayerInfo[playerid][pCellphone] = number;
	return 1;
}


CMD:wt(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pWT]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a WalkieTalkie.");
	if(PlayerInfo[playerid][pWTC] == 0) return SendClientMessage(playerid, COLOR_GREY, "Your WalkieTalkie is turned off.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /wt [text]");
	if(AntiAdv(playerid, params)) return 1;
	foreach(Player, i)
	{
		if(PlayerInfo[playerid][pWTC] == PlayerInfo[i][pWTC])
		{
			format(string, sizeof(string), "** WalkieTalkie %s: %s **", RPN(playerid), params);
			SendClientMessage(i, COLOR_NEWS, string);
		}
	}
	return 1;
}

CMD:wtc(playerid, params[])
{
	new string[128], channel;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pWT]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a WalkieTalkie.");
	if(sscanf(params, "i", channel)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /wtc [channel]");
	PlayerInfo[playerid][pWTC] = channel;
	if(channel == 0) format(string, sizeof(string), " You have turned your WalkieTalkie off.");
	else format(string, sizeof(string), " You have adjust your WalkieTalkie's channel to %d Hz.", channel);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:blindfold(playerid, params[])
{
	new string[128], playerb;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pBlindfold]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a blindfold.");
	if(sscanf(params, "u",  playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /blindfold [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You must be inside a vehicle to blindfold someone.");
	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Player is not in your vehicle.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You are not the vehicle driver.");
	if(!IsPlayerTied(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Player is not tied.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't blindfold yourself.");
	Blindfolded[playerb] = 1;
	PlayerInfo[playerid][pBlindfold]--;
	SetPlayerCameraPos(playerb, -833.5241,-1358.8575,86.9054);
	SetPlayerCameraLookAt(playerb, -833.5241,-1358.8575,0);
	GameTextForPlayer(playerb, "~r~Blindfolded", 2500, 3);
	format(string, sizeof(string), "* %s takes out a blindfold and puts it on %s's eyes.", RPN(playerid), RPN(playerb));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SendClientMessage(playerid, COLOR_WHITE, " Type /unblindfold to remove the blindfold on someone's eyes.");
	return 1;
}

CMD:unblindfold(playerid, params[])
{
	new string[128], playerb;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "u",  playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /unblindfold [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You must be inside a vehicle to blindfold someone.");
	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Player is not in your vehicle.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You are not the vehicle driver.");
	if(!Blindfolded[playerb]) return SendClientMessage(playerid, COLOR_GREY, "Player is not blindfolded.");
	if(playerid == playerb && Tied[playerid] == 1) return SendClientMessage(playerid, COLOR_GREY, "You can't unblindfold yourself while being tied.");
	Blindfolded[playerb] = 0;
	SetCameraBehindPlayer(playerb);
	GameTextForPlayer(playerb, "~G~Unblindfolded", 2500, 3);
	format(string, sizeof(string), "* %s takes out a blindfold and puts it on %s's eyes.", RPN(playerid), RPN(playerb));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SendClientMessage(playerid, COLOR_WHITE, " Type /unblindfold to remove the blindfold on someone's eyes.");
	return 1;
}

CMD:eject(playerid, params[])
{
	new string[128], playerb;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "u",  playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /eject [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You must be inside a vehicle to tie someone.");
	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Player is not in your vehicle.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You are not the vehicle driver.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't  eject yourself.");
	RemovePlayerFromVehicle(playerb);
	format(string, sizeof(string), "* %s has thrown %s out of the vehicle.", RPN(playerid), RPN(playerb));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}


CMD:tie(playerid, params[])
{
	new string[128], playerb;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pRope]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a rope.");
	if(sscanf(params, "u",  playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /tie [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You must be inside a vehicle to tie someone.");
	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Player is not in your vehicle.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You are not the vehicle driver.");
	if(IsPlayerTied(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Player is already tied.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't tie yourself.");
	TogglePlayerTied(playerb, 1);
	PlayerInfo[playerid][pRope]--;
	TogglePlayerControllable(playerb, 0);
	SetCameraBehindPlayer(playerb);
	GameTextForPlayer(playerb, "~r~Tied", 2500, 3);
	format(string, sizeof(string), "* %s takes out a rope and ties %s after a strong resistance.", RPN(playerid), RPN(playerb));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SendClientMessage(playerid, COLOR_WHITE, " Type /untie to untie someone.");
	return 1;
}

CMD:untie(playerid, params[])
{
	new string[128], playerb;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "u",  playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /untie [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!IsPlayerTied(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Player is not tied.");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't untie yourself.");
	TogglePlayerTied(playerb, 0);
	TogglePlayerControllable(playerb, 1);
	SetCameraBehindPlayer(playerb);
	GameTextForPlayer(playerb, "~g~Untied", 2500, 3);
	format(string, sizeof(string), "* %s takes out a knife and cuts the rope around %s.", RPN(playerid), RPN(playerb));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:colorcar(playerid, params[])
{
	new string[128], col1, col2;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pSpray]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a spraycan.");
	if(sscanf(params, "ii", col1, col2)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /colorcar [color1] [color2]");
	if(col1 < 0 || col1 > 126 || col2 < 0 || col2 > 126) return SendClientMessage(playerid, COLOR_GREY, "Colors are between 1 and 126.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You must be inside a vehicle to color it.");
	ChangeVehicleColor(GetPlayerVehicleID(playerid), col1, col2);
	if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
	{
	    PlayerInfo[playerid][vC1] = col1;
	    PlayerInfo[playerid][vC2] = col2;
	}
	else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
	{
	    PlayerInfo[playerid][vVC1] = col1;
	    PlayerInfo[playerid][vVC2] = col2;
	}
	PlayerInfo[playerid][pSpray] --;
	format(string, sizeof(string), "* %s has changed the color of the vehicle he's inside.", RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:paintcar(playerid, params[])
{
	new string[128], col1;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pSpray]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a spraycan.");
	if(sscanf(params, "ii", col1)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /paintcar [paintjobid]");
	if(col1 < -1 || col1 > 6) return SendClientMessage(playerid, COLOR_GREY, "Paintjobs are between 0 and 6.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You must be inside a vehicle to paint it.");
	ChangeVehiclePaintjob(GetPlayerVehicleID(playerid), col1);
	PlayerInfo[playerid][vPJ] = col1;
	PlayerInfo[playerid][pSpray] --;
	format(string, sizeof(string), "* %s has changed the paintjob of the vehicle he's inside.", RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:buyviptoys(playerid, params[])
{
	new option, index, model, string[128];
	if(PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!IsPlayerInRangeOfPoint(playerid, 2, 278.4188,-175.9247,999.6060)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the VIP Toys shop.");
	if(sscanf(params, "ii", option, index))
	{
		ShowPlayerDialog(playerid, 9182, DIALOG_STYLE_MSGBOX, "USAGE: /buyviptoys [model] [slot (0-9)]", "Hair (1-5) | Laser (6-11) | Headphones (12-15) | Guitar (16)\nTopHat (17) | Motorcycle Helmets (18-22) | Smoke Puff (23) \n\nBronze VIP: Slots 0~3 (4 Slots)\nSilver VIP: Slots 0~5 (6 Slots)\nGold VIP: Slots 0~7 (8 Slots)\nPlatinum VIP: Slots 0~9 (10 Slots)", "Close", "Close");
	    return 1;
	}
	if(option < 1 || option > 85) return SendClientMessage(playerid, COLOR_GREY, "Toys are between 1 and 75.");
	if(index < 0 || index > 9) return SendClientMessage(playerid, COLOR_GREY, "Slots are between 0 and 9.");
	if(index > 1 && PlayerInfo[playerid][pVIP] < 1) return SendClientMessage(playerid, COLOR_GREY, "You need to have a higher VIP level to use more than 2 slots.");
	if(index > 3 && PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You need to have a higher VIP level to use more than 4 slots.");
	if(index > 5 && PlayerInfo[playerid][pVIP] < 3) return SendClientMessage(playerid, COLOR_GREY, "You need to have a higher VIP level to use more than 6 slots.");
	if(index > 7 && PlayerInfo[playerid][pVIP] < 4) return SendClientMessage(playerid, COLOR_GREY, "You need to have a higher VIP level to use more than 8 slots.");
	switch(option)
	{
	    case 1 : model = 18640; case 2 : model = 18975; case 3 : model = 19077; case 4 : model = 19136; case 5 : model = 19274;
	    case 6 : model = 18643; case 7 : model = 19080; case 8 : model = 19081; case 9 : model = 19082; case 10: model = 19083;
	    case 11: model = 19084; case 12: model = 19421; case 13: model = 19422; case 14: model = 19423; case 15: model = 19424;
	    case 16: model = 19317; case 17: model = 19352; case 18: model = 18645; case 19: model = 18976; case 20: model = 18977;
		case 21: model = 18978; case 22: model = 18979; case 23: model = 18675;
	}
	if(PlayerInfo[playerid][pMoney] < 300) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
	PlayerInfo[playerid][pToyModel][index] = model;
	GiveZaiatMoney(playerid, -300);
	format(string, sizeof(string), "* %s has bought a VIP toy.", RPN(playerid), params);
 	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 	SendClientMessage(playerid, COLOR_WHITE, " You can view and edit your toys using /toys.");
	return 1;
}


CMD:buytoys(playerid, params[])
{
	new option, index, model, idx = GetPlayerVirtualWorld(playerid)-100, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(idx > 0 && idx < MAX_BIZ && BizInfo[idx][bType] != 2 || idx < 1 || idx > MAX_BIZ) return SendClientMessage(playerid, COLOR_GREY, "You are not inside a Clothes Shop.");
	if(sscanf(params, "ii", option, index))
	{
		ShowPlayerDialog(playerid, 9182, DIALOG_STYLE_MSGBOX, "USAGE: /buytoys [model] [slot (0-9)]", "Glasses (1-30) | Watches (31-45) | Bandanas (46-65) | Hats (66-75)\nMasks (76-85)\n\nRegular Players: Slots 0~1 (2 Slots)\nBronze VIP: Slots 0~3 (4 Slots)\nSilver VIP: Slots 0~5 (6 Slots)\nGold VIP: Slots 0~7 (8 Slots)\nPlatinum VIP: Slots 0~9 (10 Slots)", "Close", "Close");
	    return 1;
	}
	if(BizInfo[idx][bProducts] < 1) return SendClientMessage(playerid, COLOR_GREY, "This business is currently out of products.");
	if(option < 1 || option > 85) return SendClientMessage(playerid, COLOR_GREY, "Toys are between 1 and 75.");
	if(index < 0 || index > 9) return SendClientMessage(playerid, COLOR_GREY, "Slots are between 0 and 9.");
	if(index > 1 && PlayerInfo[playerid][pVIP] < 1) return SendClientMessage(playerid, COLOR_GREY, "You need to have a higher VIP level to use more than 2 slots.");
	if(index > 3 && PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You need to have a higher VIP level to use more than 4 slots.");
	if(index > 5 && PlayerInfo[playerid][pVIP] < 3) return SendClientMessage(playerid, COLOR_GREY, "You need to have a higher VIP level to use more than 6 slots.");
	if(index > 7 && PlayerInfo[playerid][pVIP] < 4) return SendClientMessage(playerid, COLOR_GREY, "You need to have a higher VIP level to use more than 8 slots.");
	switch(option)
	{
	    case 1 : model = 19006; case 2 : model = 19007; case 3 : model = 19008; case 4 : model = 19009; case 5 : model = 19010; // Glasses
	    case 6 : model = 19011; case 7 : model = 19012; case 8 : model = 19013; case 9 : model = 19014; case 10: model = 19015;
	    case 11: model = 19016; case 12: model = 19017; case 13: model = 19018; case 14: model = 19019; case 15: model = 19020;
	    case 16: model = 19021; case 17: model = 19022; case 18: model = 19023; case 19: model = 19024; case 20: model = 19025;
	    case 21: model = 19026; case 22: model = 19027; case 23: model = 19028; case 24: model = 19029; case 25: model = 19030;
	    case 26: model = 19031; case 27: model = 19032; case 28: model = 19033; case 29: model = 19034; case 30: model = 19035;
	    case 31: model = 19039; case 32: model = 19040; case 33: model = 19041; case 34: model = 19042; case 35: model = 19043; // Watches
	    case 36: model = 19044; case 37: model = 19045; case 38: model = 19046; case 39: model = 19047; case 40: model = 19048;
	    case 41: model = 19049; case 42: model = 19050; case 43: model = 19051; case 44: model = 19052; case 45: model = 19053;
	    case 46: model = 18891; case 47: model = 18892; case 48: model = 18893; case 49: model = 18894; case 50: model = 18895; // Bandanas
	    case 51: model = 18896; case 52: model = 18897; case 53: model = 18898; case 54: model = 18899; case 55: model = 18900;
	    case 56: model = 18901; case 57: model = 18902; case 58: model = 18903; case 59: model = 18904; case 60: model = 18905;
	    case 61: model = 18906; case 62: model = 18907; case 63: model = 18908; case 64: model = 18909; case 65: model = 18910;
	    case 66: model = 18926; case 67: model = 18927; case 68: model = 18928; case 69: model = 18929; case 70: model = 18930; // Hats
	    case 71: model = 18931; case 72: model = 18932; case 73: model = 18933; case 74: model = 18934; case 75: model = 18935;
	    case 76: model = 18911; case 77: model = 18912; case 78: model = 18913; case 79: model = 18914; case 80: model = 18915; // Masks
	    case 81: model = 18916; case 82: model = 18917; case 83: model = 18918; case 84: model = 18919; case 85: model = 18920;
	}
	if(PlayerInfo[playerid][pMoney] < 300) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
	PlayerInfo[playerid][pToyModel][index] = model;
	GiveZaiatMoney(playerid, -300);
	format(string, sizeof(string), "* %s has bought a toy for $300.", RPN(playerid), params);
 	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 	SendClientMessage(playerid, COLOR_WHITE, " You can view and edit your toys using /toys.");
	return 1;
}

CMD:toys(playerid, params[])
{
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	ShowDialog(playerid, 23);
	return 1;
}


CMD:buyclothes(playerid, params[])
{
	new idx = GetPlayerVirtualWorld(playerid)-100, string[128], skin;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(idx > 0 && idx < MAX_BIZ && BizInfo[idx][bType] != 2 || idx < 1 || idx > MAX_BIZ) return SendClientMessage(playerid, COLOR_GREY, "You are not inside a Clothes Shop.");
	if(sscanf(params, "i", skin)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /buyclothes [skinid]");
	if(BizInfo[idx][bProducts] < 1) return SendClientMessage(playerid, COLOR_GREY, "This business is currently out of products.");
	if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
	if(skin < 0 || skin > 299 || skin == 0 || skin == 274 || skin == 275 || skin == 276 || skin == 277  || skin == 278 || skin == 279 || skin == 280 || skin == 281 || skin == 282 || skin == 283
	|| skin == 284 || skin == 285 || skin == 286 || skin == 287 || skin == 288) return SendClientMessage(playerid, COLOR_GREY, "Invalid skin id.");
	for(new f=1; f<MAX_FAMILIES; f++)
	{
	    if(FamInfo[f][fTaken])
	    {
			for(new s=0; s<7; s++)
			{
			    if(FamInfo[f][fSkins][s] == skin && PlayerInfo[playerid][pFam] != f) return SendClientMessage(playerid, COLOR_GREY, "This skin is restricted to a family.");
			}
	    }
	}
	PlayerInfo[playerid][pModel] = skin;
	SetPlayerSkin(playerid, skin);
	BizInfo[idx][bMoney] += 100;
	BizInfo[idx][bProducts] --;
	GiveZaiatMoney(playerid, -100);
	format(string, sizeof(string), "* %s has bought new clothes for $100.", RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}


CMD:buy(playerid, params[])
{
	new idx = GetPlayerVirtualWorld(playerid)-100, string[128], type, price;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(idx > 0 && idx < MAX_BIZ && BizInfo[idx][bType] != 1 && BizInfo[idx][bType] != 2 && BizInfo[idx][bType] != 3 && BizInfo[idx][bType] != 4 && BizInfo[idx][bType] != 6 || idx < 1 || idx > MAX_BIZ) return SendClientMessage(playerid, COLOR_GREY, "You are not inside a business.");
	if(BizInfo[idx][bType] == 1)
	{
		if(sscanf(params, "s[32]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /buy [item]");
		if(BizInfo[idx][bProducts] < 1) return SendClientMessage(playerid, COLOR_GREY, "This business is currently out of products.");
		if(!strcmp(params, "cellphone", true))
		{
		    if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		    PlayerInfo[playerid][pHasCellphone] = 1;
			BizInfo[idx][bMoney] += 100;
			BizInfo[idx][bProducts] --;
			BizInfo[idx][bSold] ++;
			GiveZaiatMoney(playerid, -100);
			format(string, sizeof(string), "* %s has bought a cellphone for $100.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can get a sim card from the Telecom Company.");
		}
		if(!strcmp(params, "phonebook", true))
		{
		    if(PlayerInfo[playerid][pMoney] < 50) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		    PlayerInfo[playerid][pPhonebook] = 1;
		    BizInfo[idx][bMoney] += 50;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveZaiatMoney(playerid, -50);
			format(string, sizeof(string), "* %s has bought an electronic phonebook for $50.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can use /phonebook to find someone's number.");
		}
		if(!strcmp(params, "dice", true))
		{
		    if(PlayerInfo[playerid][pMoney] < 20) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		    PlayerInfo[playerid][pDice] = 1;
		    BizInfo[idx][bMoney] += 20;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveZaiatMoney(playerid, -20);
			format(string, sizeof(string), "* %s has bought a pair of special dice for $20.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can use /rolldice to roll a dice.");
		}
		if(!strcmp(params, "cigar", true))
		{
		    if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		    PlayerInfo[playerid][pCigar] = 5;
		    BizInfo[idx][bMoney] += 100;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveZaiatMoney(playerid, -100);
			format(string, sizeof(string), "* %s has bought 5 cuban cigars for $100.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can use /smoke to smoke a cigar.");
		}
		// Level 2: Speedometer | Sprunk | Spraycan | Rope
		if(!strcmp(params, "speedometer", true))
		{
		    if(BizInfo[idx][bLevel] < 2) return SendClientMessage(playerid, COLOR_GREY, "This 24/7 Market doesn't have this product yet.");
			if(PlayerInfo[playerid][pMoney] < 200) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		    PlayerInfo[playerid][pSpeedo] = 1;
		    BizInfo[idx][bMoney] += 200;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveZaiatMoney(playerid, -200);
			format(string, sizeof(string), "* %s has bought a speedometer for $200.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can use /tog to toggle speedometer on/off.");
		}
		if(!strcmp(params, "sprunk", true))
		{
		    if(BizInfo[idx][bLevel] < 2) return SendClientMessage(playerid, COLOR_GREY, "This 24/7 Market doesn't have this product yet.");
	        if(PlayerInfo[playerid][pMoney] < 30) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		    PlayerInfo[playerid][pSprunk] = 5;
		    BizInfo[idx][bMoney] += 30;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveZaiatMoney(playerid, -30);
			format(string, sizeof(string), "* %s has bought 5 redbull cans for $30.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can use /sprunk to drink a sprunk can.");
		}
		if(!strcmp(params, "spraycan", true))
		{
		    if(BizInfo[idx][bLevel] < 2) return SendClientMessage(playerid, COLOR_GREY, "This 24/7 Market doesn't have this product yet.");
	        if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		    PlayerInfo[playerid][pSpray] = 10;
		    BizInfo[idx][bMoney] += 100;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveZaiatMoney(playerid, -100);
			format(string, sizeof(string), "* %s has bought a duko spraycan $100.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can use /colorcar & /paintcar to color/paint a car.");
		}
		if(!strcmp(params, "rope", true))
		{
		    if(BizInfo[idx][bLevel] < 2) return SendClientMessage(playerid, COLOR_GREY, "This 24/7 Market doesn't have this product yet.");
	        if(PlayerInfo[playerid][pMoney] < 60) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		    PlayerInfo[playerid][pRope] = 5;
		    BizInfo[idx][bMoney] += 60;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveZaiatMoney(playerid, -60);
			format(string, sizeof(string), "* %s has bought 5 strong ropes for $60.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can use /tie to tie someone.");
		}
		// Level 3: Blindfold | WalkieTalkie
		if(!strcmp(params, "blindfold", true))
		{
		    if(BizInfo[idx][bLevel] < 3) return SendClientMessage(playerid, COLOR_GREY, "This 24/7 Market doesn't have this product yet.");
	    	if(PlayerInfo[playerid][pMoney] < 60) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		    PlayerInfo[playerid][pBlindfold] = 5;
		    BizInfo[idx][bMoney] += 60;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveZaiatMoney(playerid, -60);
			format(string, sizeof(string), "* %s has bought 5 blindfolds for $600.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can use /blindfold to blindfold someone.");
		}
		if(!strcmp(params, "walkietalkie", true))
		{
		    if(BizInfo[idx][bLevel] < 3) return SendClientMessage(playerid, COLOR_GREY, "This 24/7 Market doesn't have this product yet.");
	        if(PlayerInfo[playerid][pMoney] < 200) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		    PlayerInfo[playerid][pWT] = 1;
		    BizInfo[idx][bMoney] += 200;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveZaiatMoney(playerid, -200);
			format(string, sizeof(string), "* %s has bought a WalkieTalkie for $200.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can use /wtc to adjust the WalkieTalkie's channel, /wt to talk on it.");
		}
		if(!strcmp(params, "smartphone", true))
		{
		    if(BizInfo[idx][bLevel] < 3) return SendClientMessage(playerid, COLOR_GREY, "This 24/7 Market doesn't have this product yet.");
	        if(PlayerInfo[playerid][pMoney] < 500) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		    PlayerInfo[playerid][pHasCellphone] = 2;
		    BizInfo[idx][bMoney] += 500;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveZaiatMoney(playerid, -500);
			format(string, sizeof(string), "* %s has bought a smartphone for $500.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can use /smartphone to view your new cellphone commands.");
		}
		// Level 4: Camera | Gas
		if(!strcmp(params, "camera", true))
		{
		    if(BizInfo[idx][bLevel] < 4) return SendClientMessage(playerid, COLOR_GREY, "This 24/7 Market doesn't have this product yet.");
	        if(PlayerInfo[playerid][pMoney] < 300) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
			GiveZaiatWeapon(playerid, 43, 999999);
		    BizInfo[idx][bMoney] += 300;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveZaiatMoney(playerid, -300);
			format(string, sizeof(string), "* %s has bought a professional camera for $300.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can start taking photos using your camera.");
		}
		if(!strcmp(params, "gascan", true))
		{
		    if(BizInfo[idx][bLevel] < 2) return SendClientMessage(playerid, COLOR_GREY, "This 24/7 Market doesn't have this product yet.");
	        if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		    PlayerInfo[playerid][pGas] = 1;
		    BizInfo[idx][bMoney] += 100;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveZaiatMoney(playerid, -100);
			format(string, sizeof(string), "* %s has bought a gas can for $100.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can use /gascan inside a vehicle anywhere now.");
		}
		// Level 5: Radio
		/*if(!strcmp(params, "radio", true))
		{
		    if(BizInfo[idx][bLevel] < 2) return SendClientMessage(playerid, COLOR_GREY, "This 24/7 Market doesn't have this product yet.");
	        if(PlayerInfo[playerid][pMoney] < 600) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		    PlayerInfo[playerid][pRadio] = 1;
		    BizInfo[idx][bMoney] += 600;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveZaiatMoney(playerid, -600);
			format(string, sizeof(string), "* %s has bought a radio for $600.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can use /music to play music using your radio.");
		}*/
	}
	else if(BizInfo[idx][bType] == 3)
	{
		if(sscanf(params, "i", type)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /buy [type]");
		if(BizInfo[idx][bProducts] < 1) return SendClientMessage(playerid, COLOR_GREY, "This business is currently out of products.");
		if(type == 1) price = 400;
		else if(type == 2) price = 2000;
		else if(type == 3) price = 800;
		else if(type == 4) price = 1200;
		else if(type == 5) price = 2200;
		else if(type == 6) price = 1000;
		if(type < 1 || type > 6) return SendClientMessage(playerid, COLOR_GREY, "Products are between 1 and 6");
		if(PlayerInfo[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		switch(type)
		{
		    case 1:
		    {
				if(GetPlayerWeapon(playerid) != 25 && GetPlayerWeapon(playerid) != 26 && GetPlayerWeapon(playerid) != 27) return SendClientMessage(playerid, COLOR_GREY, "You are not holding the right weapon for this type of ammo.");
				if(GetPlayerWeapon(playerid) == 25) GiveZaiatWeapon(playerid, 25, 120);
				if(GetPlayerWeapon(playerid) == 26) GiveZaiatWeapon(playerid, 26, 120);
				if(GetPlayerWeapon(playerid) == 27) GiveZaiatWeapon(playerid, 27, 120);
				format(string, sizeof(string), "* %s has bought 120 shotgun bullets for $%d.", RPN(playerid), price);
		    }
		    case 2:
		    {
				if(GetPlayerWeapon(playerid) != 33 && GetPlayerWeapon(playerid) != 34) return SendClientMessage(playerid, COLOR_GREY, "You are not holding the right weapon for this type of ammo.");
				if(GetPlayerWeapon(playerid) == 33) GiveZaiatWeapon(playerid, 33, 200);
				if(GetPlayerWeapon(playerid) == 34) GiveZaiatWeapon(playerid, 34, 200);
				format(string, sizeof(string), "* %s has bought 100 rifle bullets for $%d.", RPN(playerid), price);
		    }
		    case 3:
		    {
       		    if(BizInfo[idx][bLevel] < 2) return SendClientMessage(playerid, COLOR_GREY, "This Ammunation doesn't have this product yet.");
				if(GetPlayerWeapon(playerid) != 22 && GetPlayerWeapon(playerid) != 23 && GetPlayerWeapon(playerid) != 24) return SendClientMessage(playerid, COLOR_GREY, "You are not holding the right weapon for this type of ammo.");
				if(GetPlayerWeapon(playerid) == 22) GiveZaiatWeapon(playerid, 22, 120);
				if(GetPlayerWeapon(playerid) == 23) GiveZaiatWeapon(playerid, 23, 120);
				if(GetPlayerWeapon(playerid) == 24) GiveZaiatWeapon(playerid, 24, 120);
				format(string, sizeof(string), "* %s has bought 120 gun bullets for $%d.", RPN(playerid), price);
		    }
		    case 4:
		    {
       		    if(BizInfo[idx][bLevel] < 3) return SendClientMessage(playerid, COLOR_GREY, "This Ammunation doesn't have this product yet.");
				if(GetPlayerWeapon(playerid) != 28 && GetPlayerWeapon(playerid) != 29 && GetPlayerWeapon(playerid) != 32) return SendClientMessage(playerid, COLOR_GREY, "You are not holding the right weapon for this type of ammo.");
				if(GetPlayerWeapon(playerid) == 28) GiveZaiatWeapon(playerid, 28, 200);
				if(GetPlayerWeapon(playerid) == 29) GiveZaiatWeapon(playerid, 29, 200);
				if(GetPlayerWeapon(playerid) == 32) GiveZaiatWeapon(playerid, 32, 200);
				format(string, sizeof(string), "* %s has bought 200 light-machinegun bullets for $%d.", RPN(playerid), price);
		    }
		    case 5:
		    {
		   	 	if(BizInfo[idx][bLevel] < 4) return SendClientMessage(playerid, COLOR_GREY, "This Ammunation doesn't have this product yet.");
				if(GetPlayerWeapon(playerid) != 30 && GetPlayerWeapon(playerid) != 31) return SendClientMessage(playerid, COLOR_GREY, "You are not holding the right weapon for this type of ammo.");
				if(GetPlayerWeapon(playerid) == 30) GiveZaiatWeapon(playerid, 30, 200);
				if(GetPlayerWeapon(playerid) == 31) GiveZaiatWeapon(playerid, 31, 200);
				format(string, sizeof(string), "* %s has bought 200 heavy-machinegun bullets for $%d.", RPN(playerid), price);
		    }
		    case 6:
		    {
		        if(BizInfo[idx][bLevel] < 5) return SendClientMessage(playerid, COLOR_GREY, "This Ammunation doesn't have this product yet.");
		        new Float:Armour; GetPlayerArmour(playerid, Armour);
		        if(Armour >= 80) return SendClientMessage(playerid, COLOR_GREY, "You don't need a vest.");
				SetPlayerArmour(playerid, 80);
				format(string, sizeof(string), "* %s has bought a vest for $%d.", RPN(playerid), price);
		    }
		}
		GiveZaiatMoney(playerid, -price);
		BizInfo[idx][bMoney] += price;
		BizInfo[idx][bProducts] --;
		BizInfo[idx][bSold] ++;
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		return 1;
	}
	else if(BizInfo[idx][bType] == 4)
	{
		if(sscanf(params, "i", type)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /buy [type]");
		if(BizInfo[idx][bProducts] < 1) return SendClientMessage(playerid, COLOR_GREY, "This business is currently out of products.");
		if(type == 1) price = 50;
		else if(type == 2) price = 100;
		else if(type == 3) price = 200;
		if(PlayerInfo[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		switch(type)
		{
		    case 1:
		    {
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
		        format(string, sizeof(string), "* %s has bought a sprunk can $%d.", RPN(playerid), price);
		    }
		    case 2:
		    {
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
		        format(string, sizeof(string), "* %s has bought a bottle of beer for $%d.", RPN(playerid), price);
		    }
		    case 3:
		    {
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
		        format(string, sizeof(string), "* %s has bought a bottle of vodka for $%d.", RPN(playerid), price);
		    }
		}
		GiveZaiatMoney(playerid, -price);
		BizInfo[idx][bMoney] += price;
		BizInfo[idx][bProducts] --;
		BizInfo[idx][bSold] ++;
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	else if(BizInfo[idx][bType] == 6)
	{
		if(sscanf(params, "i", type)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /buy [type]");
		if(BizInfo[idx][bProducts] < 1) return SendClientMessage(playerid, COLOR_GREY, "This business is currently out of products.");
		if(type == 1) price = 10;
		else if(type == 2) price = 30;
		else if(type == 3) price = 50;
		if(PlayerInfo[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		new Float:pH;
		switch(type)
		{
		    case 1:
		    {
		        GetPlayerHealth(playerid, pH);
		        SetPlayerHealth(playerid, pH+20);
		        GetPlayerHealth(playerid, pH);
		        if(pH > 100) SetPlayerHealth(playerid, 100);
		        format(string, sizeof(string), "* %s has bought a small meal for $%d.", RPN(playerid), price);
		    }
		    case 2:
		    {
		        GetPlayerHealth(playerid, pH);
		        SetPlayerHealth(playerid, pH+40);
		        GetPlayerHealth(playerid, pH);
		        if(pH > 100) SetPlayerHealth(playerid, 100);
		        format(string, sizeof(string), "* %s has bought a medium meal for $%d.", RPN(playerid), price);
		    }
		    case 3:
		    {
		        SetPlayerHealth(playerid, 100);
		        format(string, sizeof(string), "* %s has bought a large meal for $%d.", RPN(playerid), price);
		    }
		}
		GiveZaiatMoney(playerid, -price);
		BizInfo[idx][bMoney] += price;
		BizInfo[idx][bProducts] --;
		BizInfo[idx][bSold] ++;
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	// Biz AutoUpgrade
	new oldlevel = BizInfo[idx][bLevel];
	if(BizInfo[idx][bLevel] == 1 && BizInfo[idx][bSold] >= 100) {BizInfo[idx][bLevel]++;}
    else if(BizInfo[idx][bLevel] == 2 && BizInfo[idx][bSold] >= 300) {BizInfo[idx][bLevel]++;}
    else if(BizInfo[idx][bLevel] == 3 && BizInfo[idx][bSold] >= 700) {BizInfo[idx][bLevel]++;}
    else if(BizInfo[idx][bLevel] == 4 && BizInfo[idx][bSold] >= 1200) {BizInfo[idx][bLevel]++;}
    if(BizInfo[idx][bLevel] > oldlevel && RPIDFN(BizInfo[idx][bOwner]) != INVALID_PLAYER_ID)
    {
	    SendClientMessage(RPIDFN(BizInfo[idx][bOwner]), COLOR_LIGHTBLUE, " Your business has been upgraded due to reaching a certain amount of sold products.");
	}
	return 1;
}

CMD:phonebook(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pPhonebook]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a phonebook.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /phonebook [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerid][pCellphone]) return SendClientMessage(playerid, COLOR_GREY, "Player has no cellphone.");
	format(string, sizeof(string), "[Phonebook] Name: %s - Ph: %d", RPN(playerb), PlayerInfo[playerb][pCellphone]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:ad(playerid, params[])
{
	new idx = GetPlayerVirtualWorld(playerid)-100, price = strlen(params) * 6, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pLevel] < 2) SendClientMessage(playerid, COLOR_GREY, "You need to be at least level 2 to create an advertisement.");
	if(idx > 0 && idx < MAX_BIZ && BizInfo[idx][bType] != 5 || idx < 1 || idx > MAX_BIZ) return SendClientMessage(playerid, COLOR_GREY, "You are not inside an Advertisement Agency.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /ad [advertisement]");
	if(strlen(params) > 64) return SendClientMessage(playerid, COLOR_GREY, "Maximum characters allowed per advertisement are 64.");
	if(BizInfo[idx][bProducts] < 1) return SendClientMessage(playerid, COLOR_GREY, "This business is currently out of products.");
	if(PlayerInfo[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
	if(HasAD[playerid]) return SendClientMessage(playerid, COLOR_GREY, " You must wait for your advertisement to be published before making a new one.");
	if(AdQueue == MAX_ADS-1) return SendClientMessage(playerid, COLOR_GREY, " There are no queue slots for your advertisement.");
	// Advertisement
	HasAD[playerid] = 1;
	if(LastAd) SendClientMessage(playerid, COLOR_LIGHTBLUE, " Your advertisement has been placed in the queue, wait for about 60 seconds maximum.");
    format(AD[AdQueue], 128, "Advertisement: %s, Contact: %s - Ph: %d", params, RPN(playerid), PlayerInfo[playerid][pCellphone]);
    iAD[AdQueue] = 0;
    format(iAdName[AdQueue], 32, "%s", BizInfo[idx][bOwner]);
    AdQueue++;
    GiveZaiatMoney(playerid, -price);
    BizInfo[idx][bMoney] += price/2;
    BizInfo[idx][bProducts] --;
    NewsMoney = price/2;
    format(string, sizeof(string), "* %s has placed an advertisement in the queue for $%d.", RPN(playerid), price);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SendClientMessage(playerid, COLOR_WHITE, " You have been charged $5 per character.");
	return 1;
}

CMD:enter(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	for(new idx=0; idx<MAX_DOORS; idx++) // Dynamic Doors
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]))
	    {
	        if(DoorInfo[idx][dIInt] == 83 && DoorInfo[idx][dIVW] == 8473 && BankBlock)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "You can't enter the bank as it is being robbed at the moment.");
	            return 1;
	        }
	        if(DoorInfo[idx][dCInt])
	        {
	            GameTextForPlayer(playerid, "~w~Loading Objects", 3500, 3);
				TogglePlayerControllable(playerid, 0);
	            SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
	            PlayerInfo[playerid][pSpawnFreeze] = 1;
	        }
	        PlayerInfo[playerid][pSpawnFreeze] = 0;
	        SetPlayerInterior(playerid, DoorInfo[idx][dIInt]);
	        SetPlayerVirtualWorld(playerid, DoorInfo[idx][dIVW]);
	        SetPlayerFacingAngle(playerid, DoorInfo[idx][dIA]);
	        SetCameraBehindPlayer(playerid);
	        SetPlayerPos(playerid, DoorInfo[idx][dIX], DoorInfo[idx][dIY], DoorInfo[idx][dIZ]);
	        return 1;
	    }
	}
	for(new idx=1; idx<MAX_BIZ; idx++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]))
		{
		    if(!BizInfo[idx][bStatus] && PlayerInfo[playerid][pBiz] != idx && !PlayerInfo[playerid][pVBiz]) return SendClientMessage(playerid, COLOR_GREY, "This business is closed.");
		    if(BizInfo[idx][bType] == 1) // 24/7 Business
		    {
		        format(string, sizeof(string), "* %s pushes the door and enters the shop.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerPos(playerid, -27.3025,-57.6649,1003.5469);
		        SetPlayerFacingAngle(playerid, 357.5915);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 6);
		        SetPlayerVirtualWorld(playerid, idx+100);
		        format(string, sizeof(string), "** Welcome to %s's 24/7 Market (( /list & /buy )) **", BizInfo[idx][bOwner]);
		        SendClientMessage(playerid, COLOR_ORANGE, string);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 2) // Clothes Shop Business
		    {
		        format(string, sizeof(string), "* %s pushes the door and enters the shop.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerPos(playerid, 207.0638,-139.9965,1003.5078);
		        SetPlayerFacingAngle(playerid, 356.3849);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 3);
		        SetPlayerVirtualWorld(playerid, idx+100);
		        format(string, sizeof(string), "** Welcome to %s's Clothes Shop (( /buyclothes & /buytoys )) **", BizInfo[idx][bOwner]);
		        SendClientMessage(playerid, COLOR_ORANGE, string);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 3) // Ammunation Business
		    {
		        format(string, sizeof(string), "* %s pushes the door and enters the shop.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerPos(playerid, 285.8044,-85.9956,1001.5229);
		        SetPlayerFacingAngle(playerid, 358.9898);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 4);
		        SetPlayerVirtualWorld(playerid, idx+100);
		        format(string, sizeof(string), "** Welcome to %s's Ammunation (( /list & /buy )) **", BizInfo[idx][bOwner]);
		        SendClientMessage(playerid, COLOR_ORANGE, string);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 4) // Club Business
		    {
		        format(string, sizeof(string), "* %s pushes the door and enters the shop.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerPos(playerid, 493.4252,-24.3061,1000.6797);
		        SetPlayerFacingAngle(playerid, 0.2432);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 17);
		        SetPlayerVirtualWorld(playerid, idx+100);
		        format(string, sizeof(string), "** Welcome to %s's Club (( /list & /buy )) **", BizInfo[idx][bOwner]);
		        SendClientMessage(playerid, COLOR_ORANGE, string);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 5) // Advertisement Agency
		    {
		        format(string, sizeof(string), "* %s pushes the door and enters the shop.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerPos(playerid, 834.1631,7.4883,1004.1797);
		        SetPlayerFacingAngle(playerid, 86.7239);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 3);
		        SetPlayerVirtualWorld(playerid, idx+100);
		        format(string, sizeof(string), "** Welcome to %s's Advertisement Agency (( /ad )) **", BizInfo[idx][bOwner]);
		        SendClientMessage(playerid, COLOR_ORANGE, string);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 6) // Fast Food
		    {
		        format(string, sizeof(string), "* %s pushes the door and enters the shop.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerPos(playerid, 372.3830,-133.2579,1001.4922);
		        SetPlayerFacingAngle(playerid, 0.4216);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 5);
		        SetPlayerVirtualWorld(playerid, idx+100);
		        format(string, sizeof(string), "** Welcome to %s's Fast Food (( /list /buy )) **", BizInfo[idx][bOwner]);
		        SendClientMessage(playerid, COLOR_ORANGE, string);
		        return 1;
		    }
		}
	}
	for(new idx=1; idx<MAX_HOUSES; idx++) // Dynamic Houses
	{
		if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]))
	    {
		    if(!HouseInfo[idx][hStatus] && PlayerInfo[playerid][pHouse] != idx && PlayerInfo[playerid][pVHouse] != idx) return SendClientMessage(playerid, COLOR_GREY, "This house is locked.");
	        format(string, sizeof(string), "* %s pushes the door and enters the house.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        SetPlayerVirtualWorld(playerid, idx+500);
			if(HouseInfo[idx][hLevel] == 1)
			{
				SetPlayerPos(playerid, 243.9951,304.9418,999.1484);
		        SetPlayerFacingAngle(playerid, 267.0980);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 1);
			}
			else if(HouseInfo[idx][hLevel] == 2)
			{
				SetPlayerPos(playerid, 2259.6702,-1135.8542,1050.6328);
		        SetPlayerFacingAngle(playerid, 267.3974);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 10);
			}
			else if(HouseInfo[idx][hLevel] == 3)
			{
				SetPlayerPos(playerid, 2308.8254,-1212.8070,1049.0234);
		        SetPlayerFacingAngle(playerid, 359.8550);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 6);
			}
			else if(HouseInfo[idx][hLevel] == 4)
			{
				SetPlayerPos(playerid, 260.7436,1237.5563,1084.2578);
		        SetPlayerFacingAngle(playerid, 1.6415);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 9);
			}
			else if(HouseInfo[idx][hLevel] == 5)
			{
				SetPlayerPos(playerid, -42.5742,1405.6521,1084.4297);
		        SetPlayerFacingAngle(playerid, 359.1347);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 8);
			}
			else if(HouseInfo[idx][hLevel] == 6)
			{
				SetPlayerPos(playerid, 2468.6787,-1698.2617,1013.5078);
		        SetPlayerFacingAngle(playerid, 89.1791);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 2);
			}
			else if(HouseInfo[idx][hLevel] == 7)
			{
				SetPlayerPos(playerid, 2365.2183,-1135.4014,1050.8750);
		        SetPlayerFacingAngle(playerid, 359.8550);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 8);
			}
			else if(HouseInfo[idx][hLevel] == 8)
			{
				SetPlayerPos(playerid, 2270.1270,-1210.4855,1047.5625);
		        SetPlayerFacingAngle(playerid, 89.4224);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 10);
			}
			else if(HouseInfo[idx][hLevel] == 9)
			{
				SetPlayerPos(playerid, 2324.4424,-1149.2057,1050.7101);
		        SetPlayerFacingAngle(playerid, 0.7248);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 12);
			}
			else if(HouseInfo[idx][hLevel] == 10)
			{
				SetPlayerPos(playerid, 83.0863,1322.3020,1083.8662);
		        SetPlayerFacingAngle(playerid, 359.5183);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 9);
			}
	        return 1;
		}
	}
	return 1;
}


CMD:exit(playerid, params[])
{
	new done, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    for(new idx=0; idx<MAX_DOORS; idx++) // Dynamic Doors
	{
	    if(!done && IsPlayerInRangeOfPoint(playerid, 2, DoorInfo[idx][dIX], DoorInfo[idx][dIY], DoorInfo[idx][dIZ]) && GetPlayerVirtualWorld(playerid) == DoorInfo[idx][dIVW] && GetPlayerInterior(playerid) == DoorInfo[idx][dIInt])
	    {
	        if(BankRobber[playerid] && BankBlock && GetPlayerInterior(playerid) == 83 && GetPlayerVirtualWorld(playerid) == 8473)
	        {
	       	    new Rob = BankRobber[playerid]-1;
			    DisablePlayerCheckpoint(playerid);
				BankRobbersCount --;
				format(BankRobbers[Rob], MAX_PLAYER_NAME, "");
				DeliverMoney[playerid] = 0;
				//
				foreach(Player, i)
				{
				    if(BankRobber[i] || PlayerInfo[i][pFac] == 1)
				    {
						if(Rob == 0) TextDrawHideForPlayer(i, Textdraw1);
						else if(Rob == 1) TextDrawHideForPlayer(i, Textdraw2);
						else if(Rob == 2) TextDrawHideForPlayer(i, Textdraw3);
						else if(Rob == 3) TextDrawHideForPlayer(i, Textdraw4);
						else if(Rob == 4) TextDrawHideForPlayer(i, Textdraw5);
					}
				}
				format(string, sizeof(string), "** %s has went out of the bank before loading money and has failed the robbery. **", RPN(playerid));
				SendRobberyMessage(COLOR_LIGHTRED, string);
				SendCopMessage(COLOR_LIGHTRED, string);
				BankRobber[playerid] = 0;
				if(BankRobbersCount == 0)
				{
					TextDrawHideForAll(Textdraw0);
					TextDrawHideForAll(Textdraw1);
					TextDrawHideForAll(Textdraw2);
					TextDrawHideForAll(Textdraw3);
					TextDrawHideForAll(Textdraw4);
					TextDrawHideForAll(Textdraw5);
					BankRobbery = 0;
					RobberyStarted = 0;
					format(string, sizeof(string), "** The bank robbery has ended, $%d were stolen and $%d were saved. **", TotalStolen*10000, (TotalRobbers*10000-(TotalStolen*10000)));
					SendClientMessageToAll(COLOR_YELLOW, string);
					TotalRobbers = 0;
					new copsonline;
					foreach(Player, i)
					{
					    if(IsACop(i)) copsonline++;
					}
					foreach(Player, i)
					{
					    if(IsACop(i))
					    {
							new Saved = (TotalRobbers*10000-(TotalStolen*10000));
							GiveZaiatMoney(i, Saved/copsonline);
							format(string, sizeof(string), "** You have received your cut from the saved money. ($%d)", Saved/copsonline);
							SendClientMessage(i, COLOR_LIME, string);
					    }
					}
				}
	            return 1;
	        }
	        if(DoorInfo[idx][dCExt])
	        {
	            GameTextForPlayer(playerid, "~w~Loading Objects", 3500, 3);
				TogglePlayerControllable(playerid, 0);
	            SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
	            PlayerInfo[playerid][pSpawnFreeze] = 1;
	        }
	        PlayerInfo[playerid][pSpawnFreeze] = 0;
	        SetPlayerInterior(playerid, DoorInfo[idx][dOInt]);
	        SetPlayerVirtualWorld(playerid, DoorInfo[idx][dOVW]);
	        SetPlayerFacingAngle(playerid, DoorInfo[idx][dOA]);
	        SetCameraBehindPlayer(playerid);
	        SetPlayerPos(playerid, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]);
	        done = 1;
	    }
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 243.9951,304.9418,999.1484) || IsPlayerInRangeOfPoint(playerid, 2, 2259.6702,-1135.8542,1050.6328) || IsPlayerInRangeOfPoint(playerid, 2, 2308.8254,-1212.8070,1049.0234) || IsPlayerInRangeOfPoint(playerid, 2, 260.7436,1237.5563,1084.2578)
	|| IsPlayerInRangeOfPoint(playerid, 2, -42.5742,1405.6521,1084.4297) || IsPlayerInRangeOfPoint(playerid, 2, 2468.6787,-1698.2617,1013.5078) || IsPlayerInRangeOfPoint(playerid, 2, 2365.2183,-1135.4014,1050.8750) || IsPlayerInRangeOfPoint(playerid, 2, 2270.1270,-1210.4855,1047.5625)
	|| IsPlayerInRangeOfPoint(playerid, 2, 2324.4424,-1149.2057,1050.7101) || IsPlayerInRangeOfPoint(playerid, 2, 83.0863,1322.3020,1083.8662)) // Houses
	{
	    new idx;
		idx = GetPlayerVirtualWorld(playerid)-500;
		if(!done && idx < MAX_HOUSES && HouseInfo[idx][hLevel])
		{
			format(string, sizeof(string), "* %s pushes the door and exits the house.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        SetPlayerPos(playerid, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]);
	        SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);
	        done = 1;
        }
	}
    if(IsPlayerInRangeOfPoint(playerid, 2, -27.3025,-57.6649,1003.5469) || IsPlayerInRangeOfPoint(playerid, 2, 207.0638,-139.9965,1003.5078) || IsPlayerInRangeOfPoint(playerid, 2, 285.8044,-85.9956,1001.5229) || IsPlayerInRangeOfPoint(playerid, 2, 493.4252,-24.3061,1000.6797) || IsPlayerInRangeOfPoint(playerid, 2, 834.1631,7.4883,1004.1797) || IsPlayerInRangeOfPoint(playerid, 2, 372.3830,-133.2579,1001.4922)) // 24/7 || Clothes Shop || Ammunation || Club || Advertisement Agency || FastFood
	{
	    new idx;
		idx = GetPlayerVirtualWorld(playerid)-100;
		if(!done && idx < MAX_BIZ && BizInfo[idx][bType])
		{
			format(string, sizeof(string), "* %s pushes the door and exits the shop.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        SetPlayerPos(playerid, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]);
	        SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);
        }
        done = 1;
	}
	return 1;
}

CMD:stats(playerid, params[])
{
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	ShowStats(playerid, playerid);
	return 1;
}

CMD:bizstats(playerid, params[])
{
	new string[128], playerb = playerid, status[16], status2[16];
	// Business Status for non-owners
	if(PlayerInfo[playerb][pBiz]) format(status, sizeof(status), "%s", RBS(PlayerInfo[playerb][pBiz]));
	else if(!PlayerInfo[playerb][pBiz]) format(status, sizeof(status), "None");
	if(PlayerInfo[playerb][pVBiz]) format(status2, sizeof(status2), "%s", RBS(PlayerInfo[playerb][pVBiz]));
	else if(!PlayerInfo[playerb][pVBiz]) format(status2, sizeof(status2), "None");
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "_____________________________________________________");
	format(string, sizeof(string), "Businesses of %s", RPN(playerb));
	SendClientMessage(playerid, COLOR_ORANGE, string);
	format(string, sizeof(string), "Business 1: %s | ID: %s | Level: %s | Status: %s | Products: %s | Vault: %s", RBT(PlayerInfo[playerb][pBiz]), RPBK(playerb), RPBL(playerb),status, RPBP(playerb), RPBM(playerb));
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Business 2: %s | ID: %s | Level: %s | Status: %s | Products: %s | Vault: %s", RBT(PlayerInfo[playerb][pVBiz]), RPVIPBK(playerb), RPVIPBL(playerb),status2, RPVIPBP(playerb), RPVIPBM(playerb));
	SendClientMessage(playerid, COLOR_FADE2, string);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "_____________________________________________________");
	return 1;
}

CMD:helpme(playerid, params[])
{
    new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pHelper]) return SendClientMessage(playerid, COLOR_GREY, "You can't submit a help request as a helper.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /helpme [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(HelpTime[playerid] > 0)
	{
	    format(string, sizeof(string), "You need to wait %d more seconds before making a help message again.", HelpTime[playerid]);
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}
	format(string, sizeof(string), "Help Report from {FF6347}[%d] {FFFF91}%s: %s", playerid, RPN(playerid), params);
	SendHelperMessage(COLOR_REPORT, 1, string);
	format(string, sizeof(string), "Help Report from [%d] %s: %s", playerid, RPN(playerid), params);
	Log("logs/hreports.log", string);
	SendClientMessage(playerid, COLOR_YELLOW, "Your report message has been sent to online helpers.");
	HelpTime[playerid] = 25;
	SetTimerEx("HelpTimer", 1000, false, "i", playerid);
	return 1;
}

CMD:report(playerid, params[])
{
    new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /report [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(ReportTime[playerid] > 0)
	{
	    format(string, sizeof(string), "You need to wait %d more seconds before making a report message again.", ReportTime[playerid]);
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}
	format(string, sizeof(string), "Report from {FF6347}[%d] {FFFF91}%s: %s", playerid, RPN(playerid), params);
	SendAdminMessage(COLOR_REPORT, 1, string);
	format(string, sizeof(string), "Report from [%d] %s: %s", playerid, RPN(playerid), params);
	Log("logs/reports.log", string);
	SendClientMessage(playerid, COLOR_YELLOW, "Your report message has been sent to online admins.");
	ReportTime[playerid] = 25;
	SetTimerEx("ReportTimer", 1000, false, "i", playerid);
	return 1;
}


CMD:b(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /b [text] (Local OOC Chat)");
	if(AntiAdv(playerid, params)) return 1;
	format(string, sizeof(string), "%s: (( %s ))", RPN(playerid), params);
	SendNearbyMessage(playerid, 10, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	Log("logs/chat.log", string);
	return 1;
}

CMD:s(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/s)hout [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(strlen(PlayerInfo[playerid][pAccent])) format(string, sizeof(string), "%s shouts: [%s Accent] %s!", RPN(playerid), PlayerInfo[playerid][pAccent], params);
	else format(string, sizeof(string), "%s shouts: %s!", RPN(playerid), params);
	SendNearbyMessage(playerid, 30, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	Log("logs/chat.log", string);
	return 1;
}

CMD:l(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/l)ow [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(strlen(PlayerInfo[playerid][pAccent])) format(string, sizeof(string), "%s mummbles: [%s Accent] %s", RPN(playerid), PlayerInfo[playerid][pAccent], params);
	else format(string, sizeof(string), "%s mumbles: %s", RPN(playerid), params);
	SendNearbyMessage(playerid, 1.5, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	Log("logs/chat.log", string);
	return 1;
}

CMD:w(playerid, params[])
{
    new playerb, text[128], string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "us[128]", playerb, text)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/w)hisper [playerid] [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!strlen(text)) return SendClientMessage(playerid, COLOR_GREY, "You haven't entered any text to whisper.");
	if(IsPlayerNearPlayer(playerid, playerb, 1))
	{

		format(string, sizeof(string), "* %s leans towards %s and whispers in their ears.", RPN(playerid), RPN(playerb));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		if(strlen(PlayerInfo[playerid][pAccent])) format(string, sizeof(string), "Whisper to %s: [%s Accent] %s", RPN(playerb), PlayerInfo[playerid][pAccent], text);
		else format(string, sizeof(string), "Whisper to %s: %s", RPN(playerb), text);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		if(strlen(PlayerInfo[playerid][pAccent])) format(string, sizeof(string), "Whisper from %s: [%s Accent] %s", RPN(playerid), PlayerInfo[playerid][pAccent], text);
		else format(string, sizeof(string), "Whisper from %s: %s", RPN(playerid), text);
		SendClientMessage(playerb, COLOR_YELLOW, string);
		new log[256];
		format(log, sizeof(log), "%s to %s: %s", RPN(playerid), RPN(playerb), text);
		Log("logs/whisper.log", log);
		foreach(Player, i)
		{
		    if(PlayerInfo[i][pAdmin] >= 6 && Whispers[i] && i != playerid && i != playerb)
		    {
		        format(log, sizeof(log), "[WHISPER] %s to %s: %s", RPN(playerid), RPN(playerb), text);
		        SendClientMessage(i, COLOR_YELLOW, log);
		    }
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not near that player.");
	}
	return 1;
}

CMD:me(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /me [action]");
	if(AntiAdv(playerid, params)) return 1;
	format(string, sizeof(string), "* %s %s", RPN(playerid), params);
 	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:do(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /me [action]");
	if(AntiAdv(playerid, params)) return 1;
	format(string, sizeof(string), "* %s (( %s ))", params, RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

// ANIMATIONS

CMD:animlist(playerid, params[])
{
	return cmd_animhelp(playerid, params);
}

CMD:animhelp(playerid, params[])
{
	SendClientMessage(playerid, COLOR_GREEN,"_________________________________________________________________________________");
	SendClientMessage(playerid,COLOR_WHITE,"Available Animations:");
	SendClientMessage(playerid,0xB4B5B7FF,"/handsup /handsdown /drunk /bomb /laugh /lookout /dj /skate /dance /crossarms /fucku");
	SendClientMessage(playerid,0xB4B5B7FF,"/hide /vomit /wave /taichi /kiss /robman /reload /deal /fallover /crack");
	SendClientMessage(playerid,0xBFC0C2FF,"/talk /dance /gift /piss /lean /cpr /cry /cheer /pedmove /wank /bitchslap");
	SendClientMessage(playerid,0xCBCCCEFF,"/slapass /fuckme /bj /rap /hitch /stand /greet /followme /getjiggy");
	SendClientMessage(playerid,0xD8D8D8FF,"/what /signal /crabs /salute /stop /washhands /gesture /hurt /showoff /dive /relax");
	SendClientMessage(playerid,0xD8D8D8FF,"/checktime /rob /sitdown /sleep /smoke /nobreath /sit");
	SendClientMessage(playerid, COLOR_GREEN,"_________________________________________________________________________________");
	return 1;
}

CMD:sit(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sit [1-5]");
	if(animid < 1 || animid > 5) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sit [1-5]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"BEACH","bather",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"BEACH","Lay_Bac_Loop",4.0,1,0,0,0,0);
		case 3: LoopingAnim(playerid,"BEACH","ParkSit_W_loop",4.0,1,0,0,0,0);
		case 4: LoopingAnim(playerid,"BEACH","SitnWait_loop_W",4.0,1,0,0,0,0);
		case 5: LoopingAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0,1,0,0,0,0);
	}
	return 1;
}

CMD:nobreath(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /nobreath [1-2]");
	if(animid < 1 || animid > 2) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sit [1-2]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"PED","IDLE_tired",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"FAT","IDLE_tired",4.0,1,0,0,0,0);
	}
	return 1;
}

CMD:sitdown(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sitdown [1-7]");
	if(animid < 1 || animid > 7) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sitdown [1-7]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"Attractors","Stepsit_in",4.0,0,0,0,1,0); // Not looping
		case 2: LoopingAnim(playerid,"CRIB","PED_Console_Loop",4.0,1,0,0,0,0);
		case 3: LoopingAnim(playerid,"INT_HOUSE","LOU_In",4.0,0,0,0,1,0); // Not looping
		case 4: LoopingAnim(playerid,"MISC","SEAT_LR",4.0,1,0,0,0,0);
		case 5: LoopingAnim(playerid,"MISC","Seat_talk_01",4.0,1,0,0,0,0);
		case 6: LoopingAnim(playerid,"MISC","Seat_talk_02",4.0,1,0,0,0,0);
		case 7: LoopingAnim(playerid,"ped","SEAT_down",4.0,0,0,0,1,0); // Not looping
	}
	return 1;
}

CMD:handsup(playerid, params[])
{
    new string[128];
   	if(IsPlayerCuffed(playerid) || IsPlayerTazed(playerid) || IsPlayerTied(playerid) || Boxing[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You can't do that at this time.");
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
	format(string, sizeof(string), "* %s puts their hands up.", RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SendClientMessage(playerid, COLOR_WHITE, " You can put your hands down again using /handsdown.");
	return 1;
}

CMD:handsdown(playerid, params[])
{
	new string[128];
	if(IsPlayerCuffed(playerid) || IsPlayerTazed(playerid) || IsPlayerTied(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You can't do that at this time.");
	if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_HANDSUP) return SendClientMessage(playerid, COLOR_GREY, "Your hands are already down.");
	ClearAnimations(playerid);
	format(string, sizeof(string), "* %s puts their hands down.", RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:dance(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /dance [1-4]");
	if(animid < 1 || animid > 4) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /dance [1-4]");
	switch(animid)
	{
		case 1: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
		case 2: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
		case 3: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
		case 4: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
	}
	return 1;
}

CMD:crossarms(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /crossarms [1-5]");
	if(animid < 1 || animid > 5) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /crossarms [1-5]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
		case 2: LoopingAnim(playerid, "DEALER", "DEALER_IDLE", 4.0, 0, 1, 1, 1, -1);
		case 3: LoopingAnim(playerid, "DEALER", "DEALER_IDLE_01", 4.0, 0, 1, 1, 1, -1);
		case 4: LoopingAnim(playerid,"GRAVEYARD","mrnM_loop",4.0,1,0,0,0,0);
		case 5: LoopingAnim(playerid,"GRAVEYARD","prst_loopa",4.0,1,0,0,0,0);
	}
	return 1;
}

CMD:getjiggy(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /getjiggy [1-10]");
	if(animid < 1 || animid > 10) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /getjiggy [1-10]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"DANCING","DAN_Down_A",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"DANCING","DAN_Left_A",4.0,1,0,0,0,0);
		case 3: LoopingAnim(playerid,"DANCING","DAN_Loop_A",4.0,1,0,0,0,0);
		case 4: LoopingAnim(playerid,"DANCING","DAN_Right_A",4.0,1,0,0,0,0);
		case 5: LoopingAnim(playerid,"DANCING","DAN_Up_A",4.0,1,0,0,0,0);
		case 6: LoopingAnim(playerid,"DANCING","dnce_M_a",4.0,1,0,0,0,0);
		case 7: LoopingAnim(playerid,"DANCING","dnce_M_b",4.0,1,0,0,0,0);
		case 8: LoopingAnim(playerid,"DANCING","dnce_M_c",4.0,1,0,0,0,0);
		case 9: LoopingAnim(playerid,"DANCING","dnce_M_c",4.0,1,0,0,0,0);
		case 10: LoopingAnim(playerid,"DANCING","dnce_M_d",4.0,1,0,0,0,0);
	}
	return 1;
}

CMD:pedmove(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /pedmove[1-26]");
	if(animid < 1 || animid > 26) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /pedmove [1-26]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"PED","JOG_femaleA",4.0,1,1,1,1,1);
		case 2: LoopingAnim(playerid,"PED","JOG_maleA",4.0,1,1,1,1,1);
		case 3: LoopingAnim(playerid,"PED","WOMAN_walkfatold",4.0,1,1,1,1,1);
		case 4: LoopingAnim(playerid,"PED","run_fat",4.0,1,1,1,1,1);
		case 5: LoopingAnim(playerid,"PED","run_fatold",4.0,1,1,1,1,1);
		case 6: LoopingAnim(playerid,"PED","run_old",4.0,1,1,1,1,1);
		case 7: LoopingAnim(playerid,"PED","Run_Wuzi",4.0,1,1,1,1,1);
		case 8: LoopingAnim(playerid,"PED","swat_run",4.0,1,1,1,1,1);
		case 9: LoopingAnim(playerid,"PED","WALK_fat",4.0,1,1,1,1,1);
		case 10: LoopingAnim(playerid,"PED","WALK_fatold",4.0,1,1,1,1,1);
		case 11: LoopingAnim(playerid,"PED","WALK_gang1",4.0,1,1,1,1,1);
		case 12: LoopingAnim(playerid,"PED","WALK_gang2",4.0,1,1,1,1,1);
		case 13: LoopingAnim(playerid,"PED","WALK_old",4.0,1,1,1,1,1);
		case 14: LoopingAnim(playerid,"PED","WALK_shuffle",4.0,1,1,1,1,1);
		case 15: LoopingAnim(playerid,"PED","woman_run",4.0,1,1,1,1,1);
		case 16: LoopingAnim(playerid,"PED","WOMAN_runbusy",4.0,1,1,1,1,1);
		case 17: LoopingAnim(playerid,"PED","WOMAN_runfatold",4.0,1,1,1,1,1);
		case 18: LoopingAnim(playerid,"PED","woman_runpanic",4.0,1,1,1,1,1);
		case 19: LoopingAnim(playerid,"PED","WOMAN_runsexy",4.0,1,1,1,1,1);
		case 20: LoopingAnim(playerid,"PED","WOMAN_walkbusy",4.0,1,1,1,1,1);
		case 21: LoopingAnim(playerid,"PED","WOMAN_walkfatold",4.0,1,1,1,1,1);
		case 22: LoopingAnim(playerid,"PED","WOMAN_walknorm",4.0,1,1,1,1,1);
		case 23: LoopingAnim(playerid,"PED","WOMAN_walkold",4.0,1,1,1,1,1);
		case 24: LoopingAnim(playerid,"PED","WOMAN_walkpro",4.0,1,1,1,1,1);
		case 25: LoopingAnim(playerid,"PED","WOMAN_walksexy",4.0,1,1,1,1,1);
		case 26: LoopingAnim(playerid,"PED","WOMAN_walkshop",4.0,1,1,1,1,1);
	}
	return 1;
}

CMD:rap(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /rap [1-3]");
	if(animid < 1 || animid > 3) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /rap [1-3]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"RAPPING","RAP_A_Loop",4.0,1,1,1,1,0);
		case 2: LoopingAnim(playerid,"RAPPING","RAP_B_Loop",4.0,1,1,1,1,0);
		case 3: LoopingAnim(playerid,"RAPPING","RAP_C_Loop",4.0,1,1,1,1,0);
	}
	return 1;
}

CMD:reload(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /reload [1-5]");
	if(animid < 1 || animid > 5) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /reload [1-5]");
	switch(animid)
	{
		case 1: ApplyAnimation(playerid,"COLT45","colt45_reload", 4.0, 0, 0, 0, 0, 0);
		case 2: ApplyAnimation(playerid,"COLT45","sawnoff_reload", 4.0, 0, 0, 0, 0, 0);
		case 3: ApplyAnimation(playerid,"BUDDY","buddy_reload", 4.0, 0, 0, 0, 0, 0);
		case 4: ApplyAnimation(playerid,"RIFLE","RIFLE_load", 4.0, 0, 0, 0, 0, 0);
		case 5: ApplyAnimation(playerid,"PYTHON","python_reload", 4.0, 0, 0, 0, 0, 0);
	}
	return 1;
}

CMD:dj(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /dj [1-4]");
	if(animid < 1 || animid > 4) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /dj [1-4]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"SCRATCHING","scdldlp",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"SCRATCHING","scdlulp",4.0,1,0,0,0,0);
		case 3: LoopingAnim(playerid,"SCRATCHING","scdrdlp",4.0,1,0,0,0,0);
		case 4: LoopingAnim(playerid,"SCRATCHING","scdrulp",4.0,1,0,0,0,0);
	}
	return 1;
}

CMD:skate(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /skate [1-3]");
	if(animid < 1 || animid > 3) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /skate [1-3]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"SKATE","skate_idle", 4.0, 1, 1, 1, 1, 1);
		case 2: LoopingAnim(playerid,"SKATE","skate_run", 4.0, 1, 1, 1, 1, 1);
		case 3: LoopingAnim(playerid,"SKATE","skate_sprint", 4.0, 1, 1, 1, 1, 1);
	}
	return 1;
}

CMD:wank(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /wank [1-3]");
	if(animid < 1 || animid > 3) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /wank [1-3]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"PAULNMAC","wank_in",4.0,1,1,1,1,0);
		case 2: LoopingAnim(playerid,"PAULNMAC","wank_loop",4.0,1,1,1,1,0);
		case 3: OnePlayAnim(playerid,"PAULNMAC","wank_out",4.0,0,0,0,0,0);
	}
	return 1;
}

CMD:fuckme(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fuckme [1-8]");
	if(animid < 1 || animid > 8) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fuckme [1-8]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"SNM","SPANKING_IDLEW",4.1,0,1,1,1,0);
		case 2: LoopingAnim(playerid,"SNM","SPANKING_IDLEP",4.1,0,1,1,1,0);
		case 3: LoopingAnim(playerid,"SNM","SPANKINGW",4.1,0,1,1,1,0);
		case 4: LoopingAnim(playerid,"SNM","SPANKINGP",4.1,0,1,1,1,0);
		case 5: LoopingAnim(playerid,"SNM","SPANKEDW",4.1,0,1,1,1,0);
		case 6: LoopingAnim(playerid,"SNM","SPANKEDP",4.1,0,1,1,1,0);
		case 7: LoopingAnim(playerid,"SNM","SPANKING_ENDW",4.1,0,1,1,1,0);
		case 8: LoopingAnim(playerid,"SNM","SPANKING_ENDP",4.1,0,1,1,1,0);
	}
	return 1;
}

CMD:bj(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bj [1-12]");
	if(animid < 1 || animid > 12) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bj [1-12]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_START_P",4.1,0,1,1,1,0);
		case 2: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_START_W",4.1,0,1,1,1,0);
		case 3: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,0,1,1,1,0);
		case 4: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_W",4.1,0,1,1,1,0);
		case 5: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_END_P",4.1,0,1,1,1,0);
		case 6: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_END_W",4.1,0,1,1,1,0);
		case 7: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_START_P",4.1,0,1,1,1,0);
		case 8: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_START_W",4.1,0,1,1,1,0);
		case 9: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_LOOP_P",4.1,0,1,1,1,0);
		case 10: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_LOOP_W",4.1,0,1,1,1,0);
		case 11: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_END_P",4.1,0,1,1,1,0);
		case 12: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_END_W",4.1,0,1,1,1,0);
	}
	return 1;
}

CMD:signal(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /signal [1-2]");
	if(animid < 1 || animid > 2) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /signal [1-2]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"POLICE","CopTraf_Come",4.0,0,0,0,0,0);
		case 2: LoopingAnim(playerid,"POLICE","CopTraf_Stop",4.0,0,0,0,0,0);
	}
	return 1;
}

CMD:lean(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /lean [1-2]");
	if(animid < 1 || animid > 2) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /lean [1-2]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"GANGS","leanIDLE",4.1,0,0,0,1,0);
		case 2: LoopingAnim(playerid,"MISC","Plyrlean_loop",4.1,0,0,0,1,0);
	}
	return 1;
}

CMD:sleep(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sleep [1-2]");
	if(animid < 1 || animid > 2) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sleep [1-2]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"CRACK","crckdeth4",4.0,0,0,0,1,0);
		case 2: LoopingAnim(playerid,"CRACK","crckidle2",4.0,0,0,0,1,0);
	}
	return 1;
}

CMD:fallover(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fallover [1-4]");
	if(animid < 1 || animid > 4) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fallover [1-4]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"KNIFE","KILL_Knife_Ped_Die",4.0,0,1,1,1,0);
		case 2: LoopingAnim(playerid,"PED","KO_shot_face",4.0,0,1,1,1,0);
		case 3: LoopingAnim(playerid,"PED","KO_shot_stom",4.0,0,1,1,1,0);
		case 4: LoopingAnim(playerid, "PED", "BIKE_fallR", 4.0, 0, 1, 1, 0, 0);
	}
	return 1;
}

CMD:wave(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /wave [1-3]");
	if(animid < 1 || animid > 3) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /wave [1-3]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"ON_LOOKERS","wave_loop",4.0,1,0,0,0,0);
		case 2: OnePlayAnim(playerid,"KISSING","gfwave2",4.0,0,0,0,0,0);
		case 3: OnePlayAnim(playerid,"PED","endchat_03",4.0,0,0,0,0,0);
	}
	return 1;
}

CMD:cheer(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /cheer [1-8]");
	if(animid < 1 || animid > 8) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /cheer [1-8]");
	switch(animid)
	{
		case 1: OnePlayAnim(playerid,"ON_LOOKERS","shout_01",4.0,0,0,0,0,0);
		case 2: OnePlayAnim(playerid,"ON_LOOKERS","shout_02",4.0,0,0,0,0,0);
		case 3: OnePlayAnim(playerid,"ON_LOOKERS","shout_in",4.0,0,0,0,0,0);
		case 4: LoopingAnim(playerid,"RIOT","RIOT_ANGRY_B",4.0,1,0,0,0,0);
		case 5: OnePlayAnim(playerid,"RIOT","RIOT_CHANT",4.0,0,0,0,0,0);
		case 6: OnePlayAnim(playerid,"RIOT","RIOT_shout",4.0,0,0,0,0,0);
		case 7: OnePlayAnim(playerid,"STRIP","PUN_HOLLER",4.0,0,0,0,0,0);
		case 8: OnePlayAnim(playerid,"OTB","wtchrace_win",4.0,0,0,0,0,0);
	}
	return 1;
}

CMD:deal(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deal [1-2]");
	if(animid < 1 || animid > 2) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deal [1-2]");
	switch(animid)
	{
		case 1: OnePlayAnim(playerid,"DEALER", "DEALER_DEAL",4.0,0,0,0,0,0);
		case 2: OnePlayAnim(playerid,"DEALER","shop_pay",4.0,0,0,0,0,0);
	}
	return 1;
}

CMD:talk(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /talk [1-7]");
	if(animid < 1 || animid > 7) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /talk [1-7]");
	switch(animid)
	{
		case 1: OnePlayAnim(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,0);
		case 2: OnePlayAnim(playerid,"GANGS","prtial_gngtlkA",4.0,0,0,0,0,0);
		case 3: OnePlayAnim(playerid,"GANGS","prtial_gngtlkB",4.0,0,0,0,0,0);
		case 4: OnePlayAnim(playerid,"GANGS","prtial_gngtlkE",4.0,0,0,0,0,0);
		case 5: OnePlayAnim(playerid,"GANGS","prtial_gngtlkF",4.0,0,0,0,0,0);
		case 6: OnePlayAnim(playerid,"GANGS","prtial_gngtlkG",4.0,0,0,0,0,0);
		case 7: OnePlayAnim(playerid,"GANGS","prtial_gngtlkH",4.0,0,0,0,0,0);
	}
	return 1;
}

CMD:gesture(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gesture [1-15]");
	if(animid < 1 || animid > 15) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gesture [1-15]");
	switch(animid)
	{
		case 1: OnePlayAnim(playerid,"GHANDS","gsign1",4.0,0,0,0,0,0);
		case 2: OnePlayAnim(playerid,"GHANDS","gsign1LH",4.0,0,0,0,0,0);
		case 3: OnePlayAnim(playerid,"GHANDS","gsign2",4.0,0,0,0,0,0);
		case 4: OnePlayAnim(playerid,"GHANDS","gsign2LH",4.0,0,0,0,0,0);
		case 5: OnePlayAnim(playerid,"GHANDS","gsign3",4.0,0,0,0,0,0);
		case 6: OnePlayAnim(playerid,"GHANDS","gsign3LH",4.0,0,0,0,0,0);
		case 7: OnePlayAnim(playerid,"GHANDS","gsign4",4.0,0,0,0,0,0);
		case 8: OnePlayAnim(playerid,"GHANDS","gsign4LH",4.0,0,0,0,0,0);
		case 9: OnePlayAnim(playerid,"GHANDS","gsign5",4.0,0,0,0,0,0);
		case 10: OnePlayAnim(playerid,"GHANDS","gsign5",4.0,0,0,0,0,0);
		case 11: OnePlayAnim(playerid,"GHANDS","gsign5LH",4.0,0,0,0,0,0);
		case 12: OnePlayAnim(playerid,"GANGS","Invite_No",4.0,0,0,0,0,0);
		case 13: OnePlayAnim(playerid,"GANGS","Invite_Yes",4.0,0,0,0,0,0);
		case 14: OnePlayAnim(playerid,"GANGS","prtial_gngtlkD",4.0,0,0,0,0,0);
		case 15: OnePlayAnim(playerid,"GANGS","smkcig_prtl",4.0,0,0,0,0,0);
	}
	return 1;
}

CMD:smoke(playerid, params[])
{
	new string[128];
	if(sscanf(params, "s[8]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /smoke [type]");
		SendClientMessage(playerid, COLOR_GREY, "TYPES: Cigar | Weed | Crack");
		return 1;
	}
	if(IsPlayerCuffed(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	if(!strcmp(params, "cigar", true))
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
		if(!PlayerInfo[playerid][pCigar]) return SendClientMessage(playerid, COLOR_GREY, "You don't have any cigars on you.");
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
		PlayerInfo[playerid][pCigar] --;
		format(string, sizeof(string), "* %s takes out a cuban cigar and lights it up.", RPN(playerid));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	else if(!strcmp(params, "weed", true))
	{
	    //if(GetPlayerDrunkLevel(playerid) >= 5000) return SendClientMessage(playerid, COLOR_GREY, "You are too drunk/stoned to use drugs.");
    	if(PlayerInfo[playerid][pStoned] >= 5) return SendClientMessage(playerid, COLOR_GREY, "You are too stoned to use drugs.");
	    new Float:H;
	    if(!PlayerInfo[playerid][pWeed]) return SendClientMessage(playerid, COLOR_GREY, "You don't have any weed on you.");
	    if(DrugTimeout[playerid]) return SendClientMessage(playerid, COLOR_GREY, " You can't use drugs at the moment.");
	    GetPlayerHealth(playerid, H);
	    if(H >= 100) return SendClientMessage(playerid, COLOR_GREY, "You have full health already.");
	    // Animation
	    if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",8,0,0,0,0,0,1);
		else ApplyAnimation(playerid,"ped","Smoke_in_car",2.1,0,0,0,0,0,1);
		// Effects
	    SetPlayerHealth(playerid, H+10);
	    GetPlayerHealth(playerid, H);
	    if(H > 100) SetPlayerHealth(playerid, 100);
	    PlayerInfo[playerid][pWeed] --;
	    //SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid)+1700);
	    PlayerInfo[playerid][pStoned] ++;
		format(string, sizeof(string), "* %s takes out a joint and smokes it.", RPN(playerid));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		DrugTimeout[playerid] = 5;
		SetTimerEx("DrugTimer", 5000, false, "i", playerid);
		/*if(GetPlayerDrunkLevel(playerid) >= 5000)
		{
			SetPlayerWeather(playerid, -66);
			SetTimerEx("Stoned", 8000, false, "i", playerid);
		}*/
		if(PlayerInfo[playerid][pStoned] >= 3)
		{
			SetPlayerWeather(playerid, -66);
			KillTimer(StonedTimer[playerid]);
			StonedTimer[playerid] = SetTimerEx("Stoned", 30000, false, "i", playerid);
		}
		if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",8,0,0,0,0,0,1);
		else ApplyAnimation(playerid,"ped","Smoke_in_car",2.1,0,0,0,0,0,1);
	}
	else if(!strcmp(params, "crack", true))
	{
	    //if(GetPlayerDrunkLevel(playerid) >= 5000) return SendClientMessage(playerid, COLOR_GREY, "You are too drunk/stoned to use drugs.");
    	if(PlayerInfo[playerid][pStoned] >= 5) return SendClientMessage(playerid, COLOR_GREY, "You are too stoned to use drugs.");
	    new Float:A;
	    if(!PlayerInfo[playerid][pCrack]) return SendClientMessage(playerid, COLOR_GREY, "You don't have any crack on you.");
	    if(DrugTimeout[playerid]) return SendClientMessage(playerid, COLOR_GREY, " You can't use drugs at the moment.");
	    GetPlayerArmour(playerid, A);
	    if(A >= 100) return SendClientMessage(playerid, COLOR_GREY, "You have full armor already.");
	    // Animation
	    if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",2.1,0,0,0,0,0);
		else ApplyAnimation(playerid,"ped","Smoke_in_car",2.1,0,0,0,0,0);
	    // Effects
	    SetPlayerArmour(playerid, A+10);
	    GetPlayerArmour(playerid, A);
	    if(A > 100) SetPlayerArmour(playerid, 100);
	    PlayerInfo[playerid][pCrack] --;
	    //SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid)+1700);
	    PlayerInfo[playerid][pStoned] ++;
		format(string, sizeof(string), "* %s takes out a pipe, fills it with crack and smokes it.", RPN(playerid));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		DrugTimeout[playerid] = 5;
		SetTimerEx("DrugTimer", 5000, false, "i", playerid);
		/*if(GetPlayerDrunkLevel(playerid) >= 5000)
		{
			SetPlayerWeather(playerid, -68);
			SetTimerEx("Stoned", 8000, false, "i", playerid);
		}*/
		if(PlayerInfo[playerid][pStoned] >= 3)
		{
			SetPlayerWeather(playerid, -66);
			KillTimer(StonedTimer[playerid]);
			StonedTimer[playerid] = SetTimerEx("Stoned", 30000, false, "i", playerid);
		}
	}
	return 1;
}



CMD:sprunk(playerid, params[])
{
	new string[128];
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(!PlayerInfo[playerid][pSprunk]) return SendClientMessage(playerid, COLOR_GREY, "You don't have any sprunks on you.");
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
	PlayerInfo[playerid][pSprunk] --;
	format(string, sizeof(string), "* %s takes out a sprunk can and opens it up.", RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:hurt(playerid, params[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(params, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hurt [1-2]");
	if(animid < 1 || animid > 2) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hurt [1-2]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"SWAT","gnstwall_injurd",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"SWEET","Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
	}
	return 1;
}

CMD:checktime(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	OnePlayAnim(playerid, "COP_AMBIENT", "Coplook_watch",4.0,0,0,0,0,0);
	return 1;
}

CMD:relax(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid, "CRACK", "crckidle1",4.0,0,1,1,1,-1);
	return 1;
}

CMD:dive(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid,"DODGE","Crush_Jump",4.0,0,1,1,1,0);
	return 1;
}

CMD:showoff(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	OnePlayAnim(playerid,"Freeweights","gym_free_celebrate",4.0,0,0,0,0,0);
	return 1;
}

CMD:crabs(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	OnePlayAnim(playerid,"MISC","Scratchballs_01",4.0,0,0,0,0,0);
	return 1;
}

CMD:salute(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	OnePlayAnim(playerid,"ON_LOOKERS","Pointup_loop",4.0,0,0,0,0,0);
	return 1;
}

CMD:stop(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	OnePlayAnim(playerid,"PED","endchat_01",4.0,0,0,0,0,0);
	return 1;
}

CMD:washhands(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	OnePlayAnim(playerid,"BD_FIRE","wash_up",4.0,0,0,0,0,0);
	return 1;
}

CMD:cry(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid,"GRAVEYARD","mrnF_loop",4.0,1,0,0,0,0);
	return 1;
}

CMD:what(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid,"RIOT","RIOT_ANGRY", 4.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:piss(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);
	return 1;
}

CMD:followme(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid,"WUZI","Wuzi_follow",4.0,0,0,0,0,0);
	return 1;
}

CMD:greet(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid,"WUZI","Wuzi_Greet_Wuzi",4.0,0,0,0,0,0);
	return 1;
}

CMD:stand(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid,"WUZI","Wuzi_stand_loop", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:hitch(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid,"MISC","Hiker_Pose", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:bitchslap(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid,"MISC","bitchslap",4.0,0,0,0,0,0);
	return 1;
}

CMD:cpr(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	OnePlayAnim(playerid,"MEDIC","CPR",4.0,0,0,0,0,0);
	ApplyAnimation(playerid,"KISSING","gift_give",4.0,0,0,0,0,0);
	return 1;
}

CMD:gift(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid,"KISSING","gift_give",4.0,0,0,0,0,0);
	return 1;
}

CMD:slapass(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid,"SWEET","sweet_ass_slap",4.0,0,0,0,0,0);
	return 1;
}

CMD:drunk(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1);
	return 1;
}

CMD:bomb(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:rob(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, 0);
	return 1;
}

CMD:laugh(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:lookout(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:robman(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:hide(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:vomit(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:eat(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:crack(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:fucku(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid,"PED","fucku",4.0,0,0,0,0,0);
	return 1;
}

CMD:taichi(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid,"PARK","Tai_Chi_Loop", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:kiss(playerid, params[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid,"KISSING","Playa_Kiss_01",4.0,0,0,0,0,0);
	return 1;
}

CMD:bt(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pTester]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bt [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(!PlayerInfo[playerid][pAdmin]) format(string, sizeof(string), "*Tester %s: {FFFFFF}%s", RPN(playerid), params);
	else format(string, sizeof(string), "*%s %s: {FFFFFF}%s", RPALN(playerid), RPN(playerid), params);
	SendTesterMessage(COLOR_GREEN, string);
	Log("logs/betachat.log", string);
	return 1;
}


CMD:ro(playerid, params[])
{
	new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!BankRobber[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not robbing the bank.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/ro)bbery [text]");
	if(AntiAdv(playerid, params)) return 1;
	format(string, sizeof(string), "** [Bank Robbery] %s: %s", RPN(playerid), params);
	SendRobberyMessage(COLOR_LIGHTGREEN, string);
	return 1;
}

CMD:robberyhelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	SendClientMessage(playerid, COLOR_YELLOW, "BANK ROBBERY: {FFFFFF}/ro /setuprobbery /joinrobbery /acceptrobbery /startrobbery");
	return 1;
}

CMD:setuprobbery(playerid, params[])
{
	new string[128], cops;
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(IsACop(playerid) || IsAGov(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Police and Government can't rob the bank.");
	if(BankRobbery) return SendClientMessage(playerid, COLOR_GREY, "A bank robbery is already being setup.");
	if(BankRobberyTime)
	{
		format(string, sizeof(string), "You need to wait %d more hours before robbing the bank again.", BankRobberyTime);
		SendClientMessage(playerid, COLOR_GREY, string);
	    return 1;
	}
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pFac] == 1 && PlayerInfo[i][pFacDuty]) cops ++;
	}
	if(cops < 2) return SendClientMessage(playerid, COLOR_GREY, "There aren't enough police officers on duty to start a robbery.");
	BankRobbery = 1;
	format(BankRobbers[0], MAX_PLAYER_NAME, "%s", RPN(playerid));
	BankRobber[playerid] = 1;
	BankRobbersCount = 1;
	SendClientMessage(playerid, COLOR_LIGHTGREEN, " Other players can join using /joinrobbery, chat with robbers using /ro.");
	TextDrawShowForPlayer(playerid, Textdraw0);
	TextDrawSetString(Textdraw1, BankRobbers[0]);
	TextDrawShowForPlayer(playerid, Textdraw1);
	return 1;
}

CMD:joinrobbery(playerid, params[])
{
	new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(IsACop(playerid) || IsAGov(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Police and Government can't rob the bank.");
	if(!BankRobbery) return SendClientMessage(playerid, COLOR_GREY, "There's no bank robbery being setup.");
	if(BankRobber[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are already robbing the bank.");
	if(RobberyRequest[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You have already requested to join the robbery.");
	if(RobberyStarted) return SendClientMessage(playerid, COLOR_GREY, "The bank robbery has already started.");
	SendClientMessage(playerid, COLOR_LIGHTGREEN, " You have requested to join the robbery, wait for the robbery orgainzer to take an action.");
	format(string, sizeof(string), "Bank Robbery: %s [ID %d] has requested to join the bank robbery. (/acceptrobbery)", RPN(playerid), playerid);
	SendRobberyMessage(COLOR_LIGHTGREEN, string);
	RobberyRequest[playerid] = 1;
	return 1;
}


CMD:acceptrobbery(playerid, params[])
{
	new string[128], playerb;
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!BankRobbery) return SendClientMessage(playerid, COLOR_GREY, "There's no bank robbery being setup.");
	if(BankRobber[playerid] != 1) return SendClientMessage(playerid, COLOR_GREY, "You are not the bank robbery leader.");
	if(BankRobbersCount >= 5) return SendClientMessage(playerid, COLOR_GREY, "You can't have more than 5 players robbing the bank.");
	if(RobberyStarted) return SendClientMessage(playerid, COLOR_GREY, "The bank robbery has already started.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /acceptrobbery [playerid]");
	if(!RobberyRequest[playerb]) return SendClientMessage(playerid, COLOR_GREY, "Player hasn't requested to join the robbery.");
	RobberyRequest[playerb] = 0;
	BankRobbersCount ++;
	BankRobber[playerb] = BankRobbersCount;
	format(BankRobbers[BankRobbersCount-1], MAX_PLAYER_NAME, "%s", RPN(playerb));
	format(string, sizeof(string), "Bank Robbery: %s has accepted %s's request to join the bank robbery.", RPN(playerid), RPN(playerb));
	SendRobberyMessage(COLOR_LIGHTGREEN, string);
	// Textdraw
	if(BankRobbersCount == 2) {TextDrawSetString(Textdraw2, BankRobbers[1]);}
	else if(BankRobbersCount == 3) {TextDrawSetString(Textdraw3, BankRobbers[2]);}
	else if(BankRobbersCount == 4) {TextDrawSetString(Textdraw4, BankRobbers[3]);}
	else if(BankRobbersCount == 5) {TextDrawSetString(Textdraw5, BankRobbers[4]);}
	foreach(Player, i)
	{
	    if(BankRobber[i])
	    {
	        TextDrawShowForPlayer(i, Textdraw0);
			TextDrawShowForPlayer(i, Textdraw1);
	    	if(BankRobbersCount >= 2) {TextDrawShowForPlayer(i, Textdraw2);}
			else if(BankRobbersCount >= 3) {TextDrawShowForPlayer(i, Textdraw3);}
			else if(BankRobbersCount >= 4) {TextDrawShowForPlayer(i, Textdraw4);}
			else if(BankRobbersCount >= 5) {TextDrawShowForPlayer(i, Textdraw5);}
	    }
	}
	return 1;
}

CMD:startrobbery(playerid, params[])
{
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!BankRobbery) return SendClientMessage(playerid, COLOR_GREY, "There's no bank robbery being setup.");
	if(BankRobber[playerid] != 1) return SendClientMessage(playerid, COLOR_GREY, "You are not the bank robbery leader.");
	if(RobberyStarted) return SendClientMessage(playerid, COLOR_GREY, "The bank robbery has already started.");
	if(BankRobbersCount < 2) return SendClientMessage(playerid, COLOR_GREY, "There aren't enough robbers to rob the bank.");
	if(!IsPlayerInRangeOfPoint(playerid, 3, 2242.1460,1632.3909,961.7531)) return SendClientMessage(playerid, COLOR_GREY, "You are not near the bank vault.");
	BankC4 = CreateDynamicObject(1654, 2242.0234,1632.7185,960.8000, 0, 89.325012207031, 3.9700012207031);
	RobberyStarted = 1;
	SetTimer("BankVaultTimer", 10000, false);
	SendRobberyMessage(COLOR_LIGHTRED, "** The bank vault is going to explode in 10 seconds, move away from it **");
	SendCopMessage(COLOR_BLUE, "LS Bank: There is a group of people attempting to rob the bank!");
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pFac] == 1)
	    {
	        TextDrawShowForPlayer(i, Textdraw0);
			TextDrawShowForPlayer(i, Textdraw1);
	    	if(BankRobbersCount >= 2) {TextDrawShowForPlayer(i, Textdraw2);}
			else if(BankRobbersCount >= 3) {TextDrawShowForPlayer(i, Textdraw3);}
			else if(BankRobbersCount >= 4) {TextDrawShowForPlayer(i, Textdraw4);}
			else if(BankRobbersCount >= 5) {TextDrawShowForPlayer(i, Textdraw5);}
	    }
	    if(BankRobber[i])
	    {
		    ClearZaiatWantedLevels(i);
		    AddZaiatWantedLevel(i, "Bank Robbery");
		    AddZaiatWantedLevel(i, "Bank Robbery");
		    AddZaiatWantedLevel(i, "Bank Robbery");
		    AddZaiatWantedLevel(i, "Bank Robbery");
		    AddZaiatWantedLevel(i, "Bank Robbery");
		    AddZaiatWantedLevel(i, "Bank Robbery");
		    TotalRobbers ++;
	    }
	}
	BankRobberyTime = 4;
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
	foreach(Player, i)
	{
	    if(!BankRobber[i] && GetPlayerInterior(i) == 83 && GetPlayerVirtualWorld(i) == 8473)
	    {
	        SetPlayerPos(i, 1462.4095,-1011.1602,26.8438);
	        SetPlayerInterior(i, 0);
	        SetPlayerVirtualWorld(i, 0);
	        SendClientMessage(i, COLOR_LIGHTRED, "** The bank is being robbed, you have been thrown out by the robbers. **");
	    }
	}
	BankBlock = 1;
	return 1;
}



// Admin Commands

CMD:ah(playerid, params[])
{
	return cmd_ahelp(playerid, params);
}

CMD:ahelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	if(PlayerInfo[playerid][pAdmin] >= 1) SendClientMessage(playerid, COLOR_YELLOW, "*1 Admin: {FFFFFF}/a /aname /aduty /pm /kick /ban /goto /check /slap /spec /sobeit /ch /bugs /bowners /banreason /warns /flag /showflag(s)");
	if(PlayerInfo[playerid][pAdmin] >= 1)SendClientMessage(playerid, COLOR_YELLOW, "*1 Admin: {FFFFFF}/tabbed /afk /nmute /ipcheck");
	if(PlayerInfo[playerid][pAdmin] >= 2)SendClientMessage(playerid, COLOR_YELLOW, "*2 Admin: {FFFFFF}/gotoloc /gethere /sendtols /setskin /setvw /setint /tuteject /unfreeze /warn /mark /clearflag /forcetut /approve");
	if(PlayerInfo[playerid][pAdmin] >= 3)SendClientMessage(playerid, COLOR_YELLOW, "*3 Admin: {FFFFFF}/disarm /hoseject /tog /prison /prisoners /lastads /deny /freeze /banaccount /fine /pfine /clearchat /whitelist /eventhelp");
	if(PlayerInfo[playerid][pAdmin] >= 3)SendClientMessage(playerid, COLOR_YELLOW, "*3 Admin: {FFFFFF}/givecookie /getveh");
	if(PlayerInfo[playerid][pAdmin] >= 4)SendClientMessage(playerid, COLOR_YELLOW, "*4 Admin: {FFFFFF}/unban /unbanip /gotopos /givemoney /sethp /setarmor /veh /setname /clearwarns /setarmorall /sethpall /familieshelp");
	if(PlayerInfo[playerid][pAdmin] >= 4)SendClientMessage(playerid, COLOR_YELLOW, "*4 Admin: {FFFFFF}/veh /switchfam /refuel /respawn /switchfac /fackick /refund");
	if(PlayerInfo[playerid][pAdmin] >= 5)SendClientMessage(playerid, COLOR_YELLOW, "*5 Admin: {FFFFFF}/makeleader /setmoney /givegun /dynamics /forcepaycheck /setstat /contracts /clearcontract /clearwanted");
	if(PlayerInfo[playerid][pAdmin] >= 5)SendClientMessage(playerid, COLOR_YELLOW, "*5 Admin: {FFFFFF}/rangeban /setreferrals /firehell /unloyal");
	if(PlayerInfo[playerid][pAdmin] >= 6)SendClientMessage(playerid, COLOR_YELLOW, "*6 Admin: {FFFFFF}/makeadmin /saveserver /gmx /arrestpoint /deleteaccount /motd /setpass /music /listen /forceduty");
	if(PlayerInfo[playerid][pAdmin] >= 6)SendClientMessage(playerid, COLOR_YELLOW, "*6 Admin: {FFFFFF}/editdrugs /makevip /maketester /makehelper /makegangmod /makefacmod /makebanappealer");
    if(PlayerInfo[playerid][pAdmin] >= 7) SendClientMessage(playerid, COLOR_YELLOW, "*7 Admin: {FFFFFF}/clearads /online /editpoint /makegateowner /deletebug");
	if(PlayerInfo[playerid][pGangMod]) SendClientMessage(playerid, COLOR_YELLOW, "GANG MOD: {FFFFFF}/fcreate /fdelete /fedit /fstrike /fstrikes /switchfam");
	if(PlayerInfo[playerid][pFacMod]) SendClientMessage(playerid, COLOR_YELLOW, "FACTION MOD: {FFFFFF}/makeleader /fackick /switchfac");
	if(PlayerInfo[playerid][pBanAppealer]) SendClientMessage(playerid, COLOR_YELLOW, "BAN APPEALER: {FFFFFF}/unban /unbanip");
	return 1;
}

CMD:makegateowner(playerid, params[])
{
	new playerb, slot, idx, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "uii", playerb, slot, idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /makegateowner [playerid] [slot(1-3)] [gateid] {AFAFAF}(Gate ID 0 to remove ownership)");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(idx > 0 && !GateInfo[idx][gModel] || idx < 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid gate id.");
	if(slot < 1 || slot > 3) return SendClientMessage(playerid, COLOR_GREY, "Gate slots are between 1 and 3.");
	switch(slot)
	{
	    case 1: PlayerInfo[playerb][pGate][0] = idx;
	    case 2: PlayerInfo[playerb][pGate][1] = idx;
	    case 3: PlayerInfo[playerb][pGate][2] = idx;
	}
	if(idx == 0)
	{
		format(string, sizeof(string), " Administrator %s removed your gate ownership in slot %d.", RPN(playerid), slot);
		SendClientMessage(playerb, COLOR_WHITE, string);
		format(string, sizeof(string), "AdmWarn: %s has removed %s's gate ownership in slot %d.", RPN(playerid), RPN(playerb), slot);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/gates.log", string);
	}
	else
	{
		format(string, sizeof(string), " Administrator %s has made you an owner of gate ID %d.", RPN(playerid), idx, slot);
		SendClientMessage(playerb, COLOR_WHITE, string);
		format(string, sizeof(string), "AdmWarn: %s has made %s an owner of gate ID %d. (Slot %d)", RPN(playerid), RPN(playerb), idx, slot);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/gates.log", string);
	}
	return 1;
}

CMD:ipcheck(playerid, params[])
{
    new playerb, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /ipcheck [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	format(string, sizeof(string), "{FF9900}Name: {FFFFFF}%s {FF9900}| IP: {FFFFFF}%s", RPN(playerb), RPIP(playerb));
	SendClientMessage(playerid, COLOR_ORANGE, string);
	return 1;
}

CMD:unloyal(playerid, params[])
{
	new playerb, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /unloyal [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    if(PlayerInfo[playerb][pLoyal]) return SendClientMessage(playerid, COLOR_GREY, "Player does not have loyalty status.");
	PlayerInfo[playerb][pLoyal] = 1;
	format(string, sizeof(string), "AdmWarn: %s has removed %s's loyalty status.", RPN(playerid), RPN(playerb));
	SendAdminMessage(COLOR_DARKRED, 1, string);
	SendClientMessage(playerb, COLOR_DARKRED, string);
	Log("logs/loyal.log", string);
	return 1;
}

CMD:getveh(playerid, params[])
{
	new veh, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(sscanf(params, "i", veh)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /getveh [vehicleid]");
    if(veh == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_GREY, "Invalid vehicle id.");
    new Float:pos[3]; GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
   	SetVehiclePos(veh, pos[0], pos[1], pos[2]);
   	LinkVehicleToInterior(veh, GetPlayerInterior(playerid));
   	format(string, sizeof(string), " You have teleported vehicle ID %d to you.", veh);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}


CMD:firehell(playerid, params[])
{
	new amount, string[128], Float:Pos[4];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "i", amount)) return SendClientMessage(playerid, 0xFFFFFFFF, "USAGE: /firehell [explosions]");
	if(amount < 1) return SendClientMessage(playerid, 0xFFFFFFFF, "Amount of explosions can't be below 1.");
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	if(IsPlayerInAnyVehicle(playerid)) GetVehicleZAngle(GetPlayerVehicleID(playerid), Pos[3]);
	else GetPlayerFacingAngle(playerid, Pos[3]);
	for(new i=1; i<amount+1; i++)
	{
		Pos[0] = Pos[0] + 15*floatcos(90+Pos[3], degrees);
		Pos[1] = Pos[1]+ 15*floatsin(90-Pos[3], degrees);
		CreateExplosion(Pos[0], Pos[1], Pos[2], 0, 5.0);
	}
	format(string, sizeof(string), "You have created %d explosions.", amount);
	SendClientMessage(playerid, 0xFFFFFFFF, string);
	return 1;
}

CMD:respawn(playerid, params[])
{
	new string[128], veh;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
    if(!strcmp(params, "all", true))
    {
        for(new i=0; i<MAX_VEHICLES; i++)
        {
            if(i != NPCBus)
            {
	            new vehs;
				foreach(Player, x)
				{
				    if(GetPlayerVehicleID(x) == i)
				    {
				        vehs = 1;
				    }
				}
				if(!vehs)
				{
					SetVehicleToRespawn(i);
				}
				vehs = 0;
			}
        }
		format(string, sizeof(string), "AdmCmd: %s has respawned all unused vehicles.", RPN(playerid));
		SendClientMessageToAll(COLOR_LIGHTRED, string);
        return 1;
    }
    if(sscanf(params, "i", veh)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /respawn [vehicleid/all]");
    SetVehicleToRespawn(veh);
    format(string, sizeof(string), "AdmWarn: %s has respawned vehicle ID %d.", RPN(playerid), veh);
    SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:refuel(playerid, params[])
{
	new string[128], veh;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
    if(!strcmp(params, "all", true))
    {
        for(new i=0; i<MAX_VEHICLES; i++)
        {
            Fuel[i] = 100;
        }
		format(string, sizeof(string), "AdmCmd: %s has refilled all vehicles' gas tanks.", RPN(playerid));
		SendClientMessageToAll(COLOR_LIGHTRED, string);
        return 1;
    }
    if(sscanf(params, "i", veh)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /refuel [vehicleid/all]");
    Fuel[veh] = 100;
    format(string, sizeof(string), "AdmWarn: %s has refilled vehicle ID %d's gas tank.", RPN(playerid), veh);
    SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:maketester(playerid, params[])
{
	new playerb, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /maketester [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerb][pTester])
	{
		PlayerInfo[playerb][pTester] = 0;
		format(string, sizeof(string), " %s has removed you from the Beta Testers team.", RPN(playerid));
		SendClientMessage(playerb, COLOR_GREEN, string);
		format(string, sizeof(string), "AdmWarn: %s has removed %s from the Beta Testers team.", RPN(playerid), RPN(playerb));
	}
	else
	{
	    PlayerInfo[playerb][pTester] = 1;
	    format(string, sizeof(string), " %s has made you a Beta Tester.", RPN(playerid));
		SendClientMessage(playerb, COLOR_GREEN, string);
		format(string, sizeof(string), "AdmWarn: %s has made %s a Beta Tester.", RPN(playerid), RPN(playerb));
	}
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/maketester.log", string);
	return 1;
}

CMD:setreferrals(playerid, params[])
{
	new playerb, amount, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "ui", playerb, amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setreferrals [playerid] [referrals]");
	format(string, sizeof(string), "AdmWarn: %s has set %s's referral points to %d. (Old Points: %d)", RPN(playerid), RPN(playerb), amount, PlayerInfo[playerb][pRefPoints]);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/referral.log", string);
	PlayerInfo[playerb][pRefPoints] = amount;
	format(string, sizeof(string), " Administrator %s has set your referral points to %d.", RPN(playerid), amount);
	SendClientMessage(playerb, COLOR_WHITE, string);
	return 1;
}

CMD:makevip(playerid, params[])
{
	new playerb, viplevel, viptime, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "uii", playerb, viplevel, viptime)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /makevip [playerid] [level] [days]");
	if(viplevel < 0 || viplevel > 4) return SendClientMessage(playerid, COLOR_GREY, "VIP packages are between 1 and 4.");
	if(viptime < 1 || viptime > 30) return SendClientMessage(playerid, COLOR_GREY, "VIP days are between 1 and 30.");
	if(viplevel == 0)
	{
	    PlayerInfo[playerb][pVIP] = 0;
		PlayerInfo[playerb][pVIPDay] = 0;
		PlayerInfo[playerb][pVIPMonth] = 0;
		PlayerInfo[playerb][pVIPHour] = 0;
		PlayerInfo[playerb][pVIPTemp] = 0;
		format(string, sizeof(string), "AdmWarn: %s has removed %s's VIP package.", RPN(playerid), RPN(playerb));
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/makevip.log", string);
		format(string, sizeof(string), " Adminisistrator %s has removed your VIP package.", RPN(playerid));
		SendClientMessage(playerb, COLOR_VIP, string);
		return 1;
	}
	// Calculating
	new Year, Month, Day;
	new Hour, Minute, Second;
	gettime(Hour, Minute, Second);
	getdate(Year, Month, Day);
	if(Day+viptime >= 30)
	{
	    new ActualDay;
		Month ++;
		ActualDay = viptime - (30-Day);
		PlayerInfo[playerb][pVIPDay] = ActualDay;
		PlayerInfo[playerb][pVIPMonth] = Month;
		PlayerInfo[playerb][pVIPHour] = Hour;
	}
	else
	{
	    PlayerInfo[playerb][pVIPDay] = Day+viptime;
		PlayerInfo[playerb][pVIPMonth] = Month;
		PlayerInfo[playerb][pVIPHour] = Hour;
	}
	// Done
	PlayerInfo[playerb][pVIP] = viplevel;
	PlayerInfo[playerb][pVIPTemp] = 0;
	format(string, sizeof(string), "AdmWarn: %s has given %s %s VIP package for %d days.", RPN(playerid), RPN(playerb), RPVIPN(playerb), viptime);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/makevip.log", string);
	format(string, sizeof(string), " Adminisistrator %s has given you %s VIP package for %d days.", RPN(playerid), RPVIPN(playerb), viptime);
	SendClientMessage(playerb, COLOR_VIP, string);
	return 1;
}

CMD:editdrugs(playerid, params[])
{
	new string[128], option[8], amount;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "s[8]i", option, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editdrugs [type] [amount]");
		format(string, sizeof(string), "Weed: %d - Crack: %d", Weed, Crack);
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}
	if(amount < 0 || amount > 2000) return SendClientMessage(playerid, COLOR_GREY, "Drugs amount is between 0 and 2000.");
	if(!strcmp(option, "weed", true, 4))
	{
	    Weed = amount;
		format(string, sizeof(string), "Weed Pickup\n{FFFF00}/buyweed to get weed\nAvailable Stock: %d/2000", Weed);
		UpdateDynamic3DTextLabelText(WeedText, COLOR_RED, string);
		format(string, sizeof(string), "AdmWarn: %s has set the Drugs House's stock to %d grams.", RPN(playerid), amount);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/editdrugs.log", string);
	}
	else if(!strcmp(option, "crack", true, 5))
	{
	    Crack = amount;
		format(string, sizeof(string), "Crack Pickup\n{FFFF00}/buycrack to get crack\nAvailable Stock: %d/2000", Crack);
		UpdateDynamic3DTextLabelText(CrackText, COLOR_RED, string);
		format(string, sizeof(string), "AdmWarn: %s has set the Crack Lab's stock to %d grams.", RPN(playerid), amount);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/editdrugs.log", string);
	}
	return 1;
}

CMD:eventhelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
    SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
    SendClientMessage(playerid, COLOR_YELLOW, "EVENT: {FFFFFF}/seteventinfo /announceevent /lockevent /startevent /endevent");

	return 1;
}

CMD:seteventinfo(playerid, params[])
{
	new string[128], option[32], amount;
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "s[32]", option))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /seteventinfo [option]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: position | weapon | health | armor");
		return 1;
	}
	if(!strcmp(option, "position", true))
	{
	    GetPlayerPos(playerid, ePos[0], ePos[1], ePos[2]);
		eInt = GetPlayerInterior(playerid);
		eVW = GetPlayerVirtualWorld(playerid);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have set the event's position.");
		return 1;
	}
	else if(!strcmp(option, "weapon", true, 6))
	{
	    new wep;
	    if(sscanf(params, "s[8]ii", option, wep, amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /seteventinfo weapon [slot] [weaponid]");
		if(wep < 1 || wep > 3) return SendClientMessage(playerid, COLOR_GREY, "Weapon slots are between 1 and 3.");
		if(amount < 0 || amount > 46 || amount == 19 || amount == 20 || amount == 21) return SendClientMessage(playerid, COLOR_GREY, "Invalid weapon id.");
	    switch(wep)
	    {
	        case 1: EventWep[0] = amount;
	        case 2: EventWep[1] = amount;
	        case 3: EventWep[2] = amount;
	    }
	    format(string, sizeof(string), " You have set weapon slot %d's id to %d.", wep, amount);
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	else if(!strcmp(option, "health", true, 6))
	{
	    if(sscanf(params, "s[8]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /seteventinfo health [amount]");
	    EventHealth = amount;
	    format(string, sizeof(string), " You have set the event's health to %d.", amount);
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

	}
	else if(!strcmp(option, "armor", true, 5))
	{
	    if(sscanf(params, "s[8]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /seteventinfo armor [amount]");
	    EventArmor = amount;
	    format(string, sizeof(string), " You have set the event's armor to %d.", amount);
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

	}
	return 1;
}

CMD:startevent(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(!EventOn) return SendClientMessage(playerid, COLOR_GREY, "There's no current event happening.");
	if(!EventLocked) return SendClientMessage(playerid, COLOR_GREY, "The event must be locked before it starts.");
	if(EventOn == 2) return SendClientMessage(playerid, COLOR_GREY, "The event has already started.");
    SendClientMessageToAll(COLOR_LIGHTRED, "*** The event has started ***");
    EventOn = 2;
	foreach(Player, i)
	{
	    if(Event[i])
	    {
	        GivePlayerWeapon(i, EventWep[0], 999999);
	        GivePlayerWeapon(i, EventWep[1], 999999);
	        GivePlayerWeapon(i, EventWep[2], 999999);
	        SetPlayerHealth(i, EventHealth);
	        SetPlayerArmour(i, EventArmor);
	    }
	}
	return 1;
}

CMD:lockevent(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(!EventOn) return SendClientMessage(playerid, COLOR_GREY, "There's no current event happening.");
	if(EventOn == 2) return SendClientMessage(playerid, COLOR_GREY, "The event has already started.");
	if(!EventLocked)
	{
	    SendClientMessageToAll(COLOR_LIGHTRED, "*** The event has been locked ***");
	    EventLocked = 1;
    }
    else
    {
	    SendClientMessageToAll(COLOR_LIGHTRED, "*** The event has been unlocked ***");
	    EventLocked = 0;
    }
	return 1;
}

CMD:announceevent(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(ePos[0] == 0 && ePos[1] == 0 && ePos[2] == 0) return SendClientMessage(playerid, COLOR_GREY, "You have to at least set the event's position before opening it.");
	if(EventOn) return SendClientMessage(playerid, COLOR_GREY, "The event has been announced already.");
	if(EventOn == 2) return SendClientMessage(playerid, COLOR_GREY, "The event has already started.");
	EventOn = 1;
	SendClientMessageToAll(COLOR_LIGHTRED, "*** An event has started, /joinevent to join ***");
    cmd_joinevent(playerid, params);
	return 1;
}

CMD:endevent(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(!EventOn) return SendClientMessage(playerid, COLOR_GREY, "There's no current event happening.");
    SendClientMessageToAll(COLOR_LIGHTRED, "*** The event has ended ***");
	foreach(Player, i)
	{
	    if(Event[i])
	    {
	        GunsBeingRemoved[i] = 1;
		    ResetPlayerWeapons(i);
		    GunsBeingRemoved[playerid] = 1;
		    SetPlayerPos(i, PlayerInfo[i][pX], PlayerInfo[i][pY], PlayerInfo[i][pZ]);
			SetPlayerInterior(i, PlayerInfo[i][pInt]);
			SetPlayerVirtualWorld(i, PlayerInfo[i][pVW]);
			SetPlayerHealth(i, PlayerInfo[i][pHealth]);
			SetPlayerArmour(i, PlayerInfo[i][pArmor]);
			for(new w = 0; w < 13; w++)
			{
			    GiveZaiatWeapon(i, PlayerInfo[i][pWeapon][w], PlayerInfo[i][pWeaponAmmo][w]);
			}
			Event[i] = 0;
		}
		EventOn = 0; EventLocked = 0;
		ePos[0] = 0; ePos[1] = 0; ePos[2] = 0; EventWep[0] = 0; EventWep[1] = 0; EventWep[2] = 0;
		eInt = 0; eVW = 0; EventHealth = 0; EventArmor = 0;
	}

	return 1;
}

CMD:listen(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /listen [option]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: Whisper | SMS | PM");
		return 1;
	}
	if(!strcmp(params, "whisper", true))
	{
	    if(!Whispers[playerid])
	    {
	        Whispers[playerid] = 1;
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have started listening to whispers.");
	    }
	    else
	    {
	        Whispers[playerid] = 0;
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have stopped listening to whispers.");
	    }
	}
	else if(!strcmp(params, "sms", true))
	{
		if(!SMSes[playerid])
	    {
	        SMSes[playerid] = 1;
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have started listening to SMSes.");
	    }
	    else
	    {
	        SMSes[playerid] = 0;
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have stopped listening to SMSes.");
	    }
	}
	else if(!strcmp(params, "pm", true))
	{
	    if(!PMs[playerid])
	    {
	        PMs[playerid] = 1;
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have started listening to PMs.");
	    }
	    else
	    {
	        PMs[playerid] = 0;
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have stopped listening to PMs.");
	    }
	}
	else SendClientMessage(playerid, COLOR_GREY, "Invalid listening option.");
	return 1;
}

CMD:editpoint(playerid, params[])
{
	new string[128], point, time;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "ii", point, time)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editpoint [point] [time]");
	if(point < 1 || point > 5) return SendClientMessage(playerid, COLOR_GREY, "Points are between 1 and 5.");
	if(time < 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid time.");
	point = point-1;
    PointInfo[point][pTime] = time;
    format(string, sizeof(string), "AdmWarn: %s has set the %s point to be capturable in %d hours.", RPN(playerid), PointInfo[point][pName], PointInfo[point][pTime]);
    SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:online(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Real Online Players]:");
	foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i))
	    {
		    format(string, sizeof(string), "%d) {FFFFFF}%s ", i, RPN(i));
		    SendClientMessage(playerid, COLOR_ORANGE, string);
	    }
	}
	return 1;
}

CMD:tabbed(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Alt-Tabbed Players]:");
	foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i) && Tabbed[i])
	    {
		    format(string, sizeof(string), "%d) {FFFFFF}%s (%d Seconds)", i, RPN(i), AltTabbed[i]);
		    SendClientMessage(playerid, COLOR_ORANGE, string);
	    }
	}
	return 1;
}

CMD:afk(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	SendClientMessage(playerid, COLOR_ORANGE, "[AFK Players]:");
	foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i) && IsAFK[i])
	    {
		    format(string, sizeof(string), "%d) {FFFFFF}%s (%d Seconds)", i, RPN(i), AFK[i]);
		    SendClientMessage(playerid, COLOR_ORANGE, string);
	    }
	}
	return 1;
}

CMD:music(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[256]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /music [url]");
	if(!strcmp(params, "stop", true, 4))
	{
	    StopAudioStreamForPlayer(playerid);
	    SendClientMessage(playerid, COLOR_LIGHTRED, " You have stopped listening to music.");
	    return 1;
	}
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	format(string, sizeof(string), "AdmCmd: %s has started playing a song globally. ('/music stop' to stop listening)", RPN(playerid));
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	foreach(Player, i)
	{
		PlayAudioStreamForPlayer(i, params);
	}
	return 1;
}

CMD:switchfam(playerid, params[])
{
	new string[128], input;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4 && !PlayerInfo[playerid][pGangMod]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "i", input)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /switchfam [slot]");
	if(input < 1 || input > 10) return SendClientMessage(playerid, COLOR_GREY, "Families are between 1 and 10");
	PlayerInfo[playerid][pFam] = input;
	PlayerInfo[playerid][pFamRank] = 6;
	format(string, sizeof(string), " You have switched to the %s family.", FamInfo[input][fName]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:switchfac(playerid, params[])
{
	new string[128], input;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4 && !PlayerInfo[playerid][pFacMod]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "i", input))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /switchfac [faction]");
		SendClientMessage(playerid, COLOR_GREY, "FACTIONS: 0) Civilian | 1) SAPD | 2) Government | 3) Hitman Agency | 4) News Agency");
		return 1;
	}
	if(input < 0 || input > 4) return SendClientMessage(playerid, COLOR_GREY, "Factions are between 0 and 4");
	PlayerInfo[playerid][pFac] = input;
	PlayerInfo[playerid][pFacRank] = 6;
	format(string, sizeof(string), " You have switched to the %s faction.", RPFN(playerid));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:ch(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
   	if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /ch [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    if(HHcheckUsed != 0)
    {
        SendClientMessage(playerid, COLOR_WHITE, "The health hack check is being used by another admin, please try again in a moment!");
        return 1;
    }
	HHcheckUsed = 1;
   	format(string, sizeof(string), "AdmWarn: %s has initiated a health hack check on %s.", RPN(playerid), RPN(playerb));
   	SendAdminMessage(COLOR_DARKRED, 1, string);
	GetPlayerHealth(playerb, HHcheckFloats[playerb][0]);
	GetPlayerArmour(playerb, HHcheckFloats[playerb][1]);
	GetPlayerPos(playerb, HHcheckFloats[playerb][2], HHcheckFloats[playerb][3], HHcheckFloats[playerb][4]);
	GetPlayerFacingAngle(playerb, HHcheckFloats[playerb][5]);
	HHcheckVW[playerb] = GetPlayerVirtualWorld(playerb);
	HHcheckInt[playerb] = GetPlayerInterior(playerb);
	TogglePlayerControllable(playerb, 1);
   	SetPlayerCameraPos(playerb, 2057.1284,-1913.4607,661.1432);
	SetPlayerCameraLookAt(playerb, 1909.5645,-1876.0581,661.1432);
    SetPlayerVirtualWorld(playerb, 0);
	SetPlayerInterior(playerb, 1);
    SetPlayerHealth(playerb, 100);
    SetPlayerArmour(playerb, 0);
	SetPlayerPos(playerb, -1400.994873, 106.899650, 1032.273437);
	SetPlayerFacingAngle(playerb, 90.66);
	CreateExplosion(-1400.994873, 106.899650 , 1032.273437, 8, 20);
	SetTimerEx("HealthHackCheck", 1250, 0, "dd", playerid, playerb);
	return 1;
}
CMD:aname(playerid, params[])
{
	new string[128], file[32], text[MAX_PLAYER_NAME];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "s[24]", text)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /aname [name]");
	if(aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You must be off duty to change your admin name.");
	// Start of detecting space in name
	new end, temp[32], temp2[32];
	end = strfind(text, " ",true);
	if(end != -1)
	{
	    strmid(temp, text, 0, end);
	    format(temp, sizeof(temp), "%s_", temp);
	    strdel(text, 0, end);
		strmid(temp2, text, 1, strlen(text));
	    format(text, 24, "");
	    strcat(text, temp, sizeof(temp));
	    strcat(text, temp2, sizeof(temp2));
	}
	// End of detecting space in name
	format(file, sizeof(file), "users/%s.ini", text);
	if(dini_Exists(file))
	{
	    format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
	    if(strlen(dini_Get(file, "AdminName")) && strcmp(dini_Get(file, "AdminName"), text))
	    {
	     	SendClientMessage(playerid, COLOR_GREY, "Name is already in use.");
	        return 1;
	    }
	}
	format(string, sizeof(string), " You have changed your admin name to: {FF6347}%s", text);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "%s has changed their admin name to %s.", RPN(playerid), text);
	Log("logs/aname.log", string);
	format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
	format(file, sizeof(file), "users/%s.ini", dini_Get(file, "AdminName"));
	if(dini_Exists(file)) dini_Remove(file);
	format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
	dini_Set(file, "AdminName", text);
	format(file, sizeof(file), "users/%s.ini",dini_Get(file, "AdminName"));
	dini_Create(file);
	dini_Set(file, "OldName", RPNU(playerid));
	dini_IntSet(file, "Admin", PlayerInfo[playerid][pAdmin]);
	dini_IntSet(file, "AdminAccount", 1);
	dini_IntSet(file, "Age", 25);
	dini_IntSet(file, "Gender", 1);
	dini_IntSet(file, "Tutorial", 1);
	dini_Set(file, "IP", PlayerInfo[playerid][pIP]);
	return 1;
}

CMD:forceduty(playerid, params[])
{
	new string[128], file[32], playerb;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /forceduty [adminid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Player is not an admin.");
	cmd_aduty(playerb, params);
	format(string, sizeof(string), "AdmWarn: %s has forced %s to change their admin duty status.", RPN(playerid), RPN(playerb), dini_Get(file, "AdminName"));
    SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}



CMD:aduty(playerid, params[])
{
	new string[128], file[32];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid])
	{
		format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
		format(file, sizeof(file), "users/%s.ini", dini_Get(file, "AdminName"));
    	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GREY, "Choose an admin name using /aname first.");
    	format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
        format(string, sizeof(string), "AdmWarn: %s has went on admin duty. (Admin name: %s)", RPN(playerid), dini_Get(file, "AdminName"));
		SendAdminMessage(COLOR_DARKRED, 1, string);
		SaveChar(playerid);
		ClearChar(playerid);
		format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
		SetPlayerName(playerid, dini_Get(file, "AdminName"));
		LoadChar(playerid);
		aDuty[playerid] = 1;
		SpawnChar(playerid);
	    GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 16);
	    format(string, sizeof(string), "%s", RPALN(playerid));
	    /*Delete3DTextLabel(aDutyText[playerid]);
	    if(PlayerInfo[playerid][pAdmin] == 1) aDutyText[playerid] = Create3DTextLabel(string, COLOR_LIGHTGREEN, 0, 0, -20, 25, -1, 1);
	    if(PlayerInfo[playerid][pAdmin] == 2) aDutyText[playerid] = Create3DTextLabel(string, COLOR_LIME, 0, 0, -20, 25, -1, 1);
	    if(PlayerInfo[playerid][pAdmin] == 3) aDutyText[playerid] = Create3DTextLabel(string, COLOR_YELLOW, 0, 0, -20, 25, -1, 1);
	    if(PlayerInfo[playerid][pAdmin] == 4) aDutyText[playerid] = Create3DTextLabel(string, COLOR_ORANGE, 0, 0, -20, 25, -1, 1);
	    if(PlayerInfo[playerid][pAdmin] == 5) aDutyText[playerid] = Create3DTextLabel(string, COLOR_RED, 0, 0, -20, 25, -1, 1);
	    if(PlayerInfo[playerid][pAdmin] == 6) aDutyText[playerid] = Create3DTextLabel(string, COLOR_DARKRED, 0, 0, -20, 25, -1, 1);
		Attach3DTextLabelToPlayer(aDutyText[playerid], playerid, 0, 0, 0.25);*/
		if(IsValidDynamic3DTextLabel(aDutyText[playerid]))  DestroyDynamic3DTextLabel(aDutyText[playerid]);
		if(PlayerInfo[playerid][pAdmin] == 1) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_LIGHTGREEN, 0, 0, -20, 25, playerid);
	    if(PlayerInfo[playerid][pAdmin] == 2) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_LIME, 0, 0, -20, 25, playerid);
	    if(PlayerInfo[playerid][pAdmin] == 3) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, 0, 0, -20, 25, playerid);
	    if(PlayerInfo[playerid][pAdmin] == 4) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_ORANGE, 0, 0, -20, 25, playerid);
	    if(PlayerInfo[playerid][pAdmin] == 5) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_RED, 0, 0, -20, 25, playerid);
	    if(PlayerInfo[playerid][pAdmin] == 6) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_DARKRED, 0, 0, -20, 25, playerid);
        Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, aDutyText[playerid] , E_STREAMER_ATTACH_OFFSET_Z, 0.25);
	}
	else
	{
	    if(Spec[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You can't go off admin duty while spectating someone.");
	    format(file, sizeof(file), "users/%s.ini",RPNU(playerid));
	    SaveChar(playerid);
	    ClearChar(playerid);
	    SetPlayerName(playerid, dini_Get(file, "OldName"));
		LoadChar(playerid);
		aDuty[playerid] = 0;
		SpawnChar(playerid);
	    format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
	    format(string, sizeof(string), "AdmWarn: %s has went off admin duty. (Admin name: %s)", RPN(playerid), dini_Get(file, "AdminName"));
	    SendAdminMessage(COLOR_DARKRED, 1, string);
		//Delete3DTextLabel(aDutyText[playerid]);
		DestroyDynamic3DTextLabel(aDutyText[playerid]);
	}
	return 1;
}

CMD:nmute(playerid, params[])
{
	new string[128], playerb;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pAdmin] && PlayerInfo[playerid][pHelper] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!aDuty[playerid] && !PlayerInfo[playerid][pHelper]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /nmute [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pNMute])
	{
	    format(string, sizeof(string), "AdmWarn: %s has muted %s from newbie chat.", RPN(playerid), RPN(playerb));
	    SendAdminMessage(COLOR_DARKRED, 1, string);
	    format(string, sizeof(string), "HelpWarn: %s has muted %s from newbie chat.", RPN(playerid), RPN(playerb));
	    SendHelperMessage(COLOR_DARKRED, 1, string);
	    PlayerInfo[playerb][pNMute] = 1;
	    SendClientMessage(playerb, COLOR_LIGHTRED, " You have been muted from the newbie channel by an administrator for abuse.");
	}
	else
	{
	    format(string, sizeof(string), "AdmWarn: %s has unmuted %s from newbie chat.", RPN(playerid), RPN(playerb));
	    SendAdminMessage(COLOR_DARKRED, 1, string);
	    format(string, sizeof(string), "HelpWarn: %s has unmuted %s from newbie chat.", RPN(playerid), RPN(playerb));
	    SendHelperMessage(COLOR_DARKRED, 1, string);
	    PlayerInfo[playerb][pNMute] = 0;
	    SendClientMessage(playerb, COLOR_LIGHTRED, " You have been unmuted from the newbie channel by an administrator.");
	}
	return 1;
}

CMD:setpass(playerid, params[])
{
    new playerb[32], string[128], file[32], password[256];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "s[32]s[256]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setpass [playername] [password]");
	if(RPIDFN(playerb) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Player is connected to the server.");
	format(file, sizeof(file), "users/%s.ini", playerb);
	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GREY, "Player name not found.");
	WP_Hash(password, sizeof(password), params);
	dini_Set(file, "Password", password);
	format(string, sizeof(string), "AdmWarn: %s has changed %s's password.", RPN(playerid), playerb);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/changepass.log", string);
	format(string, sizeof(string), " You have changed {FF6347}%s{FFFFFF}'s password to: {FF6347}%s", playerb, params);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:flag(playerid, params[])
{
    new string[128], playerb[32], file[32];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "s[32]s[128]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /flag [playername] [text]");
	if(AntiAdv(playerid, params)) return 1;
    format(file, sizeof(file), "users/%s.ini", playerb);
	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GREY, "Player name not found.");
	if(RPIDFN(playerb) == INVALID_PLAYER_ID || RPIDFN(playerb) != INVALID_PLAYER_ID && !IsPlayerLoggedIn(RPIDFN(playerb)))
	{
	    dini_Set(file, "Flag", params);
	}
	else
	{
		format(PlayerInfo[RPIDFN(playerb)][pFlag], 64, "%s", params);
	}
	format(string, sizeof(string), "AdmWarn: %s has placed a flag on %s.", RPN(playerid), playerb);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:showflag(playerid, params[])
{
    new string[128], playerb;
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /showflag [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!strlen(PlayerInfo[playerb][pFlag])) return SendClientMessage(playerid, COLOR_GREY, "Player is not flagged.");
	format(string, sizeof(string), "[FLAG] {FFFFFF}%s {FF9900}- {FFFFFF}%s", RPN(playerb), PlayerInfo[playerb][pFlag]);
	SendClientMessage(playerid, COLOR_ORANGE, string);
	return 1;
}

CMD:showflags(playerid, params[])
{
    new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Flagged Players]");
	foreach(Player, i)
	{
	    if(strlen(PlayerInfo[i][pFlag]))
	    {
	        format(string, sizeof(string), "- %s", RPN(i));
	        SendClientMessage(playerid, COLOR_WHITE, string);
	    }
	}
	return 1;
}

CMD:clearflag(playerid, params[])
{
    new string[128], playerb[32], file[32];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "s[32]s[128]", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /clearflag [playername]");
	format(file, sizeof(file), "users/%s.ini", playerb);
	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GREY, "Player name not found.");
	if(RPIDFN(playerb) == INVALID_PLAYER_ID || RPIDFN(playerb) != INVALID_PLAYER_ID && !IsPlayerLoggedIn(RPIDFN(playerb)))
	{
	    if(!strlen(dini_Get(file, "Flag"))) return SendClientMessage(playerid, COLOR_GREY, "Player is not flagged.");
	    dini_Set(file, "Flag", "");
	}
	else
	{
	    if(!strlen(PlayerInfo[RPIDFN(playerb)][pFlag])) return SendClientMessage(playerid, COLOR_GREY, "Player is not flagged.");
		format(PlayerInfo[RPIDFN(playerb)][pFlag], 64, "");
	}
	format(string, sizeof(string), "AdmWarn: %s has cleared the flag on %s.", RPN(playerid), playerb);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:clearchat(playerid, params[])
{
    new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	for(new i=0; i<100; i++)
	{
	    SendClientMessageToAll(COLOR_WHITE, "");
	}
	format(string, sizeof(string), "AdmCmd: %s has cleared the chat window.", RPN(playerid));
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	return 1;
}

CMD:fine(playerid, params[])
{
	new string[128], playerb, amount;
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "uis[32]", playerb, amount, params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fine [playerid] [amount] [reason]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(amount <= 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid money amount.");
	GiveZaiatMoney(playerb, -amount);
	format(string, sizeof(string), "AdmCmd: %s has been fined $%d by %s, reason: %s", RPN(playerb), amount, RPN(playerid), params);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	Log("logs/fine.log", string);
	return 1;
}

CMD:pfine(playerid, params[])
{
	new string[128], playerb, amount, percent;
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "uis[32]", playerb, percent, params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /pfine [playerid] [percent] [reason]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(percent < 0 || percent > 100) return SendClientMessage(playerid, COLOR_GREY, "Percent is between 0 and 100.");
	new idx = PlayerInfo[playerid][pHouse];
	new idx2 = PlayerInfo[playerid][pBiz];
	new TotalWealth = PlayerInfo[playerb][pMoney]+PlayerInfo[playerb][pBank]+HouseInfo[idx][hMoney]+BizInfo[idx2][bMoney];
	amount = (percent*(TotalWealth))/100;
	GiveZaiatMoney(playerb, -amount);
	format(string, sizeof(string), "AdmCmd: %s has been fined $%d (%d percent) by %s, reason: %s", RPN(playerb), amount, percent, RPN(playerid), params);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	Log("logs/fine.log", string);
	return 1;
}

CMD:motd(playerid, params[])
{
	new string[128], motd;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "is[128]", motd, params))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /motd [type] [motd]");
	    SendClientMessage(playerid, COLOR_GREY, "TYPES: 1) Server | 2) Admin");
		return 1;
	}
	if(motd < 0 || motd > 2) return SendClientMessage(playerid, COLOR_GREY, "MOTDs are between 1 and 2.");
	switch(motd)
	{
		case 1:
		{
			format(ServerMOTD, sizeof(ServerMOTD), "%s", params);
			format(string, sizeof(string), "SERVER MOTD: {FFFFFF}%s", ServerMOTD);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
		}
		case 2:
		{
			format(AdminMOTD, sizeof(AdminMOTD), "%s", params);
			format(string, sizeof(string), "ADMIN MOTD: {FFFFFF}%s", AdminMOTD);
			SendAdminMessage(COLOR_LIGHTRED, 1, string);
		}
	}
	return 1;
}

CMD:unfreeze(playerid, params[])
{
	new string[128], playerb;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /unfreeze [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	TogglePlayerControllable(playerb, 1);
	format(string, sizeof(string), " You have unfreezed %s.", RPN(playerb));
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), " Administrator %s has unfreezed you.", RPN(playerid));
	SendClientMessage(playerb, COLOR_WHITE, string);
	return 1;
}

CMD:freeze(playerid, params[])
{
	new string[128], playerb;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /freeze [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	TogglePlayerControllable(playerb, 0);
	format(string, sizeof(string), " You have freezed %s.", RPN(playerb));
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), " Administrator %s has freezed you.", RPN(playerid));
	SendClientMessage(playerb, COLOR_WHITE, string);
	return 1;
}

CMD:clearwanted(playerid, params[])
{
	new playerb, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /clearwanted [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pWanted]) return SendClientMessage(playerid, COLOR_GREY, "Player is not wanted.");
	PlayerInfo[playerb][pWanted] = 0;
	SetPlayerWantedLevel(playerb, 0);
	format(PlayerInfo[playerb][pContractBy], 32, "");
	format(string, sizeof(string), "AdmWarn: %s has cleared %s's wanted level.", RPN(playerid), RPN(playerb));
	SendAdminMessage(COLOR_DARKRED, 1, string);
	SendCopMessage(COLOR_DARKRED, string);
	SendClientMessage(playerb, COLOR_DARKRED, string);
	return 1;
}

CMD:clearcontract(playerid, params[])
{
	new playerb, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /clearcontract [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pContract]) return SendClientMessage(playerid, COLOR_GREY, "Player has no contract on their head.");
	PlayerInfo[playerb][pContract] = 0;
	format(PlayerInfo[playerb][pContractBy], 32, "");
	format(string, sizeof(string), "AdmWarn: %s has cleared the contract on %s's head.", RPN(playerid), RPN(playerb));
	SendHitmanMessage(COLOR_YELLOW, string);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:pm(playerid, params[])
{
	new playerb, string[128], text[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "us[128]", playerb, text)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /pm [playerid] [text]");
	if(AntiAdv(playerid, params)) return 1;
	if(!strlen(text)) return SendClientMessage(playerid, COLOR_GREY, "You haven't entered any text to PM.");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	format(string, sizeof(string), "PM to %s: %s", RPN(playerb), text);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	format(string, sizeof(string), "PM from %s: %s", RPN(playerid), text);
	SendClientMessage(playerb, COLOR_YELLOW, string);
	format(string, sizeof(string), "PM from %s to %s: %s", RPN(playerid), RPN(playerb), text);
	Log("logs/pm.log", string);
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pAdmin] >= 6 && PMs[i] && i != playerid && i != playerb)
	    {
	        format(string, sizeof(string), "[PM] %s to %s: %s", RPN(playerid), RPN(playerb), text);
	        SendClientMessage(i, COLOR_YELLOW, string);
	    }
	}
	return 1;
}


CMD:setstat(playerid, params[])
{
	new string[128], playerb, stat, amount;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "uii", playerb, stat, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setstat [playerid] [statid] [amount]");
		SendClientMessage(playerid, COLOR_GREY, "STATS: 1) Age | 2) Level | 3) Gender | 4) Bank | 5) Phone | 6) Materials | 7) Mechanic | 8) Lawyer | 9) Trucker");
		SendClientMessage(playerid, COLOR_GREY, "STATS: 10) Weapons Dealer | 11) Weapons Smuggler | 12) Drugs Dealer | 13) Drugs Smuggler | 14) Boxer | 15) Weed | 16) Crack");
		return 1;
	}
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	switch(stat)
	{
	    case 1:
	    {
	        PlayerInfo[playerb][pAge] = amount;
			format(string, sizeof(string), "AdmWarn: %s has set %s's Age to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 2:
	    {
	        PlayerInfo[playerb][pLevel] = amount;
	        SetPlayerScore(playerb, amount);
			format(string, sizeof(string), "AdmWarn: %s has set %s's Level to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 3:
	    {
			if(amount < 1 || amount > 2) return SendClientMessage(playerid, COLOR_GREY, "Gender is between 1 and 2.");
	        if(amount == 1) format(string, sizeof(string), "Male");
	        else if(amount == 2) format(string, sizeof(string), "Female");
	        PlayerInfo[playerb][pGender] = amount;
			format(string, sizeof(string), "AdmWarn: %s has set %s's Gender to %s.", RPN(playerid), RPN(playerb), string);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 4:
	    {
	        PlayerInfo[playerb][pBank] = amount;
			format(string, sizeof(string), "AdmWarn: %s has set %s's Bank Balance to $%d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 5:
	    {
			if(amount != 0)
			{
	        	new idx = 1, File:file = fopen("cellphones.cfg", io_read);
				while(fread(file, string))
				{
				    if(strval(string) == amount) return SendClientMessage(playerid, COLOR_GREY, "This number is already registered.");
				    if(strval(string) == PlayerInfo[playerb][pCellphone])
				    {
						fdeleteline("cellphones.cfg", idx);
				    }
				    idx ++;
				}
				fclose(file);
				file = fopen("cellphones.cfg", io_append);
				format(string, sizeof(string), "%d\r\n", amount);
				fwrite(file, string);
				fclose(file);
			}
	        PlayerInfo[playerb][pCellphone] = amount;
			format(string, sizeof(string), "AdmWarn: %s has set %s's Cellphone Number to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 6:
	    {
	        PlayerInfo[playerb][pMaterials] = amount;
			format(string, sizeof(string), "AdmWarn: %s has set %s's Materials to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 7:
	    {
	        if(amount < 1 || amount > 5) return SendClientMessage(playerid, COLOR_GREY, "Skill level is between 1 and 5.");
	        new skill;
	        if(amount == 1) skill = 0;
	        else if(amount == 2) skill = 100;
	        else if(amount == 3) skill = 300;
	        else if(amount == 4) skill = 700;
	        else if(amount == 5) skill = 1200;
	        PlayerInfo[playerb][pJobSkill][JOB_MECHANIC] = skill;
	        format(string, sizeof(string), "AdmWarn: %s has set %s's Mechanic level to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 8:
	    {
	        if(amount < 1 || amount > 5) return SendClientMessage(playerid, COLOR_GREY, "Skill level is between 1 and 5.");
	        new skill;
	        if(amount == 1) skill = 0;
	        else if(amount == 2) skill = 100;
	        else if(amount == 3) skill = 300;
	        else if(amount == 4) skill = 700;
	        else if(amount == 5) skill = 1200;
	        PlayerInfo[playerb][pJobSkill][JOB_LAWYER] = skill;
	        format(string, sizeof(string), "AdmWarn: %s has set %s's Lawyer level to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 9:
	    {
	        if(amount < 1 || amount > 5) return SendClientMessage(playerid, COLOR_GREY, "Skill level is between 1 and 5.");
	        new skill;
	        if(amount == 1) skill = 0;
	        else if(amount == 2) skill = 100;
	        else if(amount == 3) skill = 300;
	        else if(amount == 4) skill = 700;
	        else if(amount == 5) skill = 1200;
	        PlayerInfo[playerb][pJobSkill][JOB_TRUCKER] = skill;
	        format(string, sizeof(string), "AdmWarn: %s has set %s's Trucker level to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 10:
	    {
	        if(amount < 1 || amount > 5) return SendClientMessage(playerid, COLOR_GREY, "Skill level is between 1 and 5.");
	        new skill;
	        if(amount == 1) skill = 0;
	        else if(amount == 2) skill = 100;
	        else if(amount == 3) skill = 300;
	        else if(amount == 4) skill = 700;
	        else if(amount == 5) skill = 1200;
	        PlayerInfo[playerb][pJobSkill][JOB_WDEALER] = skill;
	        format(string, sizeof(string), "AdmWarn: %s has set %s's Weapons Dealer level to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 11:
	    {
	        if(amount < 1 || amount > 5) return SendClientMessage(playerid, COLOR_GREY, "Skill level is between 1 and 5.");
	        new skill;
	        if(amount == 1) skill = 0;
	        else if(amount == 2) skill = 100;
	        else if(amount == 3) skill = 300;
	        else if(amount == 4) skill = 700;
	        else if(amount == 5) skill = 1200;
	        PlayerInfo[playerb][pJobSkill][JOB_WSMUGGLER] = skill;
	        format(string, sizeof(string), "AdmWarn: %s has set %s's Weapons Smuggler level to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 12:
	    {
	        if(amount < 1 || amount > 5) return SendClientMessage(playerid, COLOR_GREY, "Skill level is between 1 and 5.");
	        new skill;
	        if(amount == 1) skill = 0;
	        else if(amount == 2) skill = 100;
	        else if(amount == 3) skill = 300;
	        else if(amount == 4) skill = 700;
	        else if(amount == 5) skill = 1200;
	        PlayerInfo[playerb][pJobSkill][JOB_DDEALER] = skill;
	        format(string, sizeof(string), "AdmWarn: %s has set %s's Drugs Dealer level to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 13:
	    {
	        if(amount < 1 || amount > 5) return SendClientMessage(playerid, COLOR_GREY, "Skill level is between 1 and 5.");
	        new skill;
	        if(amount == 1) skill = 0;
	        else if(amount == 2) skill = 100;
	        else if(amount == 3) skill = 300;
	        else if(amount == 4) skill = 700;
	        else if(amount == 5) skill = 1200;
	        PlayerInfo[playerb][pJobSkill][JOB_DSMUGGLER] = skill;
	        format(string, sizeof(string), "AdmWarn: %s has set %s's Drugs Smuggler level to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 14:
	    {
	        if(amount < 1 || amount > 5) return SendClientMessage(playerid, COLOR_GREY, "Skill level is between 1 and 5.");
	        new skill;
	        if(amount == 1) skill = 0;
	        else if(amount == 2) skill = 100;
	        else if(amount == 3) skill = 300;
	        else if(amount == 4) skill = 700;
	        else if(amount == 5) skill = 1200;
	        PlayerInfo[playerb][pJobSkill][JOB_BOXER] = skill;
	        format(string, sizeof(string), "AdmWarn: %s has set %s's Boxer level to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 15:
	    {
	        PlayerInfo[playerb][pWeed] = amount;
			format(string, sizeof(string), "AdmWarn: %s has set %s's Weed to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	    case 16:
	    {
	        PlayerInfo[playerb][pCrack] = amount;
			format(string, sizeof(string), "AdmWarn: %s has set %s's Crack to %d.", RPN(playerid), RPN(playerb), amount);
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	}
	if(amount > 0 && amount < 12) Log("logs/setstat.log", string);
	return 1;
}

CMD:deleteaccount(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "s[32]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deleteaccount [name]");
	format(string, sizeof(string), "users/%s.ini", params);
	if(!dini_Exists(string)) return SendClientMessage(playerid, COLOR_GREY, "Userfile not found.");
	dini_Remove(string);
	format(string, sizeof(string), "AdmWarn: %s has deleted %s's userfile.", RPN(playerid), params);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/deleteaccount.log", string);
	return 1;
}

CMD:approve(playerid, params[])
{
	new string[128], option[32];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
   	if(sscanf(params, "s[32]", option))
   	{
   	    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /approve [option]");
   	    SendClientMessage(playerid, COLOR_GREY, "OPTIONS: taxrequest | namechange");
   	    return 1;
   	}
   	if(!strcmp(option, "taxrequest", true, 10))
   	{
   	    if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to approve tax percent requests.");
		if(TaxRequester == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has requested a tax percent change.");
		format(string, sizeof(string), "AdmCmd: %s has accepted %s's request to change the tax percent to %d.", RPN(playerid), RPN(TaxRequester), TaxPercent);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/settax.log", string);
		format(string, sizeof(string), " Administrator %s has approved your requset to change the tax percent.", RPN(playerid));
        SendClientMessage(TaxRequester, COLOR_LIGHTBLUE, string);		TaxPercent = TempTaxPercent;
		SendClientMessageToAll(COLOR_WHITE, "|___________ Government News Announcement ___________|");
		format(string, sizeof(string), "** [%s] %s %s: Dear Citizens of San Andreas, this is %s %s speaking. **", RPFN(TaxRequester), RPFRN(TaxRequester), RPN(TaxRequester), RPFRN(TaxRequester), RPN(TaxRequester));
		SendClientMessageToAll(COLOR_BLUE, string);
		format(string, sizeof(string), "** [%s] %s %s: I'd like to inform you that the tax rate on your paychecks is now %d percent. **", RPFN(TaxRequester), RPFRN(TaxRequester), RPN(TaxRequester), TaxPercent);
		SendClientMessageToAll(COLOR_BLUE, string);
		format(string, sizeof(string), "** [%s] %s %s: That's all, long live San Andreas. **", RPFN(TaxRequester), RPFRN(TaxRequester), RPN(TaxRequester));
		SendClientMessageToAll(COLOR_BLUE, string);
		TempTaxPercent = 0;
		TaxRequester = -1;
	}
	else if(!strcmp(option, "namechange", true, 10))
	{
	    new playerb, parm[42];
		if(sscanf(params, "s[32]u", option, playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /approve namechange [playerid]");
		if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to approve namechange requests.");
		if(!strlen(VIPName[playerb])) return SendClientMessage(playerid, COLOR_GREY, "Player hasn't requested a namechange.");
		format(parm, sizeof(parm), "%d %s", playerb, VIPName[playerb]);
		Approve[playerid] = 1;
		cmd_setname(playerid, parm);
		format(VIPName[playerb], MAX_PLAYER_NAME, "");
	}
	else SendClientMessage(playerid, COLOR_GREY, "Invalid option.");
	return 1;
}

CMD:deny(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
   	if(sscanf(params, "s[32]", params))
   	{
   	    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deny [option]");
   	    SendClientMessage(playerid, COLOR_GREY, "OPTIONS: taxrequest | namechange");
   	    return 1;
   	}
   	if(!strcmp(params, "taxrequest", false))
   	{
   	    if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to deny tax percent requests.");
		if(TaxRequester == -1) return SendClientMessage(playerid, COLOR_GREY, "Nobody has requested a tax percent change.");
		format(string, sizeof(string), "AdmCmd: %s has denied %s's request to change the tax percent to %d.", RPN(playerid), RPN(TaxRequester), TempTaxPercent);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/settax.log", string);
		format(string, sizeof(string), " Administrator %s has denied your requset to change the tax percent.", RPN(playerid));
        SendClientMessage(TaxRequester, COLOR_LIGHTBLUE, string);
		TempTaxPercent = 0;
		TaxRequester = -1;
	}
	else if(!strcmp(params, "namechange", true, 10))
	{
	    new playerb;
		if(sscanf(params, "s[32]u", params, playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deny namechange [playerid]");
		if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to approve namechange requests.");
		if(!strlen(VIPName[playerb])) return SendClientMessage(playerid, COLOR_GREY, "Player hasn't requested a namechange.");
		format(VIPName[playerb], MAX_PLAYER_NAME, "");
		format(string, sizeof(string), "AdmWarn: %s has denied %s's namechange request.", RPN(playerid), RPN(playerb));
		SendAdminMessage(COLOR_DARKRED, 1, string);
		format(string, sizeof(string), " Administrator %s has denied your namechange request.", RPN(playerid));
		SendClientMessage(playerb, COLOR_WHITE, string);
	}
	else SendClientMessage(playerid, COLOR_GREY, "Invalid option.");
	return 1;
}

CMD:clearads(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	dini_Remove("logs/advertisements.log");
	dini_Create("logs/advertisements.log");
	format(string, sizeof(string), "AdmWarn: %s has cleared the advertisements log.", RPN(playerid));
	SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:lastads(playerid, params[])
{
	new string[128], File: file = fopen("logs/advertisements.log", io_read), idx=1;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Advertisements Log]:");
	while(fread(file, string))
	{
	    format(string, sizeof(string), "%d) %s", idx, string);
	    SendClientMessage(playerid, COLOR_ORANGE, string);
	    idx ++;
	}
	fclose(file);
	return 1;
}

CMD:setname(playerid, params[])
{
	new playerb ,string[128], string2[128], file[64], idx, idx2, idx3, idx4, text[MAX_PLAYER_NAME];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 4 && !Approve[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(Approve[playerid]) Approve[playerid] = 0;
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "us[24]", playerb, text)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setname [playerid] [name]");
    if(aDuty[playerb]) return SendClientMessage(playerid, COLOR_GREY, "You can't set an admin on duty's name.");
    if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    // Start of detecting space in name
	new end, temp[32], temp2[32];
	end = strfind(text, " ",true);
	if(end != -1)
	{
	    strmid(temp, text, 0, end);
	    format(temp, sizeof(temp), "%s_", temp);
	    strdel(text, 0, end);
		strmid(temp2, text, 1, strlen(text));
	    format(text, 24, "");
	    strcat(text, temp, sizeof(temp));
	    strcat(text, temp2, sizeof(temp2));
	}
	// End of detecting space in name
    format(string, sizeof(string), "AdmCmd: %s has changed %s's name to %s.", RPN(playerid), RPN(playerb), text);
    format(string2, sizeof(string2), " Administrator %s has changed your name to {FF6347}%s{FFFFFF}.", RPN(playerid), text);
	format(file, sizeof(file), "users/%s.ini", text);
	if(dini_Exists(file)) return SendClientMessage(playerid, COLOR_GREY, "Name already in use.");
	idx = PlayerInfo[playerb][pBiz];
	idx2 = PlayerInfo[playerb][pHouse];
	idx3 = PlayerInfo[playerb][pVBiz];
	idx4 = PlayerInfo[playerb][pVHouse];
    format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
	dini_Remove(file);
	SetPlayerName(playerb, text);
	PlayerInfo[playerb][pBiz] = idx;
	format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
	dini_Create(file);
	SaveChar(playerb);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	SendClientMessage(playerb, COLOR_WHITE, string2);
	if(idx)
	{

	    format(BizInfo[idx][bOwner], 32, "%s", text);
	    format(string, sizeof(string), "ID: %d\n%s\nOwner: %s\nStatus: %s", idx, RBT(idx), BizInfo[idx][bOwner], RBS(idx));
		UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
	}
	if(idx2)
	{
	    idx = idx2;
	    format(HouseInfo[idx][hOwner], 32, "%s", text);
	    format(string, sizeof(string), "ID: %d\nHouse (Lvl: %d)\nOwner: %s\nStatus: %s", idx, HouseInfo[idx][hLevel], HouseInfo[idx][hOwner], RHS(idx));
		UpdateDynamic3DTextLabelText(HouseInfo[idx][hText], COLOR_WHITE, string);

	}
	if(idx3)
	{
		idx = idx3;
	    format(BizInfo[idx][bOwner], 32, "%s", text);
	    format(string, sizeof(string), "ID: %d\n%s\nOwner: %s\nStatus: %s", idx, RBT(idx), BizInfo[idx][bOwner], RBS(idx));
		UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
	}
	if(idx4)
	{
	    idx = idx4;
	    format(HouseInfo[idx][hOwner], 32, "%s", text);
	    format(string, sizeof(string), "ID: %d\nHouse (Lvl: %d)\nOwner: %s\nStatus: %s", idx, HouseInfo[idx][hLevel], HouseInfo[idx][hOwner], RHS(idx));
		UpdateDynamic3DTextLabelText(HouseInfo[idx][hText], COLOR_WHITE, string);

	}
	return 1;
}

CMD:forcepaycheck(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	format(string, sizeof(string), "AdmCmd: %s has forced paychecks to be given now.", RPN(playerid));
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i))
	    {
	        PlayerInfo[i][pMinutes] = 60;
	    }
	}
	Paycheck();
	return 1;
}

CMD:arrestpoint(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	GetPlayerPos(playerid, ap[0], ap[1], ap[2]);
	DestroyDynamic3DTextLabel(apt);
	apt = CreateDynamic3DTextLabel("Arrest Point\n{FFFF00}/arrest to arrest a suspect", COLOR_RED, ap[0], ap[1], ap[2], 12);
	SendClientMessage(playerid, COLOR_WHITE, " You have changed the SAPD's arrest point.");
	return 1;
}

CMD:prison(playerid, params[])
{
	new playerb, time, string[128], RandomCell;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "uis[64]", playerb, time, params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /prison [playerid] [time] [reason]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(time == 0)
	{
	    if(!PlayerInfo[playerb][pPrison]) return SendClientMessage(playerid, COLOR_GREY, "Player is not prisoned.");
	    ClearZaiatWantedLevels(playerb);
	    SetPlayerColor(playerb, TRANSPARENT_WHITE);
	    PlayerInfo[playerb][pPrison] = 0;
		PlayerInfo[playerb][pPrisonTime] = time;
		format(PlayerInfo[playerb][pPrisonReason], 64, "");
		format(PlayerInfo[playerb][pPrisonBy], 32, "");
		SetPlayerInterior(playerb, 0);
		SetPlayerVirtualWorld(playerb, 0);
		RandomCell = random(sizeof(RandomPrison));
		SetPlayerFacingAngle(playerb, 88.5042);
		SetPlayerPos(playerb, 1548.8394,-1669.6111,13.5656);
		SetCameraBehindPlayer(playerb);
		format(string, sizeof(string), "AdmCmd: %s has been released by %s, reason: %s", RPN(playerb), RPN(playerid), params);
		SendClientMessageToAll(COLOR_LIGHTRED, string);
		Log("logs/prison.log", string);
		SendClientMessage(playerb, COLOR_LIGHTBLUE, " You have been released by an administrator, try to be a better player.");
		TogglePlayerControllable(playerb, 1);
	}
	else
	{
	    ClearZaiatWantedLevels(playerb);
	    SetPlayerColor(playerb, TRANSPARENT_ORANGE);
		PlayerInfo[playerb][pPrison] = 2;
		PlayerInfo[playerb][pPrisonTime] = time*60;
		format(PlayerInfo[playerb][pPrisonReason], 64, "%s", params);
		format(PlayerInfo[playerb][pPrisonBy], 32, "%s", RPN(playerid));
		SetPlayerInterior(playerb, 2);
		SetPlayerVirtualWorld(playerb, 1);
		RandomCell = random(sizeof(RandomPrison));
		SetPlayerFacingAngle(playerb, RandomPrison[RandomCell][3]);
		TogglePlayerControllable(playerb, 0);
		SetTimerEx("EnterExitTimer", 5000, false, "i", playerb);
		SetPlayerPos(playerb, RandomPrison[RandomCell][0], RandomPrison[RandomCell][1], RandomPrison[RandomCell][2]);
		SetCameraBehindPlayer(playerb);
		format(string, sizeof(string), "AdmCmd: %s has been prisoned by %s, reason: %s", RPN(playerb), RPN(playerid), params);
		SendClientMessageToAll(COLOR_LIGHTRED, string);
		Log("logs/prison.log", string);
		format(string, sizeof(string), " You have been prisoned by an administrator for %d minutes (%d seconds)", PlayerInfo[playerb][pPrisonTime]/60, PlayerInfo[playerb][pPrisonTime]);
		SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
		GameTextForPlayer(playerb, "~w~Loading Objects", 3500, 3);
		TogglePlayerControllable(playerb, 0);
        SetTimerEx("EnterExitTimer", 5000, false, "i", playerb);
        PlayerInfo[playerb][pSpawnFreeze] = 1;
        // Clearing robbery
		if(BankRobber[playerb])
		{
		    new Rob = BankRobber[playerb]-1;
		    DisablePlayerCheckpoint(playerb);
			BankRobbersCount --;
			format(BankRobbers[Rob], MAX_PLAYER_NAME, "");
			DeliverMoney[playerb] = 0;
			//
			foreach(Player, i)
			{
			    if(BankRobber[i] || PlayerInfo[i][pFac] == 1)
			    {
					if(Rob == 0) TextDrawHideForPlayer(i, Textdraw1);
					else if(Rob == 1) TextDrawHideForPlayer(i, Textdraw2);
					else if(Rob == 2) TextDrawHideForPlayer(i, Textdraw3);
					else if(Rob == 3) TextDrawHideForPlayer(i, Textdraw4);
					else if(Rob == 4) TextDrawHideForPlayer(i, Textdraw5);
				}
			}
			format(string, sizeof(string), "** %s has been admin-prisoned and has failed the robbery. **", RPN(playerb));
			SendRobberyMessage(COLOR_LIGHTRED, string);
			SendCopMessage(COLOR_LIGHTRED, string);
			BankRobber[playerb] = 0;
			if(BankRobbersCount == 0)
			{
				TextDrawHideForAll(Textdraw0);
				TextDrawHideForAll(Textdraw1);
				TextDrawHideForAll(Textdraw2);
				TextDrawHideForAll(Textdraw3);
				TextDrawHideForAll(Textdraw4);
				TextDrawHideForAll(Textdraw5);
				BankRobbery = 0;
				RobberyStarted = 0;
				format(string, sizeof(string), "** The bank robbery has ended, $%d were stolen and $%d were saved. **", TotalStolen*10000, (TotalRobbers*10000-(TotalStolen*10000)));
				SendClientMessageToAll(COLOR_YELLOW, string);
				TotalRobbers = 0;
				new copsonline;
				foreach(Player, i)
				{
				    if(IsACop(i)) copsonline++;
				}
				foreach(Player, i)
				{
				    if(IsACop(i))
				    {
						new Saved = (TotalRobbers*10000-(TotalStolen*10000));
						GiveZaiatMoney(i, Saved/copsonline);
						format(string, sizeof(string), "** You have received your cut from the saved money. ($%d)", Saved/copsonline);
						SendClientMessage(i, COLOR_LIME, string);
				    }
				}
			}
		}
	}
	RemovePlayerAttachedObject(playerb, 0);
	SetPlayerSpecialAction(playerb, SPECIAL_ACTION_NONE);
	return 1;
}

CMD:prisoners(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Admin Prisoners]:");
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pPrison] == 2)
	    {
			format(string, sizeof(string), "Name: %s | Reason: %s | Time Left: %d seconds | By: %s", RPN(i), PlayerInfo[i][pPrisonReason], PlayerInfo[i][pPrisonTime], PlayerInfo[i][pPrisonBy]);
			SendClientMessage(playerid, COLOR_ORANGE, string);
	    }
	}
	return 1;
}

CMD:familieshelp(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4 && !PlayerInfo[playerid][pGangMod]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
    SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
    SendClientMessage(playerid, COLOR_YELLOW, "FAMILIES: {FFFFFF}/fcreate /fdelete /fedit /fstrike /fstrikes");
	return 1;
}

CMD:fedit(playerid, params[])
{
	new string[128], option[32], idx, skin, skinid, veh, vehid, col1, col2;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4 && !PlayerInfo[playerid][pGangMod]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "is[32]", idx, option))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fedit [slot] [option]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: skin | name | leader | vehicle");
		return 1;
	}
	if(idx < 1 || idx > 10) return SendClientMessage(playerid, COLOR_GREY, "Families are between 1 and 10.");
	if(!FamInfo[idx][fTaken]) return SendClientMessage(playerid, COLOR_GREY, "Family slot is not being used.");
    if(!strcmp(option, "skin", true, 4))
    {
	    if(sscanf(params, "is[32]ii", idx, option, skin, skinid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fedit [familyslot] skin [skinslot] [skinid]");
		if(skin < 1 || skin > 7) return SendClientMessage(playerid, COLOR_GREY, "Skin slots are between 1 and 7.");
		skin = skin-1;
		FamInfo[idx][fSkins][skin] = skinid;
		/*switch(skin)
		{
		    case 1: FamInfo[idx][fSkins][0] = skinid;
		    case 2: FamInfo[idx][fSkins][1] = skinid;
		    case 3: FamInfo[idx][fSkins][2] = skinid;
		    case 4: FamInfo[idx][fSkins][3] = skinid;
		    case 5: FamInfo[idx][fSkins][4] = skinid;
		    case 6: FamInfo[idx][fSkins][5] = skinid;
		    case 7: FamInfo[idx][fSkins][6] = skinid;
		}*/
		format(string, sizeof(string), "AdmWarn: %s has set family %d's skin slot %d to %d.", RPN(playerid), idx, skin+1, skinid);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		return 1;
	}
	else if(!strcmp(option, "name", true, 4))
	{
	    if(sscanf(params, "is[32]s[32]", idx, option, params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fedit [familyslot] name [familyname]");
		format(FamInfo[idx][fName], 32, "%s", params);
		format(string, sizeof(string), "AdmWarn: %s has set family %d's name to %s.", RPN(playerid), idx, params);
		SendAdminMessage(COLOR_DARKRED, 1, string);
	}
	else if(!strcmp(option, "leader", true, 6))
	{
  		if(sscanf(params, "is[32]s[32]", idx, option, params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fedit [familyslot] leader [leadername]");
		format(FamInfo[idx][fLeader], 32, "%s", params);
		format(string, sizeof(string), "AdmWarn: %s has set family %d's leader name to %s.", RPN(playerid), idx, params);
		SendAdminMessage(COLOR_DARKRED, 1, string);
	}
	else if(!strcmp(option, "vehicle", true, 7))
	{
 		if(sscanf(params, "is[32]iiii", idx, option, veh, vehid, col1, col2)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fedit [familyslot] vehicle [vehiclelot] [vehiclemodel] [color1] [color2]");
		if(veh < 1 || veh > 5) return SendClientMessage(playerid, COLOR_GREY, "Vehicle slots are between 1 and 5.");
		veh = veh-1;
		if(FamInfo[idx][fVehType][veh])
		{
		    FamInfo[idx][fVehType][veh] = 0;
		    FamInfo[idx][fVehCoX][veh] = 0;
			FamInfo[idx][fVehCoY][veh] = 0;
			FamInfo[idx][fVehCoZ][veh] = 0;
			FamInfo[idx][fVehRot][veh] = 0;
			FamInfo[idx][fVehCol1][veh] = 0;
			FamInfo[idx][fVehCol2][veh] = 0;
			DestroyVehicle(FamInfo[idx][fVeh][veh]);
		}
		if(vehid)
		{
			FamInfo[idx][fVehType][veh] = vehid;
			GetPlayerPos(playerid, FamInfo[idx][fVehCoX][veh], FamInfo[idx][fVehCoY][veh], FamInfo[idx][fVehCoZ][veh]);
			GetPlayerFacingAngle(playerid, FamInfo[idx][fVehRot][veh]);
			FamInfo[idx][fVehCol1][veh] = col1;
			FamInfo[idx][fVehCol2][veh] = col2;
			FamInfo[idx][fVeh][veh] = CreateVehicle(vehid, FamInfo[idx][fVehCoX][veh], FamInfo[idx][fVehCoY][veh], FamInfo[idx][fVehCoZ][veh], FamInfo[idx][fVehRot][veh], FamInfo[idx][fVehCol1][veh], FamInfo[idx][fVehCol2][veh], 1200);
	        ChangeVehicleColor(FamInfo[idx][fVeh][veh], FamInfo[idx][fVehCol1][veh], FamInfo[idx][fVehCol2][veh]);
	        Fam[FamInfo[idx][fVeh][veh]] = idx;
			format(string, sizeof(string), "AdmWarn: %s has set family %d's vehicle slot %d to ID %d.", RPN(playerid), idx, veh+1, vehid);
			SendAdminMessage(COLOR_DARKRED, 1, string);
		}
	}
	else SendClientMessage(playerid, COLOR_GREY, "Invalid option.");
	return 1;
}

CMD:fcreate(playerid, params[])
{
	new string[128], playerb, idx;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4 && !PlayerInfo[playerid][pGangMod]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "ui", playerb, idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fcreate [playerid] [slot]");
    if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(idx < 1 || idx > 10) return SendClientMessage(playerid, COLOR_GREY, "Families are between 1 and 10.");
	if(FamInfo[idx][fTaken]) return SendClientMessage(playerid, COLOR_GREY, "Family slot is already in use.");
	FamInfo[idx][fTaken] = 1;
	FamInfo[idx][fMembers] ++;
	PlayerInfo[playerb][pFam] = idx;
	PlayerInfo[playerb][pFamRank] = 6;
	FamInfo[idx][fStrikes] = 0;
	format(FamInfo[idx][fLeader], MAX_PLAYER_NAME, "%s", RPN(playerb));
	format(string, sizeof(string), "AdmWarn: %s has given %s family slot %d.", RPN(playerid), RPN(playerb), idx);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/families.log", string);
	format(string, sizeof(string), " %s has given you family slot {33AA33}%d {33CCFF}ownership.", RPN(playerid), idx);
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:fstrike(playerid, params[])
{
	new string[128], idx;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4 && !PlayerInfo[playerid][pGangMod]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fstrike [slot]");
	if(idx < 1 || idx > 10) return SendClientMessage(playerid, COLOR_GREY, "Families are between 1 and 10.");
	if(!FamInfo[idx][fTaken]) return SendClientMessage(playerid, COLOR_GREY, "Family slot is not being used.");
	FamInfo[idx][fStrikes] ++;
	format(string, sizeof(string), "AdmWarn: %s has given family slot %d a strike.", RPN(playerid), idx);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/families.log", string);
	if(FamInfo[idx][fStrikes] >= 3)
	{
		format(string, sizeof(string), "AdmWarn: %s has disbanded family slot %d. (3 Strikes)", RPN(playerid), idx);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/families.log", string);
		foreach(Player, i)
		{
		    if(IsPlayerLoggedIn(i))
		    {
		        if(PlayerInfo[i][pFam] == idx)
		        {
		            PlayerInfo[i][pFam] = 0;
		            PlayerInfo[i][pFamRank] = 0;
			        format(string, sizeof(string), " %s has disbanded your family, you have been autokicked from the family.", RPN(playerid));
					SendClientMessage(i, COLOR_LIGHTBLUE, string);
		        }
		    }
		}
		FamInfo[idx][fTaken] = 0;
		format(FamInfo[idx][fName], 32, "None");
		format(FamInfo[idx][fMOTD], 64, "");
		FamInfo[idx][fColor] = 0;
		format(FamInfo[idx][fLeader], MAX_PLAYER_NAME, "None");
		FamInfo[idx][fMembers] = 0;
		FamInfo[idx][fSafeX] = 0;
		FamInfo[idx][fSafeY] = 0;
		FamInfo[idx][fSafeZ] = 0;
		FamInfo[idx][fMoney] = 0;
		FamInfo[idx][fMats] = 0;
		FamInfo[idx][fWeed] = 0;
		FamInfo[idx][fCrack] = 0;
		format(FamInfo[idx][fRank1], 32, "");
		format(FamInfo[idx][fRank2], 32, "");
		format(FamInfo[idx][fRank3], 32, "");
		format(FamInfo[idx][fRank4], 32, "");
		format(FamInfo[idx][fRank5], 32, "");
		format(FamInfo[idx][fRank6], 32, "");
		FamInfo[idx][fSkins][0] = 0;
		FamInfo[idx][fSkins][1] = 0;
		FamInfo[idx][fSkins][2] = 0;
		FamInfo[idx][fSkins][3] = 0;
		FamInfo[idx][fSkins][4] = 0;
		FamInfo[idx][fSkins][5] = 0;
		FamInfo[idx][fSkins][6] = 0;
		DestroyDynamicPickup(FamInfo[idx][fPickup]);
		DestroyDynamic3DTextLabel(FamInfo[idx][fText]);
		for(new veh=0; veh<5; veh++)
		{
			if(FamInfo[idx][fVehType][veh])
			{
			    FamInfo[idx][fVehType][veh] = 0;
			    FamInfo[idx][fVehCoX][veh] = 0;
				FamInfo[idx][fVehCoY][veh] = 0;
				FamInfo[idx][fVehCoZ][veh] = 0;
				FamInfo[idx][fVehRot][veh] = 0;
				FamInfo[idx][fVehCol1][veh] = 0;
				FamInfo[idx][fVehCol2][veh] = 0;
				DestroyVehicle(FamInfo[idx][fVeh][veh]);
			}
		}
	}
	return 1;
}

CMD:fstrikes(playerid, params[])
{
	new string[128], idx, amount;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4 && !PlayerInfo[playerid][pGangMod]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "ii", idx, amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fstrike [slot] [strikes]");
	if(idx < 1 || idx > 10) return SendClientMessage(playerid, COLOR_GREY, "Families are between 1 and 10.");
	if(amount < 0 || amount > 3) return SendClientMessage(playerid, COLOR_GREY, "Strikes are between 0 and 3.");
	if(!FamInfo[idx][fTaken]) return SendClientMessage(playerid, COLOR_GREY, "Family slot is not being used.");
	FamInfo[idx][fStrikes] ++;
	format(string, sizeof(string), "AdmWarn: %s has set family slot %d's strikes to %d.", RPN(playerid), idx, amount);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/families.log", string);
	FamInfo[idx][fStrikes] = amount;
	if(FamInfo[idx][fStrikes] >= 3)
	{
		format(string, sizeof(string), "AdmWarn: %s has disbanded family slot %d. (3 Strikes)", RPN(playerid), idx);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/families.log", string);
		foreach(Player, i)
		{
		    if(IsPlayerLoggedIn(i))
		    {
		        if(PlayerInfo[i][pFam] == idx)
		        {
		            PlayerInfo[i][pFam] = 0;
		            PlayerInfo[i][pFamRank] = 0;
			        format(string, sizeof(string), " %s has disbanded your family, you have been autokicked from the family.", RPN(playerid));
					SendClientMessage(i, COLOR_LIGHTBLUE, string);
		        }
		    }
		}
		FamInfo[idx][fTaken] = 0;
		format(FamInfo[idx][fName], 32, "None");
		format(FamInfo[idx][fMOTD], 64, "");
		FamInfo[idx][fColor] = 0;
		format(FamInfo[idx][fLeader], MAX_PLAYER_NAME, "None");
		FamInfo[idx][fMembers] = 0;
		FamInfo[idx][fSafeX] = 0;
		FamInfo[idx][fSafeY] = 0;
		FamInfo[idx][fSafeZ] = 0;
		FamInfo[idx][fMoney] = 0;
		FamInfo[idx][fMats] = 0;
		FamInfo[idx][fWeed] = 0;
		FamInfo[idx][fCrack] = 0;
		format(FamInfo[idx][fRank1], 32, "");
		format(FamInfo[idx][fRank2], 32, "");
		format(FamInfo[idx][fRank3], 32, "");
		format(FamInfo[idx][fRank4], 32, "");
		format(FamInfo[idx][fRank5], 32, "");
		format(FamInfo[idx][fRank6], 32, "");
		FamInfo[idx][fSkins][0] = 0;
		FamInfo[idx][fSkins][1] = 0;
		FamInfo[idx][fSkins][2] = 0;
		FamInfo[idx][fSkins][3] = 0;
		FamInfo[idx][fSkins][4] = 0;
		FamInfo[idx][fSkins][5] = 0;
		FamInfo[idx][fSkins][6] = 0;
		DestroyDynamicPickup(FamInfo[idx][fPickup]);
		DestroyDynamic3DTextLabel(FamInfo[idx][fText]);
		for(new veh=0; veh<5; veh++)
		{
			if(FamInfo[idx][fVehType][veh])
			{
			    FamInfo[idx][fVehType][veh] = 0;
			    FamInfo[idx][fVehCoX][veh] = 0;
				FamInfo[idx][fVehCoY][veh] = 0;
				FamInfo[idx][fVehCoZ][veh] = 0;
				FamInfo[idx][fVehRot][veh] = 0;
				FamInfo[idx][fVehCol1][veh] = 0;
				FamInfo[idx][fVehCol2][veh] = 0;
				DestroyVehicle(FamInfo[idx][fVeh][veh]);
			}
		}
	}
	return 1;
}

CMD:fdelete(playerid, params[])
{
	new string[128], idx;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4 && !PlayerInfo[playerid][pGangMod]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fdelete [slot]");
	if(idx < 1 || idx > 10) return SendClientMessage(playerid, COLOR_GREY, "Families are between 1 and 10.");
	if(!FamInfo[idx][fTaken]) return SendClientMessage(playerid, COLOR_GREY, "Family slot is not being used.");
	format(string, sizeof(string), "AdmWarn: %s has disbanded family slot %d", RPN(playerid), idx);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/families.log", string);
	foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i))
	    {
	        if(PlayerInfo[i][pFam] == idx)
	        {
	            PlayerInfo[i][pFam] = 0;
	            PlayerInfo[i][pFamRank] = 0;
		        format(string, sizeof(string), " %s has disbanded your family, you have been autokicked from the family.", RPN(playerid));
				SendClientMessage(i, COLOR_LIGHTBLUE, string);
	        }
	    }
	}
	FamInfo[idx][fTaken] = 0;
	format(FamInfo[idx][fName], 32, "None");
	format(FamInfo[idx][fMOTD], 64, "");
	FamInfo[idx][fColor] = 0;
	format(FamInfo[idx][fLeader], MAX_PLAYER_NAME, "None");
	FamInfo[idx][fMembers] = 0;
	FamInfo[idx][fSafeX] = 0;
	FamInfo[idx][fSafeY] = 0;
	FamInfo[idx][fSafeZ] = 0;
	FamInfo[idx][fMoney] = 0;
	FamInfo[idx][fMats] = 0;
	FamInfo[idx][fWeed] = 0;
	FamInfo[idx][fCrack] = 0;
	format(FamInfo[idx][fRank1], 32, "");
	format(FamInfo[idx][fRank2], 32, "");
	format(FamInfo[idx][fRank3], 32, "");
	format(FamInfo[idx][fRank4], 32, "");
	format(FamInfo[idx][fRank5], 32, "");
	format(FamInfo[idx][fRank6], 32, "");
	FamInfo[idx][fSkins][0] = 0;
	FamInfo[idx][fSkins][1] = 0;
	FamInfo[idx][fSkins][2] = 0;
	FamInfo[idx][fSkins][3] = 0;
	FamInfo[idx][fSkins][4] = 0;
	FamInfo[idx][fSkins][5] = 0;
	FamInfo[idx][fSkins][6] = 0;
	DestroyDynamicPickup(FamInfo[idx][fPickup]);
	DestroyDynamic3DTextLabel(FamInfo[idx][fText]);
	for(new veh=0; veh<5; veh++)
	{
		if(FamInfo[idx][fVehType][veh])
		{
		    FamInfo[idx][fVehType][veh] = 0;
		    FamInfo[idx][fVehCoX][veh] = 0;
			FamInfo[idx][fVehCoY][veh] = 0;
			FamInfo[idx][fVehCoZ][veh] = 0;
			FamInfo[idx][fVehRot][veh] = 0;
			FamInfo[idx][fVehCol1][veh] = 0;
			FamInfo[idx][fVehCol2][veh] = 0;
			DestroyVehicle(FamInfo[idx][fVeh][veh]);
		}
	}
	return 1;
}

CMD:dynamics(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
    SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
    SendClientMessage(playerid, COLOR_YELLOW, "DOORS: {FFFFFF}/createdoor /deletedoor /gotodoor /dedit /dused");
    SendClientMessage(playerid, COLOR_YELLOW, "GATES: {FFFFFF}/creategate /deletegate /gotogate /gedit /gused");
    SendClientMessage(playerid, COLOR_YELLOW, "MAPICONS: {FFFFFF}/createmapicon /deletemapicon /gotomapicon /medit /mused");
    SendClientMessage(playerid, COLOR_YELLOW, "BUSINESSES: {FFFFFF}/createbiz /deletebiz /gotobiz /asellbiz /bedit /bused");
    SendClientMessage(playerid, COLOR_YELLOW, "HOUSES: {FFFFFF}/createhouse /deletehouse /gotohouse /asellhouse /hedit /hused");
	return 1; // DynamicGates
}


CMD:gedit(playerid, params[])
{
	new string[128], idx;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
 	if(sscanf(params, "s[128]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gedit [option] [gateid]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: object | close | open | speed | password");
		return 1;
	}
	if(!strcmp(params, "object", true, 5))
	{
	    new object;
	    if(sscanf(params, "s[128]ii", params, idx, object)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gedit object [gateid] [objectid]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid gate id.");
        if(object == 0)
		{
			format(string, sizeof(string), "%d", object);
			cmd_deletegate(playerid, string);
			return 1;
		}
		GateInfo[idx][gModel] = object;
		DestroyDynamicObject(GateInfo[idx][gGate]);
		GateInfo[idx][gGate] = CreateDynamicObject(GateInfo[idx][gModel], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
	    format(string, sizeof(string), " You have set gate ID %d's object ID to %d.", idx, object);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else if(!strcmp(params, "close", true, 5))
	{
	    if(sscanf(params, "s[128]i", params, idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gedit position [gateid]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid gate id.");
		gEdit[playerid] = 1;
		gEditID[playerid] = idx;
		GetDynamicObjectPos(GateInfo[idx][gGate], gPos[playerid][0], gPos[playerid][1], gPos[playerid][2]);
		GetDynamicObjectRot(GateInfo[idx][gGate], gRot[playerid][0], gRot[playerid][1], gRot[playerid][2]);
		EditDynamicObject(playerid, GateInfo[idx][gGate]);
	    format(string, sizeof(string), " You are now editing gate ID %d's closing position.", idx);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else if(!strcmp(params, "open", true, 4))
	{
	    if(sscanf(params, "s[128]i", params, idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gedit open [gateid]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid gate id.");
		gEdit[playerid] = 2;
		gEditID[playerid] = idx;
		GetDynamicObjectPos(GateInfo[idx][gGate], gPos[playerid][0], gPos[playerid][1], gPos[playerid][2]);
		GetDynamicObjectRot(GateInfo[idx][gGate], gRot[playerid][0], gRot[playerid][1], gRot[playerid][2]);
		EditDynamicObject(playerid, GateInfo[idx][gGate]);
	    format(string, sizeof(string), " You are now editing gate ID %d's opening position.", idx);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else if(!strcmp(params, "speed", true, 5))
	{
	    new Float:speed;
	    if(sscanf(params, "s[128]if", params, idx, speed)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gedit open [gateid] [speed]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid gate id.");
		GateInfo[idx][gSpeed] = speed;
	    format(string, sizeof(string), " You have set gate ID %d's moving speed to %f.", idx, speed);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else if(!strcmp(params, "password", true, 8))
	{
	    new password[256];
	    if(sscanf(params, "s[128]is[256]", params, idx, password)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gedit open [gateid] [password]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid gate id.");
		format(GateInfo[idx][gPassword], 256, "%s", password);
	    format(string, sizeof(string), " You have set gate ID %d's password to {FF6347}%s", idx, password);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:gotogate(playerid, params[])
{
    new idx, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gotogate [gateid]");
	if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid gate id.");
	SetPlayerPos(playerid, GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ]);
	format(string, sizeof(string), " You have teleported to gate ID %d.", idx);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:gused(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Used Gates]:");
	for(new idx=1; idx<MAX_GATES; idx++)
	{
	    if(GateInfo[idx][gModel])
	    {
			format(string, sizeof(string), "ID: %d | Object: %d | Speed: %f | Password: %s", idx, GateInfo[idx][gModel], GateInfo[idx][gSpeed], GateInfo[idx][gPassword]);
			SendClientMessage(playerid, COLOR_ORANGE, string);
	    }
	}
	return 1;
}

CMD:deletegate(playerid, params[])
{
	new idx, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deletegate [gateid]");
	if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid gate id.");
	GateInfo[idx][gModel] = 0;
	GateInfo[idx][gCX] = 0;
	GateInfo[idx][gCY] = 0;
	GateInfo[idx][gCZ] = 0;
	GateInfo[idx][gCRX] = 0;
	GateInfo[idx][gCRY] = 0;
	GateInfo[idx][gCRZ] = 0;
	GateInfo[idx][gOX] = 0;
	GateInfo[idx][gOY] = 0;
	GateInfo[idx][gOZ] = 0;
	GateInfo[idx][gORX] = 0;
	GateInfo[idx][gORY] = 0;
	GateInfo[idx][gORZ] = 0;
	GateInfo[idx][gStatus] = 0;
	format(GateInfo[idx][gPassword], 256, "");
	GateInfo[idx][gSpeed] = 0;
	DestroyDynamicObject(GateInfo[idx][gGate]);
	DestroyDynamic3DTextLabel(GateInfo[idx][gText]);
	format(string, sizeof(string), "AdmWarn: %s has deleted gate ID %d.", RPN(playerid), idx);
    SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/gates.log", string);
	foreach(Player, i)
	{
		if(PlayerInfo[i][pGate][0] == idx)
		{
		    PlayerInfo[i][pGate][0] = 0;
		    SendClientMessage(playerid, COLOR_WHITE, " An administrator has deleted your gate in slot 1.");
		    format(string, sizeof(string), "AdmWarn: %s has deleted %s's slot 1 gate. (ID: %d)", RPN(playerid), RPN(i), idx);
		    SendAdminMessage(COLOR_DARKRED, 1, string);
			Log("logs/gates.log", string);
		}
		if(PlayerInfo[i][pGate][1] == idx)
		{
		    PlayerInfo[i][pGate][1] = 0;
		    SendClientMessage(playerid, COLOR_WHITE, " An administrator has deleted your gate in slot 2.");
		    format(string, sizeof(string), "AdmWarn: %s has deleted %s's slot 2 gate. (ID: %d)", RPN(playerid), RPN(i), idx);
		    SendAdminMessage(COLOR_DARKRED, 1, string);
			Log("logs/gates.log", string);
		}
		if(PlayerInfo[i][pGate][2] == idx)
		{
		    PlayerInfo[i][pGate][2] = 0;
		    SendClientMessage(playerid, COLOR_WHITE, " An administrator has deleted your gate in slot 3.");
		    format(string, sizeof(string), "AdmWarn: %s has deleted %s's slot 3 gate. (ID: %d)", RPN(playerid), RPN(i), idx);
		    SendAdminMessage(COLOR_DARKRED, 1, string);
			Log("logs/gates.log", string);
		}
	}
	return 1;
}

CMD:creategate(playerid, params[])
{
	new string[128], object;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "i", object)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /creategate [objectid]");
	for(new idx=1; idx<MAX_GATES; idx++)
	{
	    if(!GateInfo[idx][gModel])
	    {
	        GetPlayerPos(playerid, GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ]);
  			GateInfo[idx][gModel] = object;
			GateInfo[idx][gCX] = GateInfo[idx][gCX] + 2;
			GateInfo[idx][gCY] = GateInfo[idx][gCY] + 2;
			GateInfo[idx][gCRX] = 0;
			GateInfo[idx][gCRY] = 0;
			GateInfo[idx][gCRZ] = 0;
			GetPlayerPos(playerid, GateInfo[idx][gOX], GateInfo[idx][gOY], GateInfo[idx][gOZ]);
			GateInfo[idx][gOX] = GateInfo[idx][gOX] + 2;
			GateInfo[idx][gOY] = GateInfo[idx][gOY] + 2;
			GateInfo[idx][gORX] = 0;
			GateInfo[idx][gORY] = 0;
			GateInfo[idx][gORZ] = 0;
			GateInfo[idx][gStatus] = 0;
			format(GateInfo[idx][gPassword], 256, "");
			GateInfo[idx][gSpeed] = 2;
			// Creating
			format(string, sizeof(string), "Gate ID: %d", idx);
			GateInfo[idx][gGate] = CreateDynamicObject(GateInfo[idx][gModel], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
			GateInfo[idx][gText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], 10);
			// Text
			format(string, sizeof(string), "AdmWarn: %s has created gate ID %d. (Object: %d)", RPN(playerid), idx, object);
		    SendAdminMessage(COLOR_DARKRED, 1, string);
			Log("logs/gates.log", string);
			idx = MAX_GATES;
		}
	}
	return 1;
}

CMD:mused(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Used MapIcons]:");
	for(new idx=0; idx<MAX_MAPICONS; idx++)
	{
	    if(MapIconInfo[idx][mpType])
	    {
			format(string, sizeof(string), "ID: %d | Pickup: %d", idx, MapIconInfo[idx][mpType]);
			SendClientMessage(playerid, COLOR_ORANGE, string);
	    }
	}
	return 1;
}

CMD:medit(playerid, params[])
{
	new string[128], idx;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
 	if(sscanf(params, "s[128]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /medit [option] [mapiconid]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: Position | Icon");
		return 1;
	}
	if(!strcmp(params, "position", true, 8))
	{
	    if(sscanf(params, "s[128]i", params, idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /medit position [mapiconid]");
        if(MapIconInfo[idx][mpType] == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid mapicon id.");
        GetPlayerPos(playerid, MapIconInfo[idx][mpX], MapIconInfo[idx][mpY], MapIconInfo[idx][mpZ]);
        DestroyDynamicMapIcon(MapIconInfo[idx][mpID]);
		MapIconInfo[idx][mpID] = CreateDynamicMapIcon(MapIconInfo[idx][mpX], MapIconInfo[idx][mpY], MapIconInfo[idx][mpZ], MapIconInfo[idx][mpType], 0 ,0);
	    format(string, sizeof(string), " You have set mapicon ID %d's position to your coordinates.", idx);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	if(!strcmp(params, "icon", true, 4))
	{
	    new pickup;
	    if(sscanf(params, "s[128]ii", params, idx, pickup)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /medit icon [mapiconid] [iconid]");
        if(pickup == 0 || pickup == 1) return SendClientMessage(playerid, COLOR_GREY, "Invalid mapicon type.");
        if(MapIconInfo[idx][mpType] == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid mapicon id.");
        MapIconInfo[idx][mpType] = pickup;
        DestroyDynamicMapIcon(MapIconInfo[idx][mpID]);
		MapIconInfo[idx][mpID] = CreateDynamicMapIcon(MapIconInfo[idx][mpX], MapIconInfo[idx][mpY], MapIconInfo[idx][mpZ], MapIconInfo[idx][mpType], 0 ,0);
	    format(string, sizeof(string), " You have set mapicon ID %d's icon to %d.", idx, pickup);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:gotomapicon(playerid, params[])
{
    new idx, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gotomapicon [doorid]");
	if(!MapIconInfo[idx][mpType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid mapicon id.");
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerPos(playerid, MapIconInfo[idx][mpX], MapIconInfo[idx][mpY], MapIconInfo[idx][mpZ]);
	format(string, sizeof(string), " You have teleported to mapicon ID %d.", idx);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:deletemapicon(playerid, params[])
{
	new idx, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deletemapicon [mapiconid]");
	if(!MapIconInfo[idx][mpType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid mapicon id.");
    MapIconInfo[idx][mpType] = 0;
    MapIconInfo[idx][mpX] = 0;
	MapIconInfo[idx][mpY] = 0;
	MapIconInfo[idx][mpZ] = 0;
	DestroyDynamicMapIcon(MapIconInfo[idx][mpID]);
    format(string, sizeof(string), "AdmWarn: %s has deleted mapicon ID %d.", RPN(playerid), idx);
    SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/mapicons.log", string);
	return 1;
}

CMD:createmapicon(playerid, params[])
{
	new string[128], type;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "i", type)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /createmapicon [icon]");
	if(type == 0 || type == 1) return SendClientMessage(playerid, COLOR_GREY, "Invalid mapicon type.");
	for(new idx=0; idx<MAX_MAPICONS; idx++)
	{
	    if(!MapIconInfo[idx][mpType])
	    {
		    MapIconInfo[idx][mpType] = type;
		    GetPlayerPos(playerid, MapIconInfo[idx][mpX], MapIconInfo[idx][mpY], MapIconInfo[idx][mpZ]);
		    MapIconInfo[idx][mpID] = CreateDynamicMapIcon(MapIconInfo[idx][mpX], MapIconInfo[idx][mpY], MapIconInfo[idx][mpZ], MapIconInfo[idx][mpType], 0 ,0);
			format(string, sizeof(string), "AdmWarn: %s has created mapicon ID %d.", RPN(playerid), idx);
		    SendAdminMessage(COLOR_DARKRED, 1, string);
			Log("logs/mapicons.log", string);
			idx = MAX_DOORS;
		}
	}
	return 1;
}

CMD:dused(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Used Doors]:");
	for(new idx=0; idx<MAX_DOORS; idx++)
	{
	    if(DoorInfo[idx][dType])
	    {
			format(string, sizeof(string), "ID: %d | Pickup: %d | Int: %d | VW: %d | Custom Int: %d | Custom Ext: %d | %s", idx, DoorInfo[idx][dType], DoorInfo[idx][dOInt], DoorInfo[idx][dOVW], DoorInfo[idx][dCInt], DoorInfo[idx][dCExt], DoorInfo[idx][dText]);
			SendClientMessage(playerid, COLOR_ORANGE, string);
	    }
	}
	return 1;
}

CMD:dedit(playerid, params[])
{
	new idx, text[128], string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "s[128]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /dedit [option] [doorid]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: Pickup | Text | Interior | Exterior | CustomInterior | CustomExterior");
		return 1;
	}
	if(!strcmp(params, "pickup", true, 6))
	{
	    new pickup;
	    if(sscanf(params, "s[128]ii", params, idx, pickup)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /dedit pickup [doorid] [pickupid]");
        if(DoorInfo[idx][dType] == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid door id.");
		DoorInfo[idx][dType] = pickup;
		if(IsValidDynamicPickup(DoorInfo[idx][dPickup]))
		{
		    DestroyDynamicPickup(DoorInfo[idx][dPickup]);
		}
		DoorInfo[idx][dPickup] = CreateDynamicPickup(DoorInfo[idx][dType], 1, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ], DoorInfo[idx][dOVW], DoorInfo[idx][dOInt]);
	    format(string, sizeof(string), " You have set door ID %d's pickup to %d", idx, pickup);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	if(!strcmp(params, "text", true, 4))
	{
	    if(sscanf(params, "s[128]is[128]", params, idx, text)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /dedit text [doorid] [text]");
	    if(AntiAdv(playerid, params)) return 1;
        if(DoorInfo[idx][dType] == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid door id.");
		format(DoorInfo[idx][dText], 128, "%s", text);
		format(string, sizeof(string), "ID: %d\n%s", idx, DoorInfo[idx][dText]);
		UpdateDynamic3DTextLabelText(DoorInfo[idx][dTextID], COLOR_WHITE, string);
	    format(string, sizeof(string), " You have set door ID %d's text to %s", idx, text);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	if(!strcmp(params, "interior", true, 8))
	{
	    if(sscanf(params, "s[128]i", params, idx, text)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /dedit interior [doorid]");
        if(DoorInfo[idx][dType] == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid door id.");
		DoorInfo[idx][dIInt] = GetPlayerInterior(playerid);
		DoorInfo[idx][dIVW] = GetPlayerVirtualWorld(playerid);
		GetPlayerFacingAngle(playerid, DoorInfo[idx][dIA]);
		GetPlayerPos(playerid, DoorInfo[idx][dIX], DoorInfo[idx][dIY], DoorInfo[idx][dIZ]);
	    format(string, sizeof(string), " You have set door ID %d's interior to your coordinates. (Int: %d | VW: %d)", idx, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	if(!strcmp(params, "exterior", true, 8))
	{
	    if(sscanf(params, "s[128]i", params, idx, text)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /dedit interior [doorid]");
        if(DoorInfo[idx][dType] == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid door id.");
		DoorInfo[idx][dOInt] = GetPlayerInterior(playerid);
		DoorInfo[idx][dOVW] = GetPlayerVirtualWorld(playerid);
		GetPlayerFacingAngle(playerid, DoorInfo[idx][dOA]);
		GetPlayerPos(playerid, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]);
		DestroyDynamicPickup(DoorInfo[idx][dPickup]);
		DoorInfo[idx][dPickup] = CreateDynamicPickup(DoorInfo[idx][dType], 1, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ], DoorInfo[idx][dOVW], DoorInfo[idx][dOInt]);
		DestroyDynamic3DTextLabel(DoorInfo[idx][dTextID]);
		format(string, sizeof(string), "ID: %d\n%s", idx, DoorInfo[idx][dText]);
		DoorInfo[idx][dTextID] = CreateDynamic3DTextLabel(string, COLOR_WHITE, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]+0.3, 15);
	    format(string, sizeof(string), " You have set door ID %d's exterior to your coordinates. (Int: %d | VW: %d)", idx, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	if(!strcmp(params, "custominterior", true, 14))
	{
	    if(sscanf(params, "s[128]i", params, idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /dedit custominterior [doorid]");
        if(DoorInfo[idx][dType] == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid door id.");
		if(!DoorInfo[idx][dCInt])
		{
			DoorInfo[idx][dCInt] = 1;
		    format(string, sizeof(string), " You have set door ID %d to have a custom interior.", idx, text);
	    }
	    else
	    {
	        DoorInfo[idx][dCInt] = 0;
		    format(string, sizeof(string), " You have set door ID %d to have a normal interior.", idx, text);
	    }
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	if(!strcmp(params, "customexterior", true, 14))
	{
	    if(sscanf(params, "s[128]i", params, idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /dedit customexterior [doorid]");
        if(DoorInfo[idx][dType] == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid door id.");
		if(!DoorInfo[idx][dCExt])
		{
			DoorInfo[idx][dCExt] = 1;
		    format(string, sizeof(string), " You have set door ID %d to have a custom exterior.", idx, text);
	    }
	    else
	    {
	        DoorInfo[idx][dCExt] = 0;
		    format(string, sizeof(string), " You have set door ID %d to have a normal exterior.", idx, text);
	    }
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:gotodoor(playerid, params[])
{
    new idx, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gotodoor [doorid]");
	if(!DoorInfo[idx][dType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid door id.");
	SetPlayerInterior(playerid, DoorInfo[idx][dOInt]);
	SetPlayerVirtualWorld(playerid, DoorInfo[idx][dOVW]);
	SetPlayerPos(playerid, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]);
	format(string, sizeof(string), " You have teleported to door ID %d.", idx);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:deletedoor(playerid, params[])
{
	new idx, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deleteedoor [doorid]");
	if(!DoorInfo[idx][dType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid door id.");
	DoorInfo[idx][dType] = 0;
	DoorInfo[idx][dOX] = 0;
	DoorInfo[idx][dOY] = 0;
	DoorInfo[idx][dOZ] = 0;
	DoorInfo[idx][dIX] = 0;
	DoorInfo[idx][dIY] = 0;
	DoorInfo[idx][dIZ] = 0;
	DoorInfo[idx][dOInt] = 0;
	DoorInfo[idx][dOVW] = 0;
	DoorInfo[idx][dIInt] = 0;
	DoorInfo[idx][dIVW] = 0;
	DoorInfo[idx][dCInt] = 0;
	DoorInfo[idx][dCExt] = 0;
	format(DoorInfo[idx][dText], 32, "");
	DestroyDynamicPickup(DoorInfo[idx][dPickup]);
    DestroyDynamic3DTextLabel(DoorInfo[idx][dTextID]);
    format(string, sizeof(string), "AdmWarn: %s has deleted door ID %d.", RPN(playerid), idx);
    SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/doors.log", string);
	return 1;
}

CMD:createdoor(playerid, params[])
{
	new string[128], type;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "i", type)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /createdoor [pickupid]");
	if(type == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid door type.");
	for(new idx=0; idx<MAX_DOORS; idx++)
	{
	    if(!DoorInfo[idx][dType])
	    {
		    GetPlayerPos(playerid, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]);
   		    DoorInfo[idx][dType] = type;
			DoorInfo[idx][dOInt] = GetPlayerInterior(playerid);
			DoorInfo[idx][dOVW] = GetPlayerVirtualWorld(playerid);
			GetPlayerFacingAngle(playerid, DoorInfo[idx][dOA]);
			// Creating the door
            DoorInfo[idx][dPickup] = CreateDynamicPickup(DoorInfo[idx][dType], 1, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ], DoorInfo[idx][dOVW], DoorInfo[idx][dOInt]);
			format(string, sizeof(string), "ID: %d\n/dedit to set the text", idx);
			DoorInfo[idx][dTextID] = CreateDynamic3DTextLabel(string, COLOR_WHITE, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]+0.3, 15);
			format(string, sizeof(string), "AdmWarn: %s has created door ID %d. (Int: %d | VW: %d)", RPN(playerid), idx, DoorInfo[idx][dOInt], DoorInfo[idx][dOVW]);
		    SendAdminMessage(COLOR_DARKRED, 1, string);
			Log("logs/doors.log", string);
			idx = MAX_DOORS;
		}
	}
	return 1;
}

CMD:bused(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Used Businesses]:");
	for(new idx=1; idx<MAX_BIZ; idx++)
	{
	    if(BizInfo[idx][bType])
	    {
			format(string, sizeof(string), "ID: %d | Type: %s | Level: %d | Price: $%d | Products: %d | Vault: $%d | Owner: %s", idx, RBT(idx), BizInfo[idx][bLevel], BizInfo[idx][bPrice],BizInfo[idx][bProducts], BizInfo[idx][bMoney], BizInfo[idx][bOwner]);
			SendClientMessage(playerid, COLOR_ORANGE, string);
	    }
	}
	return 1;
}

CMD:banreason(playerid, params[])
{
    new file[32], string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "s[32]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /banreason [playername]");
    format(file, sizeof(file), "users/%s.ini", params);
    if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player name.");
    if(!dini_Int(file, "pBanned")) return SendClientMessage(playerid, COLOR_GREY, "Player is not banned.");
    SendClientMessage(playerid, COLOR_ORANGE, "[Banned Player Information]:");
    format(string, sizeof(string), " Name: {FFFFFF}%s", params);
    SendClientMessage(playerid, COLOR_ORANGE, string);
	format(string, sizeof(string), " Ban Reason: {FFFFFF}%s", dini_Get(file, "BanReason"));
	SendClientMessage(playerid, COLOR_ORANGE, string);
	format(string, sizeof(string), " Banned By: {FFFFFF}%s", dini_Get(file, "BannedBy"));
	SendClientMessage(playerid, COLOR_ORANGE, string);
	return 1;
}

CMD:bowners(playerid, params[])
{
    new file[32], string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Banned Businesses & House Owners]: (Check /banreason before taking an action on businesses)");
	for(new idx=1; idx<MAX_BIZ; idx++)
	{
	    if(strcmp("The State", BizInfo[idx][bOwner]))
	    {
	    	format(file, sizeof(file), "users/%s.ini", BizInfo[idx][bOwner]);
	    	if(dini_Exists(file))
	    	{
	    	    if(dini_Int(file, "pBanned") == 1)
				{
				    format(string, sizeof(string), " Business ID: %d - Owner: %s", idx, BizInfo[idx][bOwner]);
				    SendClientMessage(playerid, COLOR_ORANGE, string);
	    	    }
	    	}
	    }
	}
	for(new idx=1; idx<MAX_HOUSES; idx++)
	{
	    if(strcmp("The State", HouseInfo[idx][hOwner]))
	    {
	    	format(file, sizeof(file), "users/%s.ini", HouseInfo[idx][hOwner]);
	    	if(dini_Exists(file))
	    	{
	    	    if(dini_Int(file, "pBanned") == 1)
				{
				    format(string, sizeof(string), " House ID: %d - Owner: %s", idx, HouseInfo[idx][hOwner]);
				    SendClientMessage(playerid, COLOR_ORANGE, string);
	    	    }
	    	}
	    }
	}
	return 1;
}

CMD:bugs(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	new string[128], File: file = fopen("bugs.cfg", io_read), idx=1;
	SendClientMessage(playerid, COLOR_ORANGE, "[zGaming Roleplay Bugs]:");
	while(fread(file, string))
	{
	    format(string, sizeof(string), "%d) %s", idx, string);
	    SendClientMessage(playerid, COLOR_ORANGE, string);
	    idx ++;
	}
	fclose(file);
	return 1;
}

CMD:deletebug(playerid, params[])
{
	new line;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	if(sscanf(params, "i", line)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deletebug [bugid]");
	if(line < 1) return SendClientMessage(playerid, COLOR_GREY, "Invalid bug id.");
	new string[128];
	fdeleteline("bugs.cfg", line);
	format(string, sizeof(string), "AdmWarn: %s has deleted bug ID %d.", RPN(playerid), line);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:bedit(playerid, params[])
{
	new bizid, string[128], input;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bedit [option] [bizid]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: location | price | level | products | vault");
		return 1;
	}
	if(!strcmp(params, "location", true, 8))
	{
	    if(sscanf(params, "s[32]i", params, bizid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bedit location [bizid]");
		new idx=bizid;
		if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid business id.");
		GetPlayerPos(playerid, BizInfo[bizid][bX], BizInfo[bizid][bY], BizInfo[bizid][bZ]);
		DestroyDynamicPickup(BizInfo[bizid][bPickup]);
    	BizInfo[bizid][bPickup] = CreateDynamicPickup(1272, 1, BizInfo[bizid][bX], BizInfo[bizid][bY], BizInfo[bizid][bZ], 0);
		DestroyDynamic3DTextLabel(BizInfo[bizid][bText]);
        if(!strcmp("The State", BizInfo[idx][bOwner])) format(string, sizeof(string), "ID: %d\n%s\nOwner: %s\nStatus: For Sale\nPrice: $%d", idx, RBT(idx), BizInfo[idx][bOwner], BizInfo[idx][bPrice]);
		else format(string, sizeof(string), "ID: %d\n%s\nOwner: %s\nStatus: %s", idx, RBT(idx), BizInfo[idx][bOwner], RBS(idx));
    	BizInfo[bizid][bText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, BizInfo[bizid][bX], BizInfo[bizid][bY], BizInfo[bizid][bZ]+0.3, 15);
	    format(string, sizeof(string), "AdmWarn: %s has changed business ID %d's location.", RPN(playerid), bizid);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/business.log", string);
	}
	else if(!strcmp(params, "price", true, 5))
	{
	    if(sscanf(params, "s[32]ii", params, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bedit price [bizid] [price]");
		if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid business id.");
		if(strcmp("The State", BizInfo[bizid][bOwner])) return SendClientMessage(playerid, COLOR_GREY, "You can't edit the price of owned businesses.");
	    BizInfo[bizid][bPrice] = input;
	    format(string, sizeof(string), "ID: %d\n%s\nOwner: %s\nStatus: For Sale\nPrice: $%d", bizid, RBT(bizid), BizInfo[bizid][bOwner], BizInfo[bizid][bPrice]);
	    UpdateDynamic3DTextLabelText(BizInfo[bizid][bText], COLOR_WHITE, string);
	    format(string, sizeof(string), "AdmWarn: %s has set business ID %d's price to $%d.", RPN(playerid), bizid, input);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/business.log", string);
	}
	else if(!strcmp(params, "level", true, 5))
	{
	    // L1: 0 | L2: 100 | L3: 300 | L4: 700 | L5: 1200
	    if(sscanf(params, "s[32]ii", params, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bedit level [bizid] [level]");
    	if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid business id.");
    	if(input < 0 || input > 5) return SendClientMessage(playerid, COLOR_GREY, "Levels are between 1 and 5.");
	    BizInfo[bizid][bLevel] = input;
	    if(input == 1) BizInfo[bizid][bSold] = 0;
	    if(input == 2) BizInfo[bizid][bSold] = 100;
	    if(input == 3) BizInfo[bizid][bSold] = 300;
	    if(input == 4) BizInfo[bizid][bSold] = 700;
	    if(input == 5) BizInfo[bizid][bSold] = 1200;
	    format(string, sizeof(string), "AdmWarn: %s has set business ID %d's level to %d.", RPN(playerid), bizid, input);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/business.log", string);
	}
	else if(!strcmp(params, "products", true, 8))
	{
	    if(sscanf(params, "s[32]ii", params, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bedit products [bizid] [amount]");
    	if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid business id.");
    	if(input < 0) return SendClientMessage(playerid, COLOR_GREY, "Products can't be negative.");
	    BizInfo[bizid][bProducts] = input;
	    format(string, sizeof(string), "AdmWarn: %s has set business ID %d's products to %d.", RPN(playerid), bizid, input);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/business.log", string);
	}
	else if(!strcmp(params, "vault", true, 5))
	{
	    if(sscanf(params, "s[32]ii", params, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bedit vault [bizid] [amount]");
    	if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid business id.");
    	if(input < 0) return SendClientMessage(playerid, COLOR_GREY, "Vault money can't be negative.");
	    BizInfo[bizid][bMoney] = input;
	    format(string, sizeof(string), "AdmWarn: %s has set business ID %d's vault money to $%d.", RPN(playerid), bizid, input);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/business.log", string);
	}
	else if(!strcmp(params, "truckers", true, 8))
	{
   	    if(sscanf(params, "s[32]ii", params, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bedit truckers [bizid] [type] (1=Accepting | 2=NotAccepting");
        if(!BizInfo[bizid][bAP])
		{
		    BizInfo[bizid][bAP] = 1;
		    format(string, sizeof(string), "AdmWarn: %s has set business ID %d to accept truckers.", RPN(playerid), bizid);
			SendAdminMessage(COLOR_DARKRED, 1, string);
			Log("logs/business.log", string);
		}
		else
		{
		    BizInfo[bizid][bAP] = 0;
		    format(string, sizeof(string), "AdmWarn: %s has set business ID %d to NOT accept truckers.", RPN(playerid), bizid);
			SendAdminMessage(COLOR_DARKRED, 1, string);
			Log("logs/business.log", string);
		}
	}
	return 1;
}

CMD:gotobiz(playerid, params[])
{
    new idx, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gotobiz [bizid]");
	if(!BizInfo[idx][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid business id.");
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPos(playerid, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]);
	format(string, sizeof(string), " You have teleported to business ID %d.", idx);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:asellbiz(playerid, params[])
{
	new bizid, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "i", bizid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /asellbiz [bizid]");
	if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid business id.");
	if(!strcmp("The State", BizInfo[bizid][bOwner], true)) return SendClientMessage(playerid, COLOR_GREY, "This business is not owned by anybody.");
	foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i) && PlayerInfo[i][pBiz] == bizid)
		{
			PlayerInfo[i][pBiz] = 0;
			format(string, sizeof(string), " Administrator %s has sold your business.", RPN(playerid));
			SendClientMessage(i, COLOR_WHITE, string);
		}
	}
	format(string, sizeof(string), "AdmWarn: %s has sold %s's business. (ID %d)", RPN(playerid), BizInfo[bizid][bOwner], bizid);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/business.log", string);
    BizInfo[bizid][bStatus] = 0;
    format(BizInfo[bizid][bOwner], 32, "The State");
    format(string, sizeof(string), "ID: %d\n%s\nOwner: %s\nStatus: For Sale\nPrice: $%d", bizid, RBT(bizid), BizInfo[bizid][bOwner], BizInfo[bizid][bPrice]);
 	UpdateDynamic3DTextLabelText(BizInfo[bizid][bText], COLOR_WHITE, string);
	return 1;
}

CMD:createhouse(playerid, params[])
{
	new string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	for(new idx=1; idx<MAX_HOUSES; idx++)
	{
	    if(!HouseInfo[idx][hLevel])
		{
		    // Getting Business Setup
		    new Float:X, Float:Y, Float:Z;
		    GetPlayerPos(playerid, X, Y, Z);
		    // Making Business
		    HouseInfo[idx][hLevel] = 1;
		    HouseInfo[idx][hPrice] = 99999999;
		    HouseInfo[idx][hStatus] = 0;
		    format(HouseInfo[idx][hOwner], 32, "The State");
		    HouseInfo[idx][hX] = X;
		    HouseInfo[idx][hY] = Y;
		    HouseInfo[idx][hZ] = Z;
		    HouseInfo[idx][hMoney] = 0;
		    HouseInfo[idx][hMaterials] = 0;
		    HouseInfo[idx][hWeed] = 0;
		    HouseInfo[idx][hCrack] = 0;
			HouseInfo[idx][hGun][0] = 0;
			HouseInfo[idx][hGunAmmo][0] = 0;
			HouseInfo[idx][hGun][1] = 0;
			HouseInfo[idx][hGunAmmo][1] = 0;
			HouseInfo[idx][hGun][2] = 0;
			HouseInfo[idx][hGunAmmo][2] = 0;
			HouseInfo[idx][hGun][3] = 0;
			HouseInfo[idx][hGunAmmo][3] = 0;
			HouseInfo[idx][hGun][4] = 0;
			HouseInfo[idx][hGunAmmo][4] = 0;
		    HouseInfo[idx][hPickup] = CreateDynamicPickup(1273, 1, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ], 0);
            format(string, sizeof(string), "ID: %d\nHouse (Lvl: %d)\nOwner: %s\nStatus: For Sale\nPrice: $%d", idx, HouseInfo[idx][hLevel], HouseInfo[idx][hOwner], HouseInfo[idx][hPrice]);
			HouseInfo[idx][hText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]+0.3, 15);
			format(string, sizeof(string), "AdmWarn: %s has created house ID %d.", RPN(playerid), idx);
			SendAdminMessage(COLOR_DARKRED, 1, string);
			Log("logs/house.log", string);
			idx = MAX_HOUSES;
		}
	}
	return 1;
}

CMD:deletehouse(playerid, params[])
{
	new id, string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deletehouse [houseid]");
	if(!HouseInfo[id][hLevel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid business id.");
    foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i) && PlayerInfo[i][pHouse] == id)
		{
		    PlayerInfo[i][pHouse] = 0;
		    format(string, sizeof(string), " Administrator %s has deleted your house.", RPN(playerid));
			SendClientMessage(i, COLOR_WHITE, string);
		}
	}
	if(!strcmp("The State", HouseInfo[id][hOwner]))
	{
		format(string, sizeof(string), "AdmWarn: %s has deleted house ID %d.", RPN(playerid), id);
	}
	else
	{
	    format(string, sizeof(string), "AdmWarn: %s has deleted %s's house. (ID %d)", RPN(playerid), HouseInfo[id][hOwner], id);
	}
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/house.log", string);
	HouseInfo[id][hLevel] = 0;
    HouseInfo[id][hPrice] = 0;
    HouseInfo[id][hStatus] = 0;
    format(HouseInfo[id][hOwner], 32, "");
    HouseInfo[id][hX] = 0;
    HouseInfo[id][hY] = 0;
    HouseInfo[id][hZ] = 0;
    HouseInfo[id][hMoney] = 0;
    HouseInfo[id][hMaterials] = 0;
    HouseInfo[id][hWeed] = 0;
    HouseInfo[id][hCrack] = 0;
	HouseInfo[id][hGun][0] = 0;
	HouseInfo[id][hGunAmmo][0] = 0;
	HouseInfo[id][hGun][1] = 0;
	HouseInfo[id][hGunAmmo][1] = 0;
	HouseInfo[id][hGun][2] = 0;
	HouseInfo[id][hGunAmmo][2] = 0;
	HouseInfo[id][hGun][3] = 0;
	HouseInfo[id][hGunAmmo][3] = 0;
	HouseInfo[id][hGun][4] = 0;
	HouseInfo[id][hGunAmmo][4] = 0;
    DestroyDynamicPickup(HouseInfo[id][hPickup]);
    DestroyDynamic3DTextLabel(HouseInfo[id][hText]);
	return 1;
}

CMD:gotohouse(playerid, params[])
{
    new idx, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gotohouse [houseid]");
	if(!HouseInfo[idx][hLevel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid house id.");
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPos(playerid, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]);
	format(string, sizeof(string), " You have teleported to house ID %d.", idx);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:hused(playerid, params[])
{
	new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Used Houses]:");
	for(new idx=1; idx<MAX_HOUSES; idx++)
	{
	    if(HouseInfo[idx][hLevel])
	    {
			format(string, sizeof(string), "ID: %d | Level: %d | Price: $%d | Money: $%d | Materials: %d | Weed: %d | Crack: %d | Owner: %s",
			idx, HouseInfo[idx][hLevel], HouseInfo[idx][hPrice], HouseInfo[idx][hMoney], HouseInfo[idx][hMaterials], HouseInfo[idx][hWeed], HouseInfo[idx][hCrack], HouseInfo[idx][hOwner]);
			SendClientMessage(playerid, COLOR_ORANGE, string);
	    }
	}
	return 1;
}

CMD:asellhouse(playerid, params[])
{
	new bizid, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "i", bizid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /asellhouse [houseid]");
	if(!HouseInfo[bizid][hLevel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid house id.");
	if(!strcmp("The State", HouseInfo[bizid][hOwner], true)) return SendClientMessage(playerid, COLOR_GREY, "This house is not owned by anybody.");
	foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i) && PlayerInfo[i][pHouse] == bizid)
		{
			PlayerInfo[i][pHouse] = 0;
			format(string, sizeof(string), " Administrator %s has sold your house.", RPN(playerid));
			SendClientMessage(i, COLOR_WHITE, string);
		}
	}
	format(string, sizeof(string), "AdmWarn: %s has sold %s's house. (ID %d)", RPN(playerid), HouseInfo[bizid][hOwner], bizid);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/house.log", string);
    HouseInfo[bizid][hStatus] = 0;
    format(HouseInfo[bizid][hOwner], 32, "The State");
    format(string, sizeof(string), "ID: %d\nHouse (Lvl: %d)\nOwner: %s\nStatus: For Sale\nPrice: $%d", bizid, HouseInfo[bizid][hLevel], HouseInfo[bizid][hOwner], HouseInfo[bizid][hPrice]);
 	UpdateDynamic3DTextLabelText(HouseInfo[bizid][hText], COLOR_WHITE, string);
	return 1;
}

CMD:hedit(playerid, params[])
{
	new bizid, string[128], input;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hedit [option] [houseid]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: location | price | level");
		return 1;
	}
	if(!strcmp(params, "location", true, 8))
	{
	    if(sscanf(params, "s[32]i", params, bizid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hedit location [house]");
        new idx = bizid;
        if(!HouseInfo[bizid][hLevel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid house id.");
		GetPlayerPos(playerid, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]);
		DestroyDynamicPickup(HouseInfo[idx][hPickup]);
    	HouseInfo[idx][hPickup] = CreateDynamicPickup(1273, 1, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ], 0);
		DestroyDynamic3DTextLabel(HouseInfo[idx][hText]);
        if(!strcmp("The State", HouseInfo[idx][hOwner])) format(string, sizeof(string), "ID: %d\nHouse (Lvl: %d)\nOwner: %s\nStatus: For Sale\nPrice: $%d", idx, HouseInfo[idx][hLevel], HouseInfo[idx][hOwner], HouseInfo[idx][hPrice]);
		else format(string, sizeof(string), "ID: %d\nHouse (Lvl: %d)\nOwner: %s\nStatus: %s", idx, HouseInfo[idx][hLevel], HouseInfo[idx][hOwner], RHS(idx));
		HouseInfo[idx][hText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]+0.3, 15);
	    format(string, sizeof(string), "AdmWarn: %s has changed house ID %d's location.", RPN(playerid), bizid);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/house.log", string);
	}
	else if(!strcmp(params, "price", true, 5))
	{
    	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	    if(sscanf(params, "s[32]ii", params, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /house price [house] [price]");
        new idx = bizid;
		if(!HouseInfo[idx][hLevel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid house id.");
		if(strcmp("The State", HouseInfo[bizid][hOwner])) return SendClientMessage(playerid, COLOR_GREY, "You can't edit the price of owned businesses.");
	    HouseInfo[bizid][hPrice] = input;
	    format(string, sizeof(string), "ID: %d\nHouse (Lvl: %d)\nOwner: %s\nStatus: For Sale\nPrice: $%d", idx, HouseInfo[idx][hLevel], HouseInfo[idx][hOwner], HouseInfo[idx][hPrice]);
		UpdateDynamic3DTextLabelText(HouseInfo[bizid][hText], COLOR_WHITE, string);
	    format(string, sizeof(string), "AdmWarn: %s has set house ID %d's price to $%d.", RPN(playerid), bizid, input);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/house.log", string);
	}
	else if(!strcmp(params, "level", true, 5))
	{
		if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
	    if(sscanf(params, "s[32]ii", params, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /house level [houseid] [level]");
        new idx = bizid;
    	//if(!HouseInfo[bizid][hLevel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid house id.");
    	if(input < 1 || input > 10) return SendClientMessage(playerid, COLOR_GREY, "Levels are between 1 and 10.");
	    HouseInfo[bizid][hLevel] = input;
        if(!strcmp("The State", HouseInfo[idx][hOwner])) format(string, sizeof(string), "ID: %d\nHouse (Lvl: %d)\nOwner: %s\nStatus: For Sale\nPrice: $%d", idx, HouseInfo[idx][hLevel], HouseInfo[idx][hOwner], HouseInfo[idx][hPrice]);
		else format(string, sizeof(string), "ID: %d\nHouse (Lvl: %d)\nOwner: %s\nStatus: %s", idx, HouseInfo[idx][hLevel], HouseInfo[idx][hOwner], RHS(idx));
		UpdateDynamic3DTextLabelText(HouseInfo[bizid][hText], COLOR_WHITE, string);
	    format(string, sizeof(string), "AdmWarn: %s has set house ID %d's level to %d.", RPN(playerid), bizid, input);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/house.log", string);
	}
	return 1;
}

CMD:createbiz(playerid, params[])
{
	new type, string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "i", type))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /createbiz [type]");
		SendClientMessage(playerid, COLOR_GREY, "TYPES: 1) 24/7 | 2) Clothes Shop | 3) Ammunation | 4) Club | 5) Advertisement Agency | 6) Fast Food");
		return 1;
	}
	if(type < 1 || type > 6) return SendClientMessage(playerid, COLOR_GREY, "Businesses are between 1 and 5.");
	for(new idx=1; idx<MAX_BIZ; idx++)
	{
	    if(!BizInfo[idx][bType])
		{
		    // Getting Business Setup
		    new Float:X, Float:Y, Float:Z;
		    GetPlayerPos(playerid, X, Y, Z);
		    // Making Business
		    BizInfo[idx][bType] = type;
		    BizInfo[idx][bStatus] = 0;
		    format(BizInfo[idx][bOwner], 32, "The State");
		    BizInfo[idx][bX] = X;
		    BizInfo[idx][bY] = Y;
		    BizInfo[idx][bZ] = Z;
		    BizInfo[idx][bMoney] = 0;
		    BizInfo[idx][bProducts] = 0;
		    BizInfo[idx][bSold] = 0;
		    BizInfo[idx][bLevel] = 1;
		    BizInfo[idx][bPrice] = 99999999;
			BizInfo[idx][bPickup] = CreateDynamicPickup(1272, 1, X, Y, Z, 0);
			format(string, sizeof(string), "ID: %d\n%s\nOwner: %s\nStatus: For Sale\nPrice: $%d", idx, RBT(idx), BizInfo[idx][bOwner], BizInfo[idx][bPrice]);
			BizInfo[idx][bText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, X, Y, Z, 15);
			format(string, sizeof(string), "AdmWarn: %s has created business ID %d.", RPN(playerid), idx);
			SendAdminMessage(COLOR_DARKRED, 1, string);
			Log("logs/business.log", string);
			idx = MAX_BIZ;
		}
	}
	return 1;
}

CMD:deletebiz(playerid, params[])
{
	new id, string[128];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deletebiz [bizid]");
	if(!BizInfo[id][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid business id.");
    foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i) && PlayerInfo[i][pBiz] == id)
		{
		    PlayerInfo[playerid][pBiz] = 0;
		    format(string, sizeof(string), " Administrator %s has deleted your business.", RPN(playerid));
			SendClientMessage(i, COLOR_WHITE, string);
		}
	}
	if(!strcmp("The State", BizInfo[id][bOwner]))
	{
		format(string, sizeof(string), "AdmWarn: %s has deleted business ID %d.", RPN(playerid), id);
	}
	else
	{
	    format(string, sizeof(string), "AdmWarn: %s has deleted %s's business. (ID %d)", RPN(playerid), BizInfo[id][bOwner], id);
	}
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/business.log", string);
	BizInfo[id][bType] = 0;
    BizInfo[id][bStatus] = 0;
    format(BizInfo[id][bOwner], 32, "");
    BizInfo[id][bX] = 0;
    BizInfo[id][bY] = 0;
    BizInfo[id][bZ] = 0;
    BizInfo[id][bMoney] = 0;
    BizInfo[id][bProducts] = 0;
    DestroyDynamicPickup(BizInfo[id][bPickup]);
    DestroyDynamic3DTextLabel(BizInfo[id][bText]);
	return 1;
}

CMD:sobeit(playerid, params[])
{
	new playerb, string[128], weapons[13][2];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(!strcmp(params, "all", true))
	{
	    format(string, sizeof(string), "AdmCmd: %s has checked everybody online for sobeit hacks.", RPN(playerid));
	    SendClientMessageToAll(COLOR_LIGHTRED, string);
		foreach(Player, p)
		{
			for(new i=0; i<13; i++)
			{
		       	GetPlayerWeaponData(p, i, weapons[i][0], weapons[i][1]);
		        if(weapons[i][0] != PlayerInfo[p][pWeapon][i] && weapons[i][0] != PlayerInfo[playerb][pWeapon][i] && weapons[i][1] != 0)
		        {
			        format(string, sizeof(string), "AdmWarn: %s is hacking a %s. (Global sobeit check by %s)", RPN(p), RWN(weapons[i][0]), RPN(playerid));
			        SendAdminMessage(COLOR_DARKRED, 1, string);
		        }
			}
		}
		return 1;
	}
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sobeit [playerid/all]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	format(string, sizeof(string), "AdmWarn: %s has checked %s for sobeit hacks.", RPN(playerid), RPN(playerb));
	SendAdminMessage(COLOR_DARKRED, 1, string);
	for(new i=0; i<13; i++)
	{
		GetPlayerWeaponData(playerb, i, weapons[i][0], weapons[i][1]);
		if(weapons[i][0] != PlayerInfo[playerb][pWeapon][i])
	    {
 			format(string, sizeof(string), "AdmWarn: %s is hacking a %s. (Specific sobeit check by %s)", RPN(playerb), RWN(weapons[i][0]), RPN(playerid));
			SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	}
	return 1;
}

CMD:listguns(playerid, params[])
{
	new playerb, string[128], weaps, weapons[13][2];
    if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not an authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params,"u",playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /listguns [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	SendClientMessage(playerid, COLOR_GREEN, "____________________________");
	format(string, sizeof(string), "*** %s's Weapons ***", RPN(playerb));
	SendClientMessage(playerid, COLOR_ORANGE, string);
	for(new i=0; i<13; i++)
	{
       	GetPlayerWeaponData(playerb, i, weapons[i][0], weapons[i][1]);
        if(weapons[i][0] != PlayerInfo[playerb][pWeapon][i] && weapons[i][0] != PlayerInfo[playerb][pWeapon][i] && weapons[i][1] != 0)
        {
	        format(string, sizeof(string), " %s (Ammo: %d) (Hacked)", RWN(weapons[i][0]), weapons[i][1]);
	        SendClientMessage(playerid, COLOR_MEDIC, string);
	        weaps++;
        }
        else if(weapons[i][0] == PlayerInfo[playerb][pWeapon][i] && weapons[i][0] != 0)
        {
            format(string, sizeof(string), " %s (Ammo: %d)", RWN(PlayerInfo[playerb][pWeapon][i]), weapons[i][1]);
	        SendClientMessage(playerid, COLOR_MEDIC, string);
	        weaps++;
        }
	}
	if(weaps == 0) return SendClientMessage(playerid, COLOR_MEDIC, "None");
	return 1;
}

CMD:spec(playerid, params[])
{
	new playerb, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(!strcmp(params, "off", true))
	{
	    if(!Spec[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You aren't spectating anybody.");
	    Spec[playerid] = 0;
    	TogglePlayerSpectating(playerid, 0);
    	GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
    	GetPlayerArmour(playerid, PlayerInfo[playerid][pArmor]);
		SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pVW]);
		SetPlayerInterior(playerid, PlayerInfo[playerid][pInt]);
		SetPlayerPos(playerid, PlayerInfo[playerid][pX], PlayerInfo[playerid][pY], PlayerInfo[playerid][pZ]);
		SendClientMessage(playerid, COLOR_WHITE, " You have stopped spectating players.");
		if(PlayerInfo[Specid[playerid]][pAdmin] >= PlayerInfo[playerid][pAdmin])
   		{
			format(string, sizeof(string), "SpecWarn: %s has stopped spectating you.", RPN(playerid));
			SendClientMessage(Specid[playerid], COLOR_DARKRED, string);
	    }
	    Specid[playerid] = -1;
		return 1;
	}
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /spec [playerid]");
	if(playerid == playerb) return SendClientMessage(playerid, COLOR_GREY, "You can't spectate yourself.");
    if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    if(Spec[playerb]) return SendClientMessage(playerid, COLOR_GREY, "Player is spectating someone.");
    PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
	if(Specid[playerid] != -1 && PlayerInfo[Specid[playerid]][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
			format(string, sizeof(string), "SpecWarn: %s has stopped spectating you.", RPN(playerid));
			SendClientMessage(Specid[playerid], COLOR_DARKRED, string);
	}
    if(!Spec[playerid])
    {
	    PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
	    PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
	    GetPlayerPos(playerid, PlayerInfo[playerid][pX], PlayerInfo[playerid][pY], PlayerInfo[playerid][pZ]);
    }
    Specid[playerid] = playerb;
    TogglePlayerSpectating(playerid, 1);
    Spec[playerid] = 1;
    SetPlayerInterior(playerid, GetPlayerInterior(playerb));
    SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(playerb));
    format(string, sizeof(string), " Currently spectating %s", RPN(playerb));
    SendClientMessage(playerid, COLOR_WHITE, string);
    if(IsPlayerInAnyVehicle(playerb))
    {
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(playerb));
    }
    else
    {
        PlayerSpectatePlayer(playerid, playerb);
    }
    if(PlayerInfo[playerb][pAdmin] >= PlayerInfo[playerid][pAdmin])
    {
		format(string, sizeof(string), "SpecWarn: %s is currently spectating you.", RPN(playerid));
		SendClientMessage(playerb, COLOR_DARKRED, string);
    }
    if(!PlayerInfo[playerb][pTutorial]) SendClientMessage(playerid, COLOR_WHITE, " That player is viewing the tutorial, don't assume he's using hacks yet.");
	return 1;
}

CMD:tog(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(sscanf(params, "s[16]", params))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /tog [option]");
	    SendClientMessage(playerid, COLOR_GREY, "OPTIONS: fuel | speedo | phone | vip | join | oldskool | loyal");
	    if(PlayerInfo[playerid][pAdmin]) SendClientMessage(playerid, COLOR_GREY, "OPTIONS: adminooc | adminnewbie | betachat");
	    return 1;
	}
	if(!strcmp(params, "speedo", true))
	{
		if(!PlayerInfo[playerid][pSpeedo]) return SendClientMessage(playerid, COLOR_GREY, "You don't have a speedometer.");
		if(!Speedo[playerid])
		{
		    Speedo[playerid] = 1;
		    format(string, sizeof(string), "You have turned your speedometer {33AA33}on{33CCFF}.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		else
		{
		    Speedo[playerid] = 0;
		    format(string, sizeof(string), "You have turned your speedometer {FF9900}off{33CCFF}.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		return 1;
	}
	else if(!strcmp(params, "oldskool", true))
	{
		if(PlayerInfo[playerid][pHours] < 248) return SendClientMessage(playerid, COLOR_GREY, "You need to have at least 248 respect points to use this feature.");
		if(!PlayerInfo[playerid][pOldskool])
		{
		    PlayerInfo[playerid][pOldskool] = 1;
		    format(string, sizeof(string), "You have toggled your Oldskool tag {33AA33}on{33CCFF}.");
		    SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else
		{
		    PlayerInfo[playerid][pOldskool] = 0;
		    format(string, sizeof(string), "You have toggled your Oldskool tag {FF9900}off{33CCFF}.");
		    SendClientMessage(playerid, COLOR_WHITE, string);
		}
		return 1;
	}
	else if(!strcmp(params, "loyal", true))
	{
		if(PlayerInfo[playerid][pLoyal] && PlayerInfo[playerid][pLevel] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not a Loyal player.");
		if(!PlayerInfo[playerid][pLoyalTag])
		{
		    PlayerInfo[playerid][pLoyalTag] = 1;
		    format(string, sizeof(string), "You have toggled your Loyal tag {33AA33}on{33CCFF}.");
		    SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else
		{
		    PlayerInfo[playerid][pLoyalTag] = 0;
		    format(string, sizeof(string), "You have toggled your Loyal tag {FF9900}off{33CCFF}.");
		    SendClientMessage(playerid, COLOR_WHITE, string);
		}
		return 1;
	}
	else if(!strcmp(params, "fuel", true))
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You are not driving a vehicle.");
		if(!fMeter[playerid])
		{
		    fMeter[playerid] = 1;
		    format(string, sizeof(string), "You have turned your fuel information {33AA33}on{33CCFF}.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		else
		{
		    fMeter[playerid] = 0;
		    format(string, sizeof(string), "You have turned your fuel information {FF9900}off{33CCFF}.");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		return 1;
	}
	else if(!strcmp(params, "phone", true))
	{
	    if(!PhoneOff[playerid])
	    {
	        format(string, sizeof(string), "* %s turns their phone off.", RPN(playerid));
 			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        PhoneOff[playerid] = 1;
	        SendClientMessage(playerid, COLOR_WHITE, " You have turned your phone {FF9900}off{FFFFFF}.");
	    }
	    else
	    {
	        format(string, sizeof(string), "* %s turns their phone on.", RPN(playerid));
 			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        PhoneOff[playerid] = 0;
	        SendClientMessage(playerid, COLOR_WHITE, " You have turned your phone {33AA33}on{FFFFFF}.");
	    }
	    return 1;
	}
	else if(!strcmp(params, "vip", true))
	{
	    if(!VIPOff[playerid])
	    {
	        VIPOff[playerid] = 1;
	        SendClientMessage(playerid, COLOR_WHITE, " You have toggled VIP chat {FF9900}off{FFFFFF}.");
	    }
	    else
	    {
	        VIPOff[playerid] = 0;
	        SendClientMessage(playerid, COLOR_WHITE, " You have toggled VIP chat {33AA33}on{FFFFFF}.");
	    }
	    return 1;
	}
	else if(!strcmp(params, "join", true))
	{
		if(!JoinMessages[playerid])
	    {
	        JoinMessages[playerid] = 1;
	        SendClientMessage(playerid, COLOR_WHITE, " You have toggled Join Messages {33AA33}on{FFFFFF}.");
	    }
	    else
	    {
	        JoinMessages[playerid] = 0;
	        SendClientMessage(playerid, COLOR_WHITE, " You have toggled Join Messages {FF9900}off{FFFFFF}.");
	    }
	    return 1;
	}
	else if(!strcmp(params, "betachat", true))
	{
		if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	    if(PlayerInfo[playerid][pTester])
	    {
	        PlayerInfo[playerid][pTester] = 0;
	        SendClientMessage(playerid, COLOR_WHITE, " You have toggled Beta Testers chat {FF9900}off{FFFFFF}.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pTester] = 1;
	        SendClientMessage(playerid, COLOR_WHITE, " You have toggled Beta Testers chat {33AA33}on{FFFFFF}.");
	    }
	    return 1;
	}
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	else if(!strcmp(params, "adminooc", true))
	{
    	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	    if(!OOCStatus)
	    {
	        OOCStatus = 1;
	        format(string, sizeof(string), "AdmCmd: %s has {33AA33}enabled {FF6347}the global OOC chat for everybody.", RPN(playerid));
	        SendClientMessageToAll(COLOR_LIGHTRED, string);
	    }
	    else
	    {
	        OOCStatus = 0;
	        format(string, sizeof(string), "AdmCmd: %s has {FF9900}disabled {FF6347}the global OOC chat for everybody.", RPN(playerid));
	        SendClientMessageToAll(COLOR_LIGHTRED, string);
	    }
	}
	else if(!strcmp(params, "adminnewbie", true))
	{
		if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	    if(!NewbieStatus)
	    {
	        NewbieStatus = 1;
	        format(string, sizeof(string), "AdmCmd: %s has {33AA33}enabled {FF6347}the newbie chat for everybody.", RPN(playerid));
	        SendClientMessageToAll(COLOR_LIGHTRED, string);
	    }
	    else
	    {
	        NewbieStatus = 0;
	        format(string, sizeof(string), "AdmCmd: %s has {FF9900}disabled {FF6347}the newbie chat for everybody.", RPN(playerid));
	        SendClientMessageToAll(COLOR_LIGHTRED, string);
	    }
	}
	return 1;
}


CMD:veh(playerid, params[])
{
	new id, Float:pos[4], col[2];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(!strcmp(params, "destroy"))
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You must be inside a vehicle to destroy it.");
		for(new i=0; i<MAX_CUSTOM_VEHICLES; i++)
		{
		    if(GetPlayerVehicleID(playerid) == cVeh[i])
		    {
				//format(string, sizeof(string), "AdmWarn: %s has destroyed a vehicle model %d.", RPN(playerid), GetVehicleModel(i));
				//SendAdminMessage(COLOR_DARKRED, 1, string);
				DestroyVehicle(cVeh[i]);
				i = MAX_CUSTOM_VEHICLES;
				return 1;
			}
		}
		SendClientMessage(playerid, COLOR_GREY, "You can't destroy this vehicle.");
		return 1;
	}
	if(sscanf(params, "iii", id, col[0], col[1])) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /veh [vehicleid/destroy] [color1] [color2]");
	if(id < 400 || id > 611) return SendClientMessage(playerid, COLOR_GREY, "Vehicles are between 400 and 611.");
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	GetPlayerFacingAngle(playerid, pos[3]);
	for(new i=0; i<MAX_CUSTOM_VEHICLES; i++)
	{
	    if(!cVeh[i])
	    {
			cVeh[i] = CreateVehicle(id, pos[0], pos[1], pos[2], pos[3], col[0], col[1], 1200);
			i = MAX_CUSTOM_VEHICLES;
		}
	}
	//format(string, sizeof(string), "AdmWarn: %s has spawned a vehicle model %d.", RPN(playerid), id);
	//SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:slap(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /slap [playerid]");
    if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    if(PlayerInfo[playerid][pAdmin] < PlayerInfo[playerb][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Player has a higher admin level than you.");
	new Float:Pos[3];
	GetPlayerPos(playerb, Pos[0], Pos[1], Pos[2]);
	SetPlayerPos(playerb, Pos[0], Pos[1], Pos[2]+5);
	format(string, sizeof(string), "AdmWarn: %s has slapped %s.", RPN(playerid), RPN(playerb));
	SendAdminMessage(COLOR_LIGHTRED, 1, string);
	return 1;
}

CMD:mark(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	GetPlayerPos(playerid, aMark[playerid][0], aMark[playerid][1], aMark[playerid][2]);
	aMarkInt[playerid] = GetPlayerInterior(playerid);
	aMarkVw[playerid] = GetPlayerVirtualWorld(playerid);
	SendClientMessage(playerid, COLOR_WHITE, " You have marked a teleportation point, (/gotoloc mark) to TP back to it.");
	return 1;
}

CMD:gotoloc(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params,"s[32]", params))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gotoloc [place]");
	    SendClientMessage(playerid, COLOR_GREY, "PLACES: mark | ls | dmv | gym | dealership | trucker | productsdropoff");
	    return 1;
	}
	if(!strcmp(params, "mark", true))
	{
	    if(aMark[playerid][0] == 0 && aMark[playerid][1] == 0 && aMark[playerid][2] == 0) return SendClientMessage(playerid, COLOR_GREY, "You haven't marked a teleportation point.");
	    SetPlayerPos(playerid,aMark[playerid][0], aMark[playerid][1], aMark[playerid][2]);
	    SetPlayerInterior(playerid, aMarkInt[playerid]);
	    SetPlayerVirtualWorld(playerid, aMarkVw[playerid]);
	}
	else if(!strcmp(params, "ls", true))
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid,1515.2551,-1666.3148,14.0469);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to Los Santos.");
     	return 1;
	}
	else if(!strcmp(params, "dmv", true))
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid,2058.6326,-1914.0176,13.5469);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to the DMV.");
     	return 1;
	}
	else if(!strcmp(params, "gym", true))
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid,2224.8137,-1723.4457,13.5625);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to the Gym.");
     	return 1;
	}
	else if(!strcmp(params, "dealership", true))
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid,546.1611,-1273.8046,17.2482);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to the Vehicles Dealership.");
     	return 1;
	}
	else if(!strcmp(params, "trucker", true))
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid,1727.3557,2309.9985,10.8203);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to the Trucker Job.");
     	return 1;
	}
	else if(!strcmp(params, "productsdropoff", true))
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid,2222.5107,-2682.7368,13.5409);
	    SendClientMessage(playerid, COLOR_WHITE, " You have teleported to the Products Dropoff.");
     	return 1;
	}
	return 1;
}

CMD:hoseject(playerid, params[])
{
	new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hoseject [playerid]");
    if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    if(!PlayerInfo[playerb][pHospital])return SendClientMessage(playerid, COLOR_GREY, "Player is not in hospital.");
    HospitalTime[playerb] = 1;
    format(string, sizeof(string), " Administrator %s has ejected you from hospital", RPN(playerid));
	SendClientMessage(playerb, COLOR_WHITE, string);
	format(string, sizeof(string), "AdmWarn: %s ejected %s from hospital.", RPN(playerid), RPN(playerb));
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/hoseject.log", string);
	return 1;
}

CMD:sethpall(playerid, params[])
{
	new amount, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sethpall [amount]");
    foreach(Player, i)
    {
        if(IsPlayerLoggedIn(i))
        {
        	SetPlayerHealth(i, amount);
        }
    }
	format(string, sizeof(string), "AdmCmd: %s has set everybody's health to %d.", RPN(playerid),  amount);
	SendAdminMessage(COLOR_LIGHTRED, 1, string);
	Log("logs/sethparmor.log", string);
    return 1;
}

CMD:setarmorall(playerid, params[])
{
	new amount, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setarmorall [amount]");
    foreach(Player, i)
    {
        if(IsPlayerLoggedIn(i))
        {
        	SetPlayerArmour(i, amount);
        }
    }
	format(string, sizeof(string), "AdmCmd: %s has set everybody's armor to %d.", RPN(playerid),  amount);
	SendAdminMessage(COLOR_LIGHTRED, 1, string);
	Log("logs/sethparmor.log", string);
    return 1;
}

CMD:sethp(playerid, params[])
{
	new playerb, amount, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "ui", playerb, amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sethp [playerid] [amount]");
    if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    SetPlayerHealth(playerb, amount);
    format(string, sizeof(string), " Administrator %s has set your health to %d", RPN(playerid), amount);
	SendClientMessage(playerb, COLOR_WHITE, string);
	format(string, sizeof(string), "AdmWarn: %s has set %s's health to %d.", RPN(playerid), RPN(playerb), amount);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/sethparmor.log", string);
    return 1;
}

CMD:setarmor(playerid, params[])
{
	new playerb, amount, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "ui", playerb, amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setarmor [playerid] [amount]");
    if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    SetPlayerArmour(playerb, amount);
    format(string, sizeof(string), " Administrator %s has set your armor to %d", RPN(playerid), amount);
	SendClientMessage(playerb, COLOR_WHITE, string);
	format(string, sizeof(string), "AdmWarn: %s has set %s's armor to %d.", RPN(playerid), RPN(playerb), amount);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/sethparmor.log", string);
    return 1;
}

CMD:givegun(playerid, params[])
{
	new playerb, gunid, ammo, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "uii", playerb, gunid, ammo))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /givegun [playerid] [gunid] [ammo]");
		SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
		SendClientMessage(playerid, COLOR_GREY, "1: Brass Knuckles 2: Golf Club 3: Nite Stick 4: Knife 5: Baseball Bat 6: Shovel 7: Pool Cue 8: Katana 9: Chainsaw");
		SendClientMessage(playerid, COLOR_GREY, "10: Purple Dildo 11: Small White Vibrator 12: Large White Vibrator 13: Silver Vibrator 14: Flowers 15: Cane 16: Frag Grenade");
		SendClientMessage(playerid, COLOR_GREY, "17: Tear Gas 18: Molotov Cocktail 19: Vehicle Missile 20: Hydra Flare 21: Jetpack 22: 9mm 23: Silenced 9mm 24: Desert Eagle 25: Shotgun");
		SendClientMessage(playerid, COLOR_GREY, "26: Sawnoff Shotgun 27: SPAS-12 28: Micro SMG (Mac 10) 29: SMG (MP5) 30: AK-47 31: M4 32: Tec9 33: Rifle");
		SendClientMessage(playerid, COLOR_GREY, "25: Shotgun 34: Sniper Rifle 35: Rocket Launcher 36: HS Rocket Launcher 37: Flamethrower 38: Minigun 39: Satchel Charge");
		SendClientMessage(playerid, COLOR_GREY, "40: Detonator 41: Spraycan 42: Fire Extinguisher 43: Camera 44: Nightvision Goggles 45: Infared Goggles 46: Parachute");
		SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");

		return 1;
	}
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(gunid < 0 || gunid > 46 || gunid == 19 || gunid == 20 || gunid == 21) return SendClientMessage(playerid, COLOR_GREY, "Invalid weapon id.");
	GiveZaiatWeapon(playerb, gunid, ammo);
	format(string, sizeof(string), " You have given %s a %s with %d ammo.", RPN(playerb), RWN(gunid), ammo);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), " Administrator %s has given you a %s with %d ammo.", RPN(playerid), RWN(gunid), ammo);
	SendClientMessage(playerb, COLOR_WHITE, string);
	return 1;
}

CMD:disarm(playerid, params[])
{
    new playerb, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /disarm [playerid]");
    if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    if(PlayerInfo[playerid][pAdmin] < PlayerInfo[playerb][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Player has a higher admin level than you.");
    format(string, sizeof(string), " You have removed %s's weapons.", RPN(playerb));
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), " Administrator %s has removed your weapons.", RPN(playerid));
	SendClientMessage(playerb, COLOR_WHITE, string);
	ResetZaiatWeapons(playerb);
	return 1;
}

CMD:setint(playerid, params[])
{
	new playerb, int, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "ui", playerb, int)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setint [playerid] [VW]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	SetPlayerInterior(playerb, int);
	format(string, sizeof(string), " You have set %s's Int %d.", RPN(playerb), int);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), " Administrator %s has set your Int %d.", RPN(playerid), int);
	SendClientMessage(playerb, COLOR_WHITE, string);
	return 1;
}

CMD:setvw(playerid, params[])
{
	new playerb, vw, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "ui", playerb, vw)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setvw [playerid] [VW]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	SetPlayerVirtualWorld(playerb, vw);
	format(string, sizeof(string), " You have set %s's VW %d.", RPN(playerb), vw);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), " %s has set your VW %d.", RPN(playerid), vw);
	SendClientMessage(playerb, COLOR_WHITE, string);
	return 1;
}

CMD:setskin(playerid, params[])
{
	new playerb, skin, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "ui", playerb, skin)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setskin [playerid] [skinid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	PlayerInfo[playerb][pModel] = skin;
	SetPlayerSkin(playerb, skin);
	format(string, sizeof(string), " You have set %s's skin to ID %d.", RPN(playerb), skin);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), " Administrator %s has set your skin to ID %d.", RPN(playerid), skin);
	SendClientMessage(playerb, COLOR_WHITE, string);
	return 1;
}

CMD:givemoney(playerid, params[])
{
    new playerb, amount, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "ui", playerb, amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /givemoney [playerid] [amount]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	GiveZaiatMoney(playerb, amount);
	format(string, sizeof(string), " Administrator %s has given you $%d", RPN(playerid), amount);
	SendClientMessage(playerb, COLOR_WHITE, string);
	format(string, sizeof(string), "AdmWarn: %s has given %s $%d.", RPN(playerid), RPN(playerb), amount);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/givemoney.log", string);
	return 1;
}

CMD:setmoney(playerid, params[])
{
    new playerb, amount, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "ui", playerb, amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setmoney [playerid] [amount]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	SetZaiatMoney(playerb, amount);
	format(string, sizeof(string), " Administrator %s has set your money to $%d", RPN(playerid), amount);
	SendClientMessage(playerb, COLOR_WHITE, string);
	format(string, sizeof(string), "AdmWarn: %s has set %s's money to $%d.", RPN(playerid), RPN(playerb), amount);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/setmoney.log", string);
	return 1;
}

CMD:check(playerid, params[])
{
    new playerb;
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /check [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	ShowStats(playerid, playerb);
	return 1;
}

CMD:makeleader(playerid, params[])
{
    new playerb, faction, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5 && !PlayerInfo[playerid][pFacMod]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "ui", playerb, faction))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /makeleader [playerid] [factionid]");
		SendClientMessage(playerid, COLOR_GREY, "FACTIONS: 0) Civilian | 1) SAPD | 2) Government | 3) Hitman Agency | 4) News Agency");
		return 1;
	}
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(faction < 0 || faction > 4) return SendClientMessage(playerid, COLOR_GREY, "Factions are between 0 and 4");
	// Setting Player's Stats
	if(faction == 0)
	{
	    PlayerInfo[playerb][pFac] = 0;
		PlayerInfo[playerb][pFacRank] = 0;
		PlayerInfo[playerb][pFacLeader] = 0;
	}
	else
	{
		PlayerInfo[playerb][pFac] = faction;
		PlayerInfo[playerb][pFacRank] = 6;
		PlayerInfo[playerb][pFacLeader] = 1;
		PlayerInfo[playerb][pFacDiv] = 0;
		PlayerInfo[playerb][pFacDivLeader] = 0;
	}
	// Admin & Player messages
	format(string, sizeof(string), "AdmWarn: %s has given %s the {33AA33}%s {AA3333}faction leadership.", RPN(playerid), RPN(playerb), RPFNEx(playerb));
    SendAdminMessage(COLOR_DARKRED, 1, string);
	format(string, sizeof(string), " %s has given you the {33AA33}%s {33CCFF}faction leadership.", RPN(playerid), RPFNEx(playerb));
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "AdmWarn: %s has given %s the %s faction leadership.", RPN(playerid), RPN(playerb), RPFNEx(playerb));
	Log("logs/factions.log", string);
	return 1;
}


CMD:a(playerid, params[])
{
    new string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/a)dminChat [text]");
	if(AntiAdv(playerid, params)) return 1;
	format(string, sizeof(string), "*%s %s: {98F5EB}%s", RPALN(playerid), RPN(playerid), params);
	SendAdminMessage(COLOR_LIGHTRED, 1, string);
	format(string, sizeof(string), "*%s %s: %s", RPALN(playerid), RPN(playerid), params);
	Log("logs/adminchat.log", string);
	return 1;
}

CMD:tuteject(playerid, params[])
{
    new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /tuteject [playerid]]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerb][pTutorial]) return SendClientMessage(playerid, COLOR_GREY, "Player is not in the tutorial.");
	SetPlayerVirtualWorld(playerid, 0);
	PlayerInfo[playerb][pTutorial] = 1;
	KillTimer(Tut[playerb]);
	Tut[playerb] = SetTimerEx("TutFinal", 100, false, "i", playerb);
	SpawnChar(playerb);
	format(string, sizeof(string), " Administrator %s has ejected you from the tutorial.", RPN(playerid));
	SendClientMessage(playerb, COLOR_WHITE, string);
	format(string, sizeof(string), "AdmWarn: %s has ejected %s from the tutorial.", RPN(playerid), RPN(playerb));
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/tutorial.log", string);
	return 1;
}

CMD:forcetut(playerid, params[])
{
    new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /forcetut [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pTutorial]) return SendClientMessage(playerid, COLOR_GREY, "Player is already in the tutorial.");
	PlayerInfo[playerb][pTutorial] = 0;
	SetTimerEx("Tut1", 2000, false, "i", playerb);
	format(string, sizeof(string), "AdmCmd: %s has forced %s to see the tutorial.", RPN(playerid), RPN(playerb));
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	Log("logs/tutorial.log", string);
	return 1;
}

CMD:skick(playerid, params[])
{
    new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "us[128]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /kick [playerid] [reason]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerid][pAdmin] < PlayerInfo[playerb][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Player has a higher admin level than you.");	format(string, sizeof(string), "AdmCmd: %s has been kicked by %s, reason: %s", RPN(playerb), RPN(playerid), params);
    format(string, sizeof(string), "AdmWarn: %s has been skicked by %s, reason: %s", RPN(playerb), RPN(playerid), params);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	SendClientMessage(playerb, COLOR_RED, string);
	format(string, sizeof(string), "AdmCmd: %s has been skicked by %s (%s), reason: %s", RPN(playerb), RPN(playerid), RPIP(playerid), params);
	Log("logs/kick.log", string);
	SaveChar(playerb);
	Kick(playerb);
	return 1;
}

CMD:givecookie(playerid, params[])
{
    new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "us[128]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /givecookie [playerid] [reason]");
	if(!IsPlayerConnected(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
    format(string, sizeof(string), "AdmCmd: %s has given %s a cookie, reason: %s", RPN(playerid), RPN(playerb), params);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	Log("logs/cookies.log", string);
	PlayerInfo[playerb][pCookies] ++;
	return 1;
}

CMD:kick(playerid, params[])
{
    new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "us[128]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /kick [playerid] [reason]");
	if(!IsPlayerConnected(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(IsPlayerNPC(playerb)) return SendClientMessage(playerid, COLOR_GREY, "You can't kick NPCs out of the server.");
	if(PlayerInfo[playerid][pAdmin] < PlayerInfo[playerb][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Player has a higher admin level than you.");	format(string, sizeof(string), "AdmCmd: %s has been kicked by %s, reason: %s", RPN(playerb), RPN(playerid), params);
    format(string, sizeof(string), "AdmCmd: %s has been kicked by %s, reason: %s", RPN(playerb), RPN(playerid), params);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	format(string, sizeof(string), "AdmCmd: %s has been kicked by %s (%s), reason: %s", RPN(playerb), RPN(playerid), RPIP(playerid), params);
	Log("logs/kick.log", string);
	Kick(playerb);
	return 1;
}

CMD:warns(playerid, params[])
{
	new string[128], playerb;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /warns [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pWarns]) return SendClientMessage(playerid, COLOR_GREY, "Player has no warnings.");
	SendClientMessage(playerid, COLOR_ORANGE, "[Player Warnings Information]:");
	if(PlayerInfo[playerb][pWarns] >= 1) {format(string, sizeof(string), "1) {FFFFFF}%s", PlayerInfo[playerb][pWarn1]); SendClientMessage(playerid, COLOR_ORANGE, string);}
	if(PlayerInfo[playerb][pWarns] >= 2) {format(string, sizeof(string), "2) {FFFFFF}%s", PlayerInfo[playerb][pWarn2]); SendClientMessage(playerid, COLOR_ORANGE, string);}
	if(PlayerInfo[playerb][pWarns] >= 3) {format(string, sizeof(string), "3) {FFFFFF}%s", PlayerInfo[playerb][pWarn3]); SendClientMessage(playerid, COLOR_ORANGE, string);}
	return 1;
}

CMD:warn(playerid, params[])
{
	new string[128], playerb;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "us[64]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /warn [playerid] [reason]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	PlayerInfo[playerb][pWarns] ++;
	if(PlayerInfo[playerb][pWarns] == 1) format(PlayerInfo[playerb][pWarn1], 64, "%s", params);
	else if(PlayerInfo[playerb][pWarns] == 2) format(PlayerInfo[playerb][pWarn2], 64, "%s", params);
	else if(PlayerInfo[playerb][pWarns] == 3) format(PlayerInfo[playerb][pWarn3], 64, "%s", params);
	format(string, sizeof(string), " Administrator %s has given you a warning, reason: %s", RPN(playerid), params);
	SendClientMessage(playerb, COLOR_LIGHTRED, string);
	format(string, sizeof(string), "AdmWarn: %s has given %s a warning, reason: %s", RPN(playerid), RPN(playerb), params);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/warn.log", string);
	if(PlayerInfo[playerb][pWarns] == 3)
	{
		format(string, sizeof(string), "AdmCmd: %s has been banned (3 Warnings) by %s, reason: %s", RPN(playerb), RPN(playerid), params);
		SendClientMessageToAll(COLOR_LIGHTRED, string);
		format(string, sizeof(string), "AdmCmd: %s has been banned (3 Warnings) by %s (%s), reason: %s", RPN(playerb), RPN(playerid) , RPIP(playerid), params);
		Log("logs/ban.log", string);
		// Banning
		PlayerInfo[playerb][pBanned] = 1;
		// Banreason
		new file[32];
		format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
		format(string, sizeof(string), "%s (3 Warnings)", params);
		dini_Set(file, "BanReason", string);
		dini_Set(file, "BannedBy", RPNU(playerid));
		// BanList
		AddBan(playerb);
		Kick(playerb);
	}
	return 1;
}

CMD:clearwarns(playerid, params[])
{
	new string[128], playerb;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
   	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /clearwarns [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pWarns]) return SendClientMessage(playerid, COLOR_GREY, "Player has no warnings.");
	format(string, sizeof(string), "AdmWarn: %s had cleared %s's warnings. (Had %d)", RPN(playerid), RPN(playerb), PlayerInfo[playerb][pWarns]);
	PlayerInfo[playerb][pWarns] = 0;
	format(PlayerInfo[playerid][pWarn1], 64, "");
	format(PlayerInfo[playerid][pWarn2], 64, "");
	format(PlayerInfo[playerid][pWarn3], 64, "");
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/warn.log", string);
	return 1;
}

CMD:sban(playerid, params[])
{
    new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "us[128]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sban [playerid] [reason]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerid][pAdmin] < PlayerInfo[playerb][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Player has a higher admin level than you.");
	format(string, sizeof(string), "AdmWarn: %s has been sbanned by %s, reason: %s", RPN(playerb), RPN(playerid), params);
	SendAdminMessage(COLOR_LIGHTRED, 1, string);
	SendClientMessage(playerb, COLOR_RED, string);
	format(string, sizeof(string), "AdmCmd: %s has been sbanned by %s (%s), reason: %s", RPN(playerb), RPN(playerid) , RPIP(playerid), params);
	Log("logs/ban.log", string);
	// Banning
	PlayerInfo[playerb][pBanned] = 1;
	// Banreason
	new file[32];
	format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
	dini_Set(file, "BanReason", params);
	dini_Set(file, "BannedBy", RPNU(playerid));
	// BanList
	AddBan(playerb);
	Kick(playerb);
	return 1;
}

CMD:whitelist(playerid, params[])
{
    new playerb[32], string[128], file[32];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "s[32]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /whitelist [playername]");
	format(file, sizeof(file), "users/%s.ini", playerb);
	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GREY, "Player name not found.");
	format(string, sizeof(string), "AdmWarn: %s has whitelisted %s.", RPN(playerid), params);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/whitelist.log", string);
	// Whitelisting
	dini_IntSet(file, "Whitelisted", 1);
	return 1;
}

CMD:rangeban(playerid, params[])
{
    new playerb, string[128],range[4][4];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "us[128]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /rangeban [playerid] [reason]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerid][pAdmin] < PlayerInfo[playerb][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Player has a higher admin level than you.");
	// Rangeban
	split(RPIP(playerb), range, '.');
	format(string, sizeof(string), "%s.%s.*.*", range[0], range[1]);
	AddRangeBan(string);
	// Normal ban
	format(string, sizeof(string), "AdmCmd: %s has been rangebanned by %s, reason: %s", RPN(playerb), RPN(playerid), params);
	SendClientMessageToAll(COLOR_LIGHTRED, string);

	format(string, sizeof(string), "AdmCmd: %s has been rangebanned by %s (%s), reason: %s", RPN(playerb), RPN(playerid) , RPIP(playerid), params);
	Log("logs/ban.log", string);
	// Banning
	PlayerInfo[playerb][pBanned] = 1;
	// Banreason
	new file[32];
	format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
	dini_Set(file, "BanReason", params);
	dini_Set(file, "BannedBy", RPNU(playerid));
	// BanList
	AddBan(playerb);
	Kick(playerb);
	return 1;
}

CMD:ban(playerid, params[])
{
    new playerb, string[128];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "us[128]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /ban [playerid] [reason]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerid][pAdmin] < PlayerInfo[playerb][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Player has a higher admin level than you.");
	format(string, sizeof(string), "AdmCmd: %s has been banned by %s, reason: %s", RPN(playerb), RPN(playerid), params);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	format(string, sizeof(string), "AdmCmd: %s has been banned by %s (%s), reason: %s", RPN(playerb), RPN(playerid) , RPIP(playerid), params);
	Log("logs/ban.log", string);
	// Banning
	PlayerInfo[playerb][pBanned] = 1;
	// Banreason
	new file[32];
	format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
	dini_Set(file, "BanReason", params);
	dini_Set(file, "BannedBy", RPNU(playerid));
	// BanList
	AddBan(playerb);
	Kick(playerb);
	return 1;
}

CMD:banaccount(playerid, params[])
{
    new playerb[32], string[128], file[32];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "s[32]s[128]", playerb, params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /banaccount [playername] [reason]");
	if(RPIDFN(playerb) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Player is connected to the server, use /ban instead.");
	format(file, sizeof(file), "users/%s.ini", playerb);
	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GREY, "Player name not found.");
	if(PlayerInfo[playerid][pAdmin] < dini_Int(file, "Admin")) return SendClientMessage(playerid, COLOR_GREY, "Player has a higher admin level than you.");
	format(string, sizeof(string), "AdmCmd: %s has been offline-banned by %s, reason: %s", playerb, RPN(playerid), params);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	format(string, sizeof(string), "AdmCmd: %s has been offline-banned by %s (%s), reason: %s", playerb, RPN(playerid) , RPIP(playerid), params);
	Log("logs/ban.log", string);
	// Banning
	dini_IntSet(file, "pBanned", 1);
	// Banreason
	dini_Set(file, "BanReason", params);
	dini_Set(file, "BannedBy", RPNU(playerid));
	// BanList
	new File:ban = fopen("ban.cfg", io_append);
	format(string, sizeof(string), "%s\r\n", dini_Get(file, "IP"));
	fwrite(ban, string);
	fclose(ban);
	return 1;
}

CMD:goback(playerid, params[])
{
	new string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pHelper] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(hPos[playerid][0] == 0 && hPos[playerid][1] == 0 && hPos[playerid][2] == 0 && hPOS[playerid][0] == 0 && hPOS[playerid][0] == 0) return SendClientMessage(playerid, COLOR_GREY, "You haven't teleported to anybody.");
	SetPlayerPos(playerid, hPos[playerid][0], hPos[playerid][1], hPos[playerid][2]);
	SetPlayerInterior(playerid, hPOS[playerid][0]);
	SetPlayerVirtualWorld(playerid, hPOS[playerid][1]);
	hPos[playerid][0] = 0; hPos[playerid][1] = 0; hPos[playerid][2] = 0; hPOS[playerid][0] = 0; hPOS[playerid][1] = 0;
	format(string, sizeof(string), "HelpWarn: %s has teleported back to their location.", RPN(playerid));
	SendHelperMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:goto(playerid, params[])
{
	new playerb, string[128];
	new Float:Pos[3];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid] && PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /goto [playerid]");
	if(!IsPlayerLoggedIn(playerb) && !IsPlayerNPC(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerid][pHelper] && !PlayerInfo[playerid][pAdmin])
	{
	    if(!HelpTime[playerb]) return SendClientMessage(playerid, COLOR_GREY, "This player hasn't requested any help.");
	   	if(hPos[playerid][0] == 0 && hPos[playerid][1] == 0 && hPos[playerid][2] == 0 && hPOS[playerid][0] == 0 && hPOS[playerid][0] == 0)
	   	{
		    GetPlayerPos(playerid, hPos[playerid][0], hPos[playerid][1], hPos[playerid][2]);
		    hPOS[playerid][0] = GetPlayerInterior(playerid);
		    hPOS[playerid][1] = GetPlayerVirtualWorld(playerid);
			GetPlayerPos(playerb, Pos[0], Pos[1], Pos[2]);
			SetPlayerPos(playerid, Pos[0]+1, Pos[1], Pos[2]);
			SetPlayerInterior(playerid, GetPlayerInterior(playerb));
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(playerb));
			format(string, sizeof(string), " You have teleported to %s.", RPN(playerb));
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), " %s %s has teleported to you.", RPHLN(playerid), RPN(playerid));
			SendClientMessage(playerb, COLOR_WHITE, string);
			format(string, sizeof(string), "HelpWarn: %s has teleported to %s.", RPN(playerid), RPN(playerb));
			SendHelperMessage(COLOR_DARKRED, 1, string);
		}
		else SendClientMessage(playerid, COLOR_GREY, "You must /goback before teleporting to another player.");
	}
	else
	{
		if(Spec[playerb]) return SendClientMessage(playerid, COLOR_GREY, "Player is spectating someone.");
		GetPlayerPos(playerb, Pos[0], Pos[1], Pos[2]);
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    SetVehiclePos(GetPlayerVehicleID(playerid), Pos[0]+2, Pos[1]+2, Pos[2]);
		}
		else
		{
		    SetPlayerPos(playerid, Pos[0]+1, Pos[1], Pos[2]);
		}
		SetPlayerInterior(playerid, GetPlayerInterior(playerb));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(playerb));
		format(string, sizeof(string), " You have teleported to %s.", RPN(playerb));
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), " Administrator %s has teleported to you.", RPN(playerid));
		SendClientMessage(playerb, COLOR_WHITE, string);
	}
	return 1;
}

CMD:gotoveh(playerid, params[])
{
	new vehid, string[128];
	new Float:Pos[3];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "i", vehid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gotoveh [vehicleid]");
	if(vehid < 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid vehicle id.");
	GetVehiclePos(vehid, Pos[0], Pos[1], Pos[2]);
	SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	format(string, sizeof(string), " You have teleported to vehicle ID %d.", vehid);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:gotopos(playerid, params[])
{
    new Float:Pos[3], int;
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "fffi", Pos[0], Pos[1], Pos[2], int)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gotopos [x] [y] [z] [int]");
	SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	SetPlayerInterior(playerid, int);
	return 1;
}

CMD:gethere(playerid, params[])
{
	new playerb, string[128];
	new Float:Pos[3];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /goto [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerid][pAdmin] < PlayerInfo[playerb][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Player has a higher admin level than you.");
    if(Spec[playerb]) return SendClientMessage(playerid, COLOR_GREY, "Player is spectating someone.");
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	if(IsPlayerInAnyVehicle(playerb) && GetPlayerState(playerb) == PLAYER_STATE_DRIVER && !GetPlayerInterior(playerid))
	{
    	SetVehiclePos(GetPlayerVehicleID(playerb), Pos[0]+2, Pos[1]+2, Pos[2]);
	}
	else
	{
	    SetPlayerPos(playerb, Pos[0]+1, Pos[1], Pos[2]);
	}
	SetPlayerInterior(playerb, GetPlayerInterior(playerid));
	SetPlayerVirtualWorld(playerb, GetPlayerVirtualWorld(playerid));
	format(string, sizeof(string), " You have teleported %s to you.", RPN(playerb));
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), " You have been teleported to admin %s.", RPN(playerid));
	SendClientMessage(playerb, COLOR_WHITE, string);
	return 1;
}

CMD:sendtols(playerid, params[])
{
	new playerb, string[128];
	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
    if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sendtols [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(PlayerInfo[playerid][pAdmin] < PlayerInfo[playerb][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Player has a higher admin level than you.");
    if(Spec[playerb]) return SendClientMessage(playerid, COLOR_GREY, "Player is spectating someone.");
	if(IsPlayerInAnyVehicle(playerb) && GetPlayerState(playerb) == PLAYER_STATE_DRIVER)
	{
	    SetVehiclePos(GetPlayerVehicleID(playerb), 1515.2551,-1666.3148,14.0469);
	}
	else
	{
	    SetPlayerPos(playerb,1515.2551,-1666.3148,14.0469);
	}
	SetPlayerInterior(playerb, 0);
    SetPlayerVirtualWorld(playerb, 0);
	format(string, sizeof(string), " You have teleported %s to Los Santos.", RPN(playerb));
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), " You have been teleported to Los Santos by administrator %s.", RPN(playerid));
	SendClientMessage(playerb, COLOR_WHITE, string);
	return 1;
}

CMD:unban(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	new string[128];
	if(sscanf(params, "s[32]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /unban [name]");
	new file[64], IP[16];
	format(file, sizeof(file), "users/%s.ini", params);
	if(dini_Exists(file))
	{
	    if(dini_Int(file, "pBanned") == 0) return SendClientMessage(playerid, COLOR_GREY, "Player is not banned.");
		format(IP, sizeof(IP), "%s", dini_Get(file, "IP"));
	    // Userfile
	    dini_IntSet(file, "pBanned", 0);
	    dini_IntSet(file, "Warns", 0);
	    dini_Set(file, "Warn1", "");
	    dini_Set(file, "Warn2", "");
	    dini_Set(file, "Warn3", "");
	    dini_Set(file, "BanReason", "");
	    dini_Set(file, "BannedBy", "");
	    format(string, sizeof(string), "AdmWarn: %s has unbanned %s.", RPN(playerid), params);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		format(string, sizeof(string), "AdmWarn: %s (%s) has unbanned %s (%s).", RPN(playerid), RPIP(playerid), params, IP);
		Log("logs/unban.log", string);
		return cmd_unbanip(playerid, IP);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "Player name not found.");
	}

	return 1;
}

CMD:unbanip(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(!aDuty[playerid]) return SendClientMessage(playerid, COLOR_GREY, "You are not on admin duty.");
	new string[128];
	if(sscanf(params, "s[16]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /unbanip [ip]");
	if(IsValidIP(params)) return SendClientMessage(playerid, COLOR_GREY, "Invalid IP Address.");
	new File:ban = fopen("ban.cfg", io_read);
	new idx = 1, done;
	while(fread(ban, string))
	{
		if(!strcmp(params, string, true, strlen(params)))
		{
			fdeleteline("ban.cfg", idx);
			format(string, sizeof(string), "AdmWarn: %s has unbanned IP %s", RPN(playerid), params);
			SendAdminMessage(COLOR_DARKRED, 1, string);
			format(string, sizeof(string), "AdmWarn: %s (%s) has unbanned IP %s", RPN(playerid), RPIP(playerid), params);
			Log("logs/unban.log", string);
			done = 1;
	    }
		idx++;
	}
	fclose(ban);
	if(!done) SendClientMessage(playerid, COLOR_GREY, "IP is not banned.");
	return 1;
}

CMD:firehelper(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pHelper] < 5) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	{
	    new playerb, string[128], string2[128], log[256];
	    if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /firehelper [playerid]");
		if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
		if(!PlayerInfo[playerid][pHelper]) return SendClientMessage(playerid, COLOR_GREY, "Player is not a helper.");
		format(string, sizeof(string), "AdmWarn: %s has {33AA33}fired {AA3333}%s from the Community Helpers team.", RPN(playerid), RPN(playerb));
    	format(string2, sizeof(string2), "HelpWarn: %s has {33AA33}fired {AA3333}%s from the Community Helpers team.", RPN(playerid), RPN(playerb));
        format(log, sizeof(log), "AdmWarn: %s (%s) has fired %s (%s) from the Community Helpers team.", RPN(playerid), RPIP(playerid), RPN(playerb), RPIP(playerb));
		Log("logs/makehelper.log", log);
		PlayerInfo[playerb][pHelper] = 0;
		SendAdminMessage(COLOR_DARKRED, 1, string);
		SendHelperMessage(COLOR_DARKRED, 1, string2);
		if(!PlayerInfo[playerb][pHelper])
		{
		    SendClientMessage(playerb, COLOR_DARKRED, string2);
		}
	}
	return 1;
}

CMD:makehelper(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] >= 6 || PlayerInfo[playerid][pHelper] >= 5)
	{
	    new playerb, admin, string[128], string2[128];
	    if(sscanf(params, "ui", playerb, admin)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /makehelper [playerid] [level]");
		if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
		if(admin < 0 || admin > 5) return SendClientMessage(playerid, COLOR_GREY, "Helper levels are between 1 and 5.");
	    if(PlayerInfo[playerb][pHelper] != admin)
	    {
	        new log[256];
		    if(PlayerInfo[playerb][pHelper] < admin)
			{
		    	format(string, sizeof(string), "AdmWarn: %s has {33AA33}promoted {AA3333}%s to level {33AA33}%d {AA3333}helper.", RPN(playerid), RPN(playerb), admin);
    		    format(string2, sizeof(string2), "HelpWarn: %s has {33AA33}promoted {AA3333}%s to level {33AA33}%d {AA3333}helper.", RPN(playerid), RPN(playerb), admin);
            	format(log, sizeof(log), "AdmWarn: %s (%s) has promoted %s (%s) to level %d helper.", RPN(playerid), RPIP(playerid), RPN(playerb), RPIP(playerb), admin);
			}
			else if(PlayerInfo[playerb][pHelper] > admin)
			{
	  	    	format(string, sizeof(string), "AdmWarn: %s has {FF9900}demoted {AA3333}%s to level {FF9900}%d {AA3333}helper.", RPN(playerid), RPN(playerb), admin);
	  	    	format(string2, sizeof(string2), "HelpWarn: %s has {FF9900}demoted {AA3333}%s to level {FF9900}%d {AA3333}helper.", RPN(playerid), RPN(playerb), admin);
	  	    	format(log, sizeof(log), "AdmWarn: %s (%s) has demoted %s (%s) to level %d helper.", RPN(playerid), RPIP(playerid), RPN(playerb), RPIP(playerb), admin);
			}
			Log("logs/makehelper.log", log);
			PlayerInfo[playerb][pHelper] = admin;
			SendAdminMessage(COLOR_DARKRED, 1, string);
			SendHelperMessage(COLOR_DARKRED, 1, string2);
			if(!PlayerInfo[playerb][pHelper])
			{
			    SendClientMessage(playerb, COLOR_DARKRED, string2);
			}
		}
		else SendClientMessage(playerid, COLOR_GREY, "Player already has this helper level.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	return 1;
}

CMD:makegangmod(playerid, params[])
{
	new string[128], playerb, log[256];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(sscanf(params, "ui", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /makegangmod [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Player is not an administrator.");
	if(!PlayerInfo[playerb][pGangMod])
	{
	    PlayerInfo[playerb][pGangMod] = 1;
	    format(string, sizeof(string), "AdmWarn: %s has {33AA33}assigned {AA3333}%s as a {33AA33}Gang Moderator{AA3333}.", RPN(playerid), RPN(playerb));
	    format(log, sizeof(log), "AdmWarn: %s has assigned %s as a Gang Moderator.", RPN(playerid), RPN(playerb));
	}
	else
	{
	    PlayerInfo[playerb][pGangMod] = 0;
	    format(string, sizeof(string), "AdmWarn: %s has {FF9900}removed {AA3333}%s's {FF9900}Gang Moderator{AA3333} powers.", RPN(playerid), RPN(playerb));
	    format(log, sizeof(log), "AdmWarn: %s has removed %s's Gang Moderator powers.", RPN(playerid), RPN(playerb));
	}
	new file[32];
	format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
	format(file, sizeof(file), "users/%s.ini", dini_Get(file, "AdminName"));
	if(dini_Exists(file))
	{
		dini_IntSet(file, "GangMod", PlayerInfo[playerb][pGangMod]);
	}
	format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
	if(dini_Int(file, "AdminAccount") == 1)
	{
	    format(file, sizeof(file), "users/%s.ini", dini_Get(file, "OldName"));
	    dini_IntSet(file, "GangMod", PlayerInfo[playerb][pGangMod]);
	}
	Log("logs/makeadmin.log", log);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:makefacmod(playerid, params[])
{
	new string[128], playerb, log[256];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(sscanf(params, "ui", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /makefacmod [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Player is not an administrator.");
	if(!PlayerInfo[playerb][pFacMod])
	{
	    PlayerInfo[playerb][pFacMod] = 1;
	    format(string, sizeof(string), "AdmWarn: %s has {33AA33}assigned {AA3333}%s as a {33AA33}Faction Moderator{AA3333}.", RPN(playerid), RPN(playerb));
	    format(log, sizeof(log), "AdmWarn: %s has assigned %s as a Faction Moderator.", RPN(playerid), RPN(playerb));
	}
	else
	{
	    PlayerInfo[playerb][pFacMod] = 0;
	    format(string, sizeof(string), "AdmWarn: %s has {FF9900}removed {AA3333}%s's {FF9900}Faction Moderator{AA3333} powers.", RPN(playerid), RPN(playerb));
	    format(log, sizeof(log), "AdmWarn: %s has removed %s's Faction Moderator powers.", RPN(playerid), RPN(playerb));
	}
	new file[32];
	format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
	format(file, sizeof(file), "users/%s.ini", dini_Get(file, "AdminName"));
	if(dini_Exists(file))
	{
		dini_IntSet(file, "FacMod", PlayerInfo[playerb][pFacMod]);
	}
	format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
	if(dini_Int(file, "AdminAccount") == 1)
	{
	    format(file, sizeof(file), "users/%s.ini", dini_Get(file, "OldName"));
	    dini_IntSet(file, "FacMod", PlayerInfo[playerb][pFacMod]);
	}
	Log("logs/makeadmin.log", log);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:makebanappealer(playerid, params[])
{
	new string[128], playerb, log[256];
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(sscanf(params, "ui", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /makebanappealer [playerid]");
	if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(!PlayerInfo[playerb][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Player is not an administrator.");
	if(!PlayerInfo[playerb][pBanAppealer])
	{
	    PlayerInfo[playerb][pBanAppealer] = 1;
	    format(string, sizeof(string), "AdmWarn: %s has {33AA33}assigned {AA3333}%s as a {33AA33}Ban Appealer{AA3333}.", RPN(playerid), RPN(playerb));
	    format(log, sizeof(log), "AdmWarn: %s has assigned %s as a Ban Appealer.", RPN(playerid), RPN(playerb));
	}
	else
	{
	    PlayerInfo[playerb][pBanAppealer] = 0;
	    format(string, sizeof(string), "AdmWarn: %s has {FF9900}removed {AA3333}%s's {FF9900}Ban Appealer{AA3333} powers.", RPN(playerid), RPN(playerb));
	    format(log, sizeof(log), "AdmWarn: %s has removed %s's Ban Appealer powers.", RPN(playerid), RPN(playerb));
	}
	new file[32];
	format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
	format(file, sizeof(file), "users/%s.ini", dini_Get(file, "AdminName"));
	if(dini_Exists(file))
	{
		dini_IntSet(file, "BanAppealer", PlayerInfo[playerb][pBanAppealer]);
	}
	format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
	if(dini_Int(file, "AdminAccount") == 1)
	{
	    format(file, sizeof(file), "users/%s.ini", dini_Get(file, "OldName"));
	    dini_IntSet(file, "BanAppealer", PlayerInfo[playerb][pBanAppealer]);
	}
	Log("logs/makeadmin.log", log);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:makeadmin(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] >= 6 || PlayerInfo[playerid][pOwner] == 1)
	{
	    new playerb, admin, string[128];
	    if(sscanf(params, "ui", playerb, admin)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /makeadmin [playerid] [level]");
		if(!IsPlayerLoggedIn(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	    if(PlayerInfo[playerb][pAdmin] != admin)
	    {
	        new log[256];
		    if(PlayerInfo[playerb][pAdmin] < admin)
			{
		    	format(string, sizeof(string), "AdmWarn: %s has {33AA33}promoted {AA3333}%s to level {33AA33}%d {AA3333}admin.", RPN(playerid), RPN(playerb), admin);
            	format(log, sizeof(log), "AdmWarn: %s (%s) has promoted %s (%s) to level %d admin.", RPN(playerid), RPIP(playerid), RPN(playerb), RPIP(playerb), admin);
			}
			else if(PlayerInfo[playerb][pAdmin] > admin)
			{
	  	    	format(string, sizeof(string), "AdmWarn: %s has {FF9900}demoted {AA3333}%s to level {FF9900}%d {AA3333}admin.", RPN(playerid), RPN(playerb), admin);
	  	    	format(log, sizeof(log), "AdmWarn: %s (%s) has demoted %s (%s) to level %d admin.", RPN(playerid), RPIP(playerid), RPN(playerb), RPIP(playerb), admin);
			}
			Log("logs/makeadmin.log", log);
			PlayerInfo[playerb][pAdmin] = admin;
			PlayerInfo[playerb][pSafeAdmin] = 1;
			SendAdminMessage(COLOR_DARKRED, 1, string);
			if(!PlayerInfo[playerb][pAdmin])
			{
			    PlayerInfo[playerb][pSafeAdmin] = 0;
			    PlayerInfo[playerid][pGangMod] = 0;
			    PlayerInfo[playerid][pFacMod] = 0;
			    PlayerInfo[playerid][pBanAppealer] = 0;
			    SendClientMessage(playerb, COLOR_DARKRED, string);
			}
			new file[32];
			format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
			format(file, sizeof(file), "users/%s.ini", dini_Get(file, "AdminName"));
			if(dini_Exists(file))
			{
				dini_IntSet(file, "Admin", PlayerInfo[playerb][pAdmin]);
			}
			format(file, sizeof(file), "users/%s.ini", RPNU(playerb));
			if(dini_Int(file, "AdminAccount") == 1)
			{
			    format(file, sizeof(file), "users/%s.ini", dini_Get(file, "OldName"));
			    dini_IntSet(file, "Admin", PlayerInfo[playerb][pAdmin]);
			}
		}
		else SendClientMessage(playerid, COLOR_GREY, "Player already has this admin level.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	return 1;
}

CMD:saveserver(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i))
		{
		    SaveChar(i);
		}
	}
	SaveFactions();
	SaveFamilies();
	SavePoints();
	SaveBiz();
	SaveHouses();
	SaveDoors();
	SaveGates();
	SaveMapIcons();
	SaveArrestPoint();
	SaveDrugs();
	SaveMOTDS();
    new string[128];
	format(string, sizeof(string), "AdmWarn: %s has saved all server files.", RPN(playerid));
	SendAdminMessage(COLOR_DARKRED, 1, string);
	return 1;
}

CMD:gmx(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	new string[128];
	format(string, sizeof(string), "AdmCmd: %s has issued a server restart, it will occur in 30 seconds.", RPN(playerid));
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	SetTimer("gmxtimer", 30000, false);
	return 1;
}

CMD:ggmx(playerid, params[])
{
   	if(!IsPlayerLoggedIn(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	new string[128];
	format(string, sizeof(string), "AdmCmd: %s has issued an instant server restart.", RPN(playerid));
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	foreach(Player, i)
    {
       	SaveChar(i);
       	ClearChar(i);
       	GMX[i] = 1;
    }
	SendRconCommand("gmx");
	return 1;
}

forward gmxtimer();
public gmxtimer()
{
    foreach(Player, i)
    {
       	SaveChar(i);
       	ClearChar(i);
       	GMX[i] = 1;
    }
	SendRconCommand("gmx");
}

// End of OnPlayerCommandText

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(!ispassenger)
	{
		if(IsDMVCar(vehicleid))
		{
		    if(!LicenseTest[playerid])
		    {
			    new Float:pos[3];
			    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		        SendClientMessage(playerid, COLOR_ORANGE, "You are not taking a drivers license test.");
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* GPS: Finish the test by driving through all of the checkpoints on your GPS.");
		        SetPlayerCheckpoint(playerid,2040.7101,-1930.1340,13.4667,5);
		        SendClientMessage(playerid, COLOR_RED, "If you exit the car your test will be failed and it will have to be re-done.");
		    }
		}
		else if(IsFamVehicle(vehicleid) && Fam[vehicleid] != PlayerInfo[playerid][pFam] && !IsACop(playerid))
		{
		    new Float:pos[3];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SendClientMessage(playerid, COLOR_ORANGE, " This vehicle is restricted to a family.");
		}
	    else if(IsLeoVehicle(vehicleid) && PlayerInfo[playerid][pFac] != 1)
	    {
		    new Float:pos[3];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SendClientMessage(playerid, COLOR_ORANGE, " This vehicle is restricted to the SAPD faction.");
	    }
	    else if(IsGovVehicle(vehicleid) && PlayerInfo[playerid][pFac] != 2)
	    {
		    new Float:pos[3];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SendClientMessage(playerid, COLOR_ORANGE, " This vehicle is restricted to the GOV faction.");
	    }
	    else if(IsNewsVehicle(vehicleid) && PlayerInfo[playerid][pFac] != 4)
	    {
		    new Float:pos[3];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SendClientMessage(playerid, COLOR_ORANGE, " This vehicle is restricted to the News Agency faction.");
	    }
	    else if(IsTruckerVehicle(vehicleid) && PlayerInfo[playerid][pJob] != JOB_TRUCKER)
	    {
	    	new Float:pos[3];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SendClientMessage(playerid, COLOR_ORANGE, " This vehicle is restricted to Truckers.");
	    }

	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(LicenseTest[playerid])
	{
		DisablePlayerCheckpoint(playerid);
		LicenseTest[playerid] = 0;
		CP[playerid] = 0;
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have left your car, therefore your test has been failed.");
	}
	if(PlayerInfo[playerid][pFac] == 1)
	{
	    LastCar[playerid] = vehicleid;
	}

	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(newstate == PLAYER_STATE_PASSENGER)
	{
	    SetPlayerArmedWeapon(playerid,0);
	}
	if(newstate == PLAYER_STATE_PASSENGER)
	{
	    if(newstate == PLAYER_STATE_PASSENGER)
	    {
	        new gun,tmp;
	        GetPlayerWeaponData(playerid,4,gun,tmp);
	        #pragma unused tmp
	        if(gun)SetPlayerArmedWeapon(playerid,gun);
	        else SetPlayerArmedWeapon(playerid,0);
	    }
	    if(GetPlayerVehicleID(playerid) == NPCBus)
	    {
	        new string[128], BusDriver = RPIDFN("BusDriver");
	        if(PlayerInfo[playerid][pMoney] < 2)
	        {
	            RemovePlayerFromVehicle(playerid);
	            format(string, sizeof(string), "Bus Driver shouts: Get out of the bus poor hobo!");
				SendNearbyMessage(BusDriver, 30, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	            return 1;
	        }
	        format(string, sizeof(string), "Bus Driver says: The ticket costs $5, you will have to pay $2 everytime the bus stops.");
			SendNearbyMessage(BusDriver, 10, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			format(string, sizeof(string), "* %s takes out $5, hands them to the bus driver and grabs a ticket.", RPN(playerid));
 			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        GiveZaiatMoney(playerid, -5);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You will not recieve any playing minutes until you get out of the bus.");
	        SetTimerEx("BusTimer", 1000, false, "i", playerid);
	    }
	}
	if(newstate == PLAYER_STATE_DRIVER && oldstate != PLAYER_STATE_DRIVER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		if(!engine) SendClientMessage(playerid, COLOR_WHITE, "You can start or stop the vehicle's engine using {FF6347}/engine{FFFFFF}.");
		if(!PlayerInfo[playerid][pCarLic]) SendClientMessage(playerid, COLOR_LIGHTRED, " You don't have a drivers license, beware of cops.");
		if(IsATowTruck(vehicleid)) SendClientMessage(playerid, COLOR_WHITE, "You can tow a vehicle using {FF6347}/tow{FFFFFF}.");
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	if(DeliverMoney[playerid] == 1 && IsPlayerInRangeOfPoint(playerid, 10, -2227.4868,2327.0056,7.5469))
	{
	    new Rob = BankRobber[playerid]-1, string[128];
	    DisablePlayerCheckpoint(playerid);
		BankRobbersCount --;
		format(BankRobbers[Rob], MAX_PLAYER_NAME, "");
		DeliverMoney[playerid] = 0;
		//
		foreach(Player, i)
		{
		    if(BankRobber[i] || PlayerInfo[i][pFac] == 1)
		    {
				if(Rob == 0) TextDrawHideForPlayer(i, Textdraw1);
				else if(Rob == 1) TextDrawHideForPlayer(i, Textdraw2);
				else if(Rob == 2) TextDrawHideForPlayer(i, Textdraw3);
				else if(Rob == 3) TextDrawHideForPlayer(i, Textdraw4);
				else if(Rob == 4) TextDrawHideForPlayer(i, Textdraw5);
			}
		}
		GiveZaiatMoney(playerid, 10000);
		format(string, sizeof(string), "** %s has delivered their stolen money and claimed $10,000. **", RPN(playerid));
		SendRobberyMessage(COLOR_LIME, string);
		SendCopMessage(COLOR_LIME, string);
		BankRobber[playerid] = 0;
		TotalStolen ++;
		//
		if(BankRobbersCount == 0)
		{
			TextDrawHideForAll(Textdraw0);
			TextDrawHideForAll(Textdraw1);
			TextDrawHideForAll(Textdraw2);
			TextDrawHideForAll(Textdraw3);
			TextDrawHideForAll(Textdraw4);
			TextDrawHideForAll(Textdraw5);
			BankRobbery = 0;
			RobberyStarted = 0;
			format(string, sizeof(string), "** The bank robbery has ended, $%d were stolen and $%d were saved. **", TotalStolen*10000, (TotalRobbers*10000-(TotalStolen*10000)));
			SendClientMessageToAll(COLOR_YELLOW, string);
			TotalRobbers = 0;
			new copsonline;
			foreach(Player, i)
			{
			    if(IsACop(i)) copsonline++;
			}
			foreach(Player, i)
			{
			    if(IsACop(i))
			    {
					new Saved = (TotalRobbers*10000-(TotalStolen*10000));
					GiveZaiatMoney(i, Saved/copsonline);
					format(string, sizeof(string), "** You have received your cut from the saved money. ($%d)", Saved/copsonline);
					SendClientMessage(i, COLOR_LIME, string);
			    }
			}
		}
	}
    if(CP[playerid] == 1) // Drivers License Test
	{
		if(IsPlayerInRangeOfPoint(playerid,5,2040.7101,-1930.1340,13.4667)) // Checkpoint 1
		{
		    SetPlayerCheckpoint(playerid,1948.1033,-1930.6860,13.4751,5);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,1948.1033,-1930.6860,13.4751)) // Checkpoint 2
		{
		    SetPlayerCheckpoint(playerid,1830.9167,-1930.0353,13.4754,5);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,1830.9167,-1930.0353,13.4754)) // Checkpoint 3
		{
			SetPlayerCheckpoint(playerid,1823.9110,-1791.2739,13.4752,5);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,1823.9110,-1791.2739,13.4752)) // Checkpoint 4
		{
			SetPlayerCheckpoint(playerid,1824.1433,-1629.3223,13.4751,5);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,1824.1433,-1629.3223,13.4751)) // Checkpoint 5
		{
			SetPlayerCheckpoint(playerid,1929.6962,-1614.7090,13.4751,5);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,1929.6962,-1614.7090,13.4751)) // Checkpoint 6
		{
			SetPlayerCheckpoint(playerid,1938.9127,-1738.9067,13.4751,5);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,1938.9127,-1738.9067,13.4751)) // Checkpoint 7
		{
			SetPlayerCheckpoint(playerid,1959.0842,-1765.3502,13.4750,5);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,1959.0842,-1765.3502,13.4750)) // Checkpoint 8
		{
			SetPlayerCheckpoint(playerid,1975.3130,-1814.8724,13.4751,5);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,1975.3130,-1814.8724,13.4751)) // Checkpoint 9
		{
			SetPlayerCheckpoint(playerid,2066.9341,-1814.9067,13.4751,5);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,2066.9341,-1814.9067,13.4751 )) // Checkpoint 10
		{
			SetPlayerCheckpoint(playerid,2078.9148,-1897.3009,13.4473,5);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,2078.9148,-1897.3009,13.4473)) // Checkpoint 11
		{
			SetPlayerCheckpoint(playerid,2074.2095,-1907.4380,13.6393,5);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,2074.2095,-1907.4380,13.6393)) // Checkpoint 12
		{
		    new Float:Health;
		    GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		    if(Health > 900)
			{
				DisablePlayerCheckpoint(playerid);
				PlayerInfo[playerid][pCarLic] = 1;
				LicenseTest[playerid] = 0;
				CP[playerid] = 0;
				SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have successfully passed the test and received your license.");
			}
			else
			{
				DisablePlayerCheckpoint(playerid);
				LicenseTest[playerid] = 0;
				CP[playerid] = 0;
				SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
			}
		}
	}
	else DisablePlayerCheckpoint(playerid);
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	if(pickupid == Parachute)
	{
	    new Parachute1, Parachute2;
		GetPlayerWeaponData(playerid, 11, Parachute1, Parachute2);
		if(Parachute1 != 46)
		{
		    GiveZaiatWeapon(playerid, 46, 1);
		}
	}
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(vehicleid == PlayerInfo[playerid][pVeh])
	{
		for(new i=0; i<14; i++)
		{
		    PlayerInfo[playerid][pVehMod][i] = GetVehicleComponentInSlot(PlayerInfo[playerid][pVeh], i);
		}
	}
	else if(vehicleid == PlayerInfo[playerid][pVVeh])
	{
		for(new i=0; i<14; i++)
		{
		    PlayerInfo[playerid][pVVehMod][i] = GetVehicleComponentInSlot(PlayerInfo[playerid][pVVeh], i);
		}
	}
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(vehicleid == PlayerInfo[playerid][pVeh])
	{
		PlayerInfo[playerid][vPJ] = paintjobid;
	}
	else if(vehicleid == PlayerInfo[playerid][pVVeh])
	{
		PlayerInfo[playerid][vVPJ] = paintjobid;
	}
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if(vehicleid == PlayerInfo[playerid][pVeh])
	{
		PlayerInfo[playerid][vC1] = color1;
		PlayerInfo[playerid][vC2] = color2;
	}
	else if(vehicleid == PlayerInfo[playerid][pVVeh])
	{
		PlayerInfo[playerid][vVC1] = color1;
		PlayerInfo[playerid][vVC2] = color2;
	}
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	foreach(Player, i)
	{
		if(Specid[i] == playerid)
		{
		    SetPlayerInterior(i, newinteriorid);
		}
	}
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    if(gPlayerUsingLoopingAnim[playerid])
	{
		if(IsKeyJustDown(KEY_SPRINT,newkeys,oldkeys))
		{
			StopLoopingAnim(playerid);
			TextDrawHideForPlayer(playerid,txtAnimHelper);
			animation[playerid] = 0;
			ClearAnimations(playerid);
			return 1;
		}
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_SPRUNK || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_WINE || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_BEER)
	{
	    if(newkeys == KEY_FIRE)
	    {
			if(!NoSprunk[playerid])
			{
			    new Float:H;
			    GetPlayerHealth(playerid, H);
			    SetPlayerHealth(playerid, H+5);
				GetPlayerHealth(playerid, H);
				if(H > 100) SetPlayerHealth(playerid, 100);
				NoSprunk[playerid] = 1;
				SetTimerEx("SprunkTimer", 1800, false, "d", playerid);
			}

		}
	}
	if((newkeys & KEY_FIRE) && (oldkeys & KEY_CROUCH) && !((oldkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) || (oldkeys & KEY_FIRE) && (newkeys & KEY_CROUCH) && !((newkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) ) {
        switch(GetPlayerWeapon(playerid)) {
		    case 23..25, 27, 29..34, 41: {
		        if(Ammo[playerid][GetPlayerWeapon(playerid)] > GetPlayerAmmo(playerid)) {
					OnPlayerCBug(playerid);
				}
				return 1;
			}
		}
	}

	if(CheckCrouch[playerid] == 1) {
		switch(WeaponID[playerid]) {
		    case 23..25, 27, 29..34, 41: {
		    	if((newkeys & KEY_CROUCH) && !((newkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK ) {
		    		if(Ammo[playerid][GetPlayerWeapon(playerid)] > GetPlayerAmmo(playerid)) {
						OnPlayerCBug(playerid);
					}
		    	}
		    }
		}
	}

	//if(newkeys & KEY_CROUCH || (oldkeys & KEY_CROUCH)) return 1;

	else if(((newkeys & KEY_FIRE) && (newkeys & KEY_HANDBRAKE) && !((newkeys & KEY_SPRINT) || (newkeys & KEY_JUMP))) ||
	(newkeys & KEY_FIRE) && !((newkeys & KEY_SPRINT) || (newkeys & KEY_JUMP)) ||
	(NotMoving[playerid] && (newkeys & KEY_FIRE) && (newkeys & KEY_HANDBRAKE)) ||
	(NotMoving[playerid] && (newkeys & KEY_FIRE)) ||
	(newkeys & KEY_FIRE) && (oldkeys & KEY_CROUCH) && !((oldkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) ||
	(oldkeys & KEY_FIRE) && (newkeys & KEY_CROUCH) && !((newkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) ) {
		SetTimerEx("CrouchCheck", 3000, 0, "d", playerid);
		CheckCrouch[playerid] = 1;
		WeaponID[playerid] = GetPlayerWeapon(playerid);
		Ammo[playerid][GetPlayerWeapon(playerid)] = GetPlayerAmmo(playerid);
		return 1;
	}
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

public OnPlayerUpdate(playerid)
{
	if(IsPlayerConnected(playerid) && IsPlayerLoggedIn(playerid))
	{
	    // Boxing
	    if(Boxing[playerid] && !BoxTime)
	    {
	        new string[128];
	        new Float:bH; GetPlayerHealth(playerid, bH);
	        if(bH <= 20)
	        {
	            // Getting other boxer's ID
				new playerb = -1;
	            foreach(Player, i)
	            {
	                if(Boxing[i] && i != playerid) playerb = i;
	            }
	            if(playerb != -1)
	            {
	                format(string, sizeof(string), "Boxing Ring: The boxing match has ended, %s has won the match.", RPN(playerb));
	        		SendGymMessage(COLOR_WHITE, string);
		            // Putting them out of the ring
		            SetPlayerPos(playerb, 760.9759,4.7187,1000.7084);
		            SetPlayerFacingAngle(playerb, 268.9407);
		            SetPlayerPos(playerid, 760.9759,6.1794,1000.7093);
		            SetPlayerFacingAngle(playerid, 268.9407);
		            // Giving the winner extra skill point
		            new oldj = strval(RPJL(playerb, JOB_BOXER));
		            PlayerInfo[playerb][pJobSkill][JOB_BOXER] ++;
					new newj = strval(RPJL(playerb, JOB_BOXER));
				    if(oldj < newj)
					{
					    format(string, sizeof(string), "** Your Boxer level is now %d, you can now cause %d more damage. **", newj, (newj*2)-2);
						SendClientMessage(playerb, COLOR_YELLOW, string);
					}
					//
					SendClientMessage(playerb, COLOR_LIME, " You have won the boxing match.");
					SendClientMessage(playerid, COLOR_LIGHTRED, " You have lost the boxing match.");
					// Giving Bids
					new winner = pBoxer[playerb];
					foreach(Player, i)
					{
					    if(BidBoxer[i] == winner)
					    {
					        new percent, profit;
					        percent = (BidAmount[i]/BoxerBid[winner]) * 100;
					        profit = (percent * BoxerBid[pBoxer[playerid]]) / 100;
					        GiveZaiatMoney(i, BidAmount[i] + profit);
					        format(string, sizeof(string), " You have won $%d from bidding in the match, the money you bid has been returned as well.", profit);
					        SendClientMessage(i, COLOR_LIME, string);
					    }
						BidAmount[i] = 0;
						BidBoxer[i] = 0;
					}
					for(new w = 0; w < 13; w++)
					{
					    GiveZaiatWeapon(playerb, PlayerInfo[playerb][pWeapon][w], PlayerInfo[playerb][pWeaponAmmo][w]);
					}
	            }
	            for(new w = 0; w < 13; w++)
				{
				    GiveZaiatWeapon(playerid, PlayerInfo[playerid][pWeapon][w], PlayerInfo[playerid][pWeaponAmmo][w]);
				}
	            // Resetting Values
				BoxingMatch = 0;
				Boxer[1] = -1;
				pBoxer[playerb] = 0;
				Boxer[2] = -1;
				pBoxer[playerid] = 0;
				Boxing[playerb] = 0;
				Boxing[playerid] = 0;
				BoxerBid[1] = 0;
				BoxerBid[2] = 0;
	        }
	    }
	    // Spikes
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        if(!IsACop(playerid))
	  	    {
		        for(new i = 0; i < sizeof(SpikeInfo); i++)
		  	    {
		  	        if(IsPlayerInRangeOfPoint(playerid, 3.0, SpikeInfo[i][sX], SpikeInfo[i][sY], SpikeInfo[i][sZ]))
		            {
		  	            if(SpikeInfo[i][sCreated] == 1)
		  	            {
		  	                new panels, doors, lights, tires;
		  	                new carid = GetPlayerVehicleID(playerid);
				            GetVehicleDamageStatus(carid, panels, doors, lights, tires);
				            tires = encode_tires(1, 1, 1, 1);
				            UpdateVehicleDamageStatus(carid, panels, doors, lights, tires);
		  	            }
		  	        }
		  	    }
			}
	  	}
	    // Fuel
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && Fuel[vehicleid] <= 0)
	    {
	    	new engine, lights, alarm, doors, bonnet, boot, objective, string[128];
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine)
			{
				SetVehicleParamsEx(vehicleid, 0, 0, 0, 0, 0, 0, 0);
			    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
			    {SetVehicleParamsEx(vehicleid, 0, 0, 0, PlayerInfo[playerid][vLocked], 0, 0, 0);}
			    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
			    {SetVehicleParamsEx(vehicleid, 0, 0, 0, PlayerInfo[playerid][vVLocked], 0, 0, 0);}
			    format(string, sizeof(string), "* %s's vehicle stops as it has no fuel in its tank.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
	    }
	    // Drag
	    if(Dragged[playerid] != -1)
	    {
			new playerb = Dragged[playerid];
			new Float:pos[3];
			GetPlayerPos(playerb, pos[0], pos[1], pos[2]);
			SetPlayerPos(playerid, pos[0]+0.5, pos[1]+0.5, pos[2]);
			SetPlayerInterior(playerid, GetPlayerInterior(playerb));
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(playerb));
	    }
	    // AntiCS
	    new Keys, ud, lr;
		GetPlayerKeys(playerid, Keys, ud, lr);
		if(CheckCrouch[playerid] == 1) {
			switch(WeaponID[playerid]) {
			    case 23..25, 27, 29..34, 41: {
			    	if((Keys & KEY_CROUCH) && !((Keys & KEY_FIRE) || (Keys & KEY_HANDBRAKE)) && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK ) {
			    		if(Ammo[playerid][GetPlayerWeapon(playerid)] > GetPlayerAmmo(playerid)) {
							OnPlayerCBug(playerid);
						}
			    	}
			    	//else SendClientMessage(playerid, COLOR_RED, "Failed in onplayer update");
			    }
			}
		}

		if(!ud && !lr) { NotMoving[playerid] = 1; /*OnPlayerKeyStateChange(playerid, Keys, 0);*/ }
		else { NotMoving[playerid] = 0; /*OnPlayerKeyStateChange(playerid, Keys, 0);*/ }
	    // Alt-Tab detection
		AltTabbed[playerid] = 0;
		// Speedlimit
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && Speedlimit[playerid])
		{
		    new a, b, c;
			GetPlayerKeys(playerid, a, b ,c);
		    if(a == 8 && GetVehicleSpeed(GetPlayerVehicleID(playerid), 0) > Speedlimit[playerid])
		    {
		        new newspeed = GetVehicleSpeed(GetPlayerVehicleID(playerid), 0) - Speedlimit[playerid];
		    	ModifyVehicleSpeed(GetPlayerVehicleID(playerid), -newspeed);
		    }
		}
	    // Ping Update
	    if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	    {
	        new string[64];
            format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~%s's Ping: ~w~%d", RPN(Specid[playerid]), GetPlayerPing(Specid[playerid]));
			GameTextForPlayer(playerid, string,1000, 3);
	    }
	    // Money Anticheat
		if(GetPlayerMoney(playerid) != PlayerInfo[playerid][pMoney])
		{
			ResetPlayerMoney(playerid);
			GivePlayerMoney(playerid, PlayerInfo[playerid][pMoney]);
		}
		// Speedometer
		if(Speedo[playerid] && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    new string[64], speed = GetVehicleSpeed(GetPlayerVehicleID(playerid), 0);
		    format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Speedometer: ~w~%d MPH", speed);
			GameTextForPlayer(playerid, string,1000, 3);
		}
		// SpeedCheck
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && !aDuty[playerid])
		{
			new speed = GetVehicleSpeed(GetPlayerVehicleID(playerid), 0);
			if(speed > 205 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 519 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 553 || speed > 240)
			{
			    new string[128];
				format(string, sizeof(string), "AdmWarn: %s might be using speed hacks (%d MPH)", RPN(playerid), speed);
				SendAdminMessage(COLOR_DARKRED, 1, string);
			}
		}
		// Fuel
		if(fMeter[playerid] && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    new string[64];
		    format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Fuel: ~w~%d%", Fuel[GetPlayerVehicleID(playerid)]);
			GameTextForPlayer(playerid, string,1000, 3);
		}
	}
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	SetPlayerAttachedObject(playerid, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ);
	PlayerInfo[playerid][pToyX][index] = fOffsetX;
	PlayerInfo[playerid][pToyY][index] = fOffsetY;
	PlayerInfo[playerid][pToyZ][index] = fOffsetZ;
	PlayerInfo[playerid][pToyRX][index] = fRotX;
	PlayerInfo[playerid][pToyRY][index] = fRotY;
	PlayerInfo[playerid][pToyRZ][index] = fRotZ;
    PlayerInfo[playerid][pToySX][index] = fScaleX;
    PlayerInfo[playerid][pToySY][index] = fScaleY;
    PlayerInfo[playerid][pToySZ][index] = fScaleZ;
    return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	/*if(PlayerInfo[playerid][pAdmin] && aDuty[playerid])
	{
	    new string[32];
	    format(string, sizeof(string), "%s", RPALN(playerid));
		//Delete3DTextLabel(aDutyText[playerid]);
	    //if(PlayerInfo[playerid][pAdmin] == 1) aDutyText[playerid] = Create3DTextLabel(string, COLOR_LIGHTGREEN, 0, 0, -20, 25, -1, 1);
	    //if(PlayerInfo[playerid][pAdmin] == 2) aDutyText[playerid] = Create3DTextLabel(string, COLOR_LIME, 0, 0, -20, 25, -1, 1);
	    //if(PlayerInfo[playerid][pAdmin] == 3) aDutyText[playerid] = Create3DTextLabel(string, COLOR_YELLOW, 0, 0, -20, 25, -1, 1);
	    //if(PlayerInfo[playerid][pAdmin] == 4) aDutyText[playerid] = Create3DTextLabel(string, COLOR_ORANGE, 0, 0, -20, 25, -1, 1);
	    //if(PlayerInfo[playerid][pAdmin] == 5) aDutyText[playerid] = Create3DTextLabel(string, COLOR_RED, 0, 0, -20, 25, -1, 1);
	    //if(PlayerInfo[playerid][pAdmin] == 6) aDutyText[playerid] = Create3DTextLabel(string, COLOR_DARKRED, 0, 0, -20, 25, -1, 1);
		//Attach3DTextLabelToPlayer(aDutyText[playerid], playerid, 0, 0, 0.25);
		if(IsValidDynamic3DTextLabel(aDutyText[playerid]))  DestroyDynamic3DTextLabel(aDutyText[playerid]);
		if(PlayerInfo[playerid][pAdmin] == 1) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_LIGHTGREEN, 0, 0, -20, 25, playerid);
	    if(PlayerInfo[playerid][pAdmin] == 2) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_LIME, 0, 0, -20, 25, playerid);
	    if(PlayerInfo[playerid][pAdmin] == 3) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, 0, 0, -20, 25, playerid);
	    if(PlayerInfo[playerid][pAdmin] == 4) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_ORANGE, 0, 0, -20, 25, playerid);
	    if(PlayerInfo[playerid][pAdmin] == 5) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_RED, 0, 0, -20, 25, playerid);
	    if(PlayerInfo[playerid][pAdmin] == 6) aDutyText[playerid] = CreateDynamic3DTextLabel(string, COLOR_DARKRED, 0, 0, -20, 25, playerid);
        Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, aDutyText[playerid] , E_STREAMER_ATTACH_OFFSET_Z, 0.25);
	}
	if(IsAFK[playerid])
	{
		//Delete3DTextLabel(AFKText[playerid]);
        //AFKText[playerid] = Create3DTextLabel("AFK", COLOR_CYAN, 0, 0, -20, 25, -1, 1);
    	//Attach3DTextLabelToPlayer(AFKText[playerid], playerid, 0, 0, 0.35);
    	if(IsValidDynamic3DTextLabel(AFKText[playerid])) DestroyDynamic3DTextLabel(AFKText[playerid]);
    	AFKText[playerid] = CreateDynamic3DTextLabel("AFK", COLOR_CYAN, 0, 0, -20, 25, playerid);
    	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, AFKText[playerid] , E_STREAMER_ATTACH_OFFSET_Z, 0.25);
	}
	if(Tabbed[playerid])
	{
		//Delete3DTextLabel(AltTabText[playerid]);
		//AltTabText[playerid] = Create3DTextLabel("Alt Tabbed", COLOR_RED, 0, 0, -20, 25, -1, 1);
    	//Attach3DTextLabelToPlayer(AltTabText[playerid], playerid, 0, 0, 0.3);
    	if(IsValidDynamic3DTextLabel(AltTabText[playerid])) DestroyDynamic3DTextLabel(AltTabText[playerid]);
    	AltTabText[playerid] = Create3DTextLabel("Alt Tabbed", COLOR_RED, 0, 0, -20, 25, playerid);
    	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, AltTabText[playerid] , E_STREAMER_ATTACH_OFFSET_Z, 0.25);
	}*/
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    new vehid = GetPlayerVehicleID(playerid);
	new vehmd = GetVehicleModel(GetPlayerVehicleID(playerid));
	if(dialogid == 0) // Tutorial
	{
	    if(response)
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You have chosen to see the tutorial, please wait for it to load.");
	        SetTimerEx("Tut1", 2000, false, "i", playerid);
	    }
	    else
	    {
	    	PlayerInfo[playerid][pTutorial] = 1;
			SpawnChar(playerid);
			TogglePlayerControllable(playerid, 1);
			SetPlayerVirtualWorld(playerid, 0);
			SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You have chosen not to see the tutorial, welcome to zGaming.");
			// Starter Package
			PlayerInfo[playerid][pNew] = 1;
			PlayerInfo[playerid][pLoyal] = 1;
			PlayerInfo[playerid][pModel] = 299;
			SetPlayerSkin(playerid, 299);
			PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_NORMAL;
	    }
	}
    else if(dialogid == 1) // Register
	{
	    if(response)
	    {
	        if(strlen(inputtext) > 256)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Password can't be longer than 256 characters.");
	            ShowDialog(playerid, 1);
	            return 1;
	        }
			new file[64], IP[16], string[128], password[256];
			format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
			if(!dini_Exists(file))
			{
				GetPlayerIp(playerid, IP, sizeof(IP));
				dini_Create(file);
				WP_Hash(password, sizeof(password), inputtext);
				dini_Set(file, "Password", password);
				dini_Set(file, "IP", IP);
				PlayerInfo[playerid][pLevel] = 1;
				dini_IntSet(file, "Level", PlayerInfo[playerid][pLevel]);
				format(string, sizeof(string), "SERVER: {FFFFFF}You have successfully registered on {FF6347}zGaming Roleplay{FFFFFF}. (Password: %s)", inputtext);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				ShowDialog(playerid, 2);
			}
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You have chosen to quit the server.");
	        Kick(playerid);
	    }
	}
	else if(dialogid == 2) // Login
	{
	    if(response)
	    {
   			new file[64], password[256], IP[16], password2[256];
			format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
			WP_Hash(password2, sizeof(password2), inputtext);
			format(password, sizeof(password), "%s", dini_Get(file, "Password"));
			if(strcmp(password, inputtext,true) && strcmp(password, password2, true))
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}Invalid password.");
			    ShowDialog(playerid, 2);
			    return 1;
			}
			if(dini_Int(file, "AdminAccount") == 1)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You can't login directly from an admin account.");
			    Kick(playerid);
			    return 1;
			}
			else if(sscanf(inputtext, "s[128]", inputtext))
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You must enter a password to procceed.");
			    ShowDialog(playerid, 2);
			    return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_LIME, "");
			    SendClientMessage(playerid, COLOR_LIME, "");
			    SendClientMessage(playerid, COLOR_LIME, "");
			    SendClientMessage(playerid, COLOR_LIME, "");
			    SendClientMessage(playerid, COLOR_LIME, "");
			    SendClientMessage(playerid, COLOR_LIME, "");
			    SendClientMessage(playerid, COLOR_LIME, "");
			    SendClientMessage(playerid, COLOR_LIME, "");
			    SendClientMessage(playerid, COLOR_LIME, "");
			    SendClientMessage(playerid, COLOR_LIME, "");
			    format(PlayerInfo[playerid][pIP], 16, "%s", dini_Get(file, "IP"));
				GetPlayerIp(playerid, IP, sizeof(IP));
				dini_Set(file, "IP", IP);
				PlayerInfo[playerid][pGender] = dini_Int(file, "Gender");
				PlayerInfo[playerid][pAge] = dini_Int(file, "Age");
				if(!PlayerInfo[playerid][pGender] || !PlayerInfo[playerid][pAge])
				{
				    ShowDialog(playerid, 3);
				}
				else
				{
        			LoadChar(playerid);
				    SpawnPlayer(playerid);
				}
			}
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You have chosen to quit the server.");
	        Kick(playerid);
	    }
	}
	else if(dialogid == 3) // Male or Female
	{
	    if(response)
	    {
	    	if(VIP[playerid])
	        {
		        switch(listitem)
		        {
					case 0:
					{
						PlayerInfo[playerid][pGender] = 1;
						SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You've set your character's gender to male.");
					}
					case 1:
					{
					    PlayerInfo[playerid][pGender] = 2;
					    SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You've set your character's gender to female.");
					}
		        }
		        VIP[playerid] = 0;
            }
            else
            {
		        switch(listitem)
		        {
					case 0:
					{
						PlayerInfo[playerid][pGender] = 1;
						SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You've set your character's gender to male, pick their age from the next dialog.");
					}
					case 1:
					{
					    PlayerInfo[playerid][pGender] = 2;
					    SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You've set your character's gender to female, pick her age from the next dialog.");
					}
		        }
		        ShowDialog(playerid, 4);
	        }
	    }
	    else
	    {
	        if(!VIP[playerid])
	        {
		        SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You MUST choose a gender for your character.");
		        ShowDialog(playerid, 3);
	        }
	        VIP[playerid] = 0;
	    }
	}
	else if(dialogid == 4)
	{
	    if(response)
	    {
			new age = strval(inputtext);
			if(VIP[playerid])
			{
				if(age < 25 || age > 80)
		        {
		            SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}Age must be beteen 25 and 80.");
		            ShowDialog(playerid, 4);
		        }
		        else
		        {
					new string[128];
					PlayerInfo[playerid][pAge] = strval(inputtext);
					format(string, sizeof(string), "SERVER: {FFFFFF}You've set your character's age to %d", PlayerInfo[playerid][pAge]);
					SendClientMessage(playerid, COLOR_LIGHTRED, string);
		        }
		        VIP[playerid] = 0;
			}
			else
			{
		        if(age < 25 || age > 80)
		        {
		            SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}Age must be beteen 25 and 80.");
		            ShowDialog(playerid, 4);
		        }
		        else
		        {
					new string[128];
					PlayerInfo[playerid][pAge] = strval(inputtext);
					format(string, sizeof(string), "SERVER: {FFFFFF}You've set your character's age to %d", PlayerInfo[playerid][pAge]);
					SendClientMessage(playerid, COLOR_LIGHTRED, string);
	                PlayerInfo[playerid][pLoggedIn] = 1;
					PlayerInfo[playerid][pSpawn] = 1;
					SpawnPlayer(playerid);
		        }
	        }
	    }
	    else
	    {
	        if(!VIP[playerid])
	        {
		        SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: {FFFFFF}You MUST pick an age for your character.");
		        ShowDialog(playerid, 4);
	        }
	        VIP[playerid] = 0;
	    }
	}
	else if(dialogid == 5)
	{
	    new string[128];
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0:
	            {
	                if(!PlayerInfo[playerid][pFacDuty])
	                {
	                    PlayerInfo[playerid][pFacDuty] = 1;
	                    SetPlayerColor(playerid, TRANSPARENT_BLUE);
	                    format(string, sizeof(string), "* %s grabs their badge, gun and mp5 from the locker.", RPN(playerid));
						SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						GiveZaiatWeapon(playerid, 29, 500);
						GiveZaiatWeapon(playerid, 24, 200);
						SetPlayerArmour(playerid, 100);
						return 1;
	                }
	                else
	                {
      					PlayerInfo[playerid][pFacDuty] = 0;
	                    SetPlayerColor(playerid, TRANSPARENT_WHITE);
	                    SetPlayerArmour(playerid, 0);
	                    format(string, sizeof(string), "* %s places their badge in the locker.", RPN(playerid));
						SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						return 1;
	                }
	            }
	            case 1:
	            {
	                ShowDialog(playerid, 6);
	            }
	            case 2:
	            {
	                ShowDialog(playerid, 7);
	            }
	        }
	    }
	}
	else if(dialogid == 6)
	{
	    new string[128];
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: // Nightstick
				{
				    if(PlayerInfo[playerid][pMoney] < 50) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
				    GiveZaiatWeapon(playerid, 3, 1);
				    TaxMoney += 50;
				    GiveZaiatMoney(playerid, -50);
                    format(string, sizeof(string), "* %s grabs a Nightstick from the locker.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 1: // Mace
				{
				    if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
				    GiveZaiatWeapon(playerid, 100, 500);
				    TaxMoney += 100;
				    GiveZaiatMoney(playerid, -100);
                    format(string, sizeof(string), "* %s grabs a Desert Eagle from the locker.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 2: // Desert EAgle
				{
				    if(PlayerInfo[playerid][pMoney] < 200) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
				    GiveZaiatWeapon(playerid, 24, 500);
				    TaxMoney += 200;
				    GiveZaiatMoney(playerid, -200);
                    format(string, sizeof(string), "* %s grabs a Desert Eagle from the locker.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 3: // Shotgun
				{
				    if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
				    GiveZaiatWeapon(playerid, 25, 200);
				    TaxMoney += 100;
				    GiveZaiatMoney(playerid, -100);
                    format(string, sizeof(string), "* %s grabs a Shotgun from the locker.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 4: // MP5
				{
				    if(PlayerInfo[playerid][pMoney] < 600) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
				    GiveZaiatWeapon(playerid, 29, 500);
				    TaxMoney += 600;
				    GiveZaiatMoney(playerid, -600);
                    format(string, sizeof(string), "* %s grabs an MP5 from the locker.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 5: // M4
				{
				    if(PlayerInfo[playerid][pMoney] < 1000) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
				    GiveZaiatWeapon(playerid, 31, 500);
				    TaxMoney += 1000;
				    GiveZaiatMoney(playerid, -1000);
                    format(string, sizeof(string), "* %s grabs an M4 from the locker.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 6: // Combat Shotgun
				{
				    if(PlayerInfo[playerid][pMoney] < 1500) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
				    GiveZaiatWeapon(playerid, 27, 200);
				    TaxMoney += 1500;
				    GiveZaiatMoney(playerid, -1500);
                    format(string, sizeof(string), "* %s grabs a Combat Shotgun from the locker.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 7: // Sniper Rifle
				{
				    if(PlayerInfo[playerid][pMoney] < 2500) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
				    GiveZaiatWeapon(playerid, 34, 100);
				    TaxMoney += 2500;
				    GiveZaiatMoney(playerid, -2500);
                    format(string, sizeof(string), "* %s grabs a Sniper Rifle from the locker.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 8: // PainKiller
				{
				    if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
				    SetPlayerHealth(playerid, 100);
                    TaxMoney += 100;
				    GiveZaiatMoney(playerid, -100);
                    format(string, sizeof(string), "* %s grabs a painkiller from the locker and swallows it.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 9: // Vest
				{
				    if(PlayerInfo[playerid][pMoney] < 200) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
				    SetPlayerArmour(playerid, 100);
				    TaxMoney += 300;
				    GiveZaiatMoney(playerid, -200);
                    format(string, sizeof(string), "* %s grabs a vest from the locker and puts it on.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
	        }
	    }
	}
	else if(dialogid == 7)
	{
	    new string[128];
	    if(response)
	    {
			new skin = strval(inputtext);
			if(skin < 0 || skin > 299)
			{
				SendClientMessage(playerid, COLOR_GREY, "Skin must be between 0 and 299.");
				ShowDialog(playerid, 7);
			}
			else
			{
				PlayerInfo[playerid][pModel] = skin;
				SetPlayerSkin(playerid, skin);
				format(string, sizeof(string), "* %s puts on some clothes from the locker.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				return 1;
			}
	    }
	}
	else if(dialogid == 9) // Mechanic
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: // Repair Vehicle
	            {
	                new string[128];
	                new Float:vH; GetVehicleHealth(GetPlayerVehicleID(playerid), vH);
					new Float:vel[3]; GetVehicleVelocity(GetPlayerVehicleID(playerid), vel[0], vel[1], vel[2]);
	                if(vH < 250) return SendClientMessage(playerid, COLOR_GREY, "The vehicle's engine is too hot to be repaired.");
	                if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You must be in the driver seat to repair a vehicle.");
					if(vel[0] != 0 || vel[1] != 0 || vel[2] != 0) return SendClientMessage(playerid, COLOR_GREY, "You can't repair a vehicle while it's moving.");
					RepairVehicle(GetPlayerVehicleID(playerid));
					PlayerInfo[playerid][pJobSkill][JOB_MECHANIC] ++;
					PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
					format(string, sizeof(string), "* %s has completely repaired the vehicle they're inside.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	            }
	            case 1: // Add/Remove Nitros
	            {
	                new string[128];
					new Float:vel[3]; GetVehicleVelocity(GetPlayerVehicleID(playerid), vel[0], vel[1], vel[2]);
	                if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You must be in the driver seat to repair a vehicle.");
					if(vel[0] != 0 || vel[1] != 0 || vel[2] != 0) return SendClientMessage(playerid, COLOR_GREY, "You can't add/remove nitros to a vehicle while it's moving.");
					if(GetVehicleComponentInSlot(GetPlayerVehicleID(playerid),GetVehicleComponentType(1009)) != 1009) // Check if the vehicle has no nitro
			        {
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1009);
			            PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			            format(string, sizeof(string), "* %s has installed a 2x nitros cylinder into the vehicle.", RPN(playerid));
			        }
			        else
			        {
			            RemoveVehicleComponent(GetPlayerVehicleID(playerid),1009);
			            PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			            format(string, sizeof(string), "* %s has removed the nitros cylinders from the vehicle.", RPN(playerid));
			        }
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	            }
	            case 2: // Add/Remove Hydraulics
	            {
	                new string[128];
					new Float:vel[3]; GetVehicleVelocity(GetPlayerVehicleID(playerid), vel[0], vel[1], vel[2]);
	                if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You must be in the driver seat to repair a vehicle.");
					if(vel[0] != 0 || vel[1] != 0 || vel[2] != 0) return SendClientMessage(playerid, COLOR_GREY, "You can't add/remove nitros to a vehicle while it's moving.");
					if(GetVehicleComponentInSlot(GetPlayerVehicleID(playerid),GetVehicleComponentType(1087)) != 1087) // Check if the vehicle has no hydraulics
			        {
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1087);
			            PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			            format(string, sizeof(string), "* %s has installed hydraulics system into the vehicle.", RPN(playerid));
			        }
			        else
			        {
			            RemoveVehicleComponent(GetPlayerVehicleID(playerid),1087);
			            PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			            format(string, sizeof(string), "* %s has removed the hydraulics from the vehicle.", RPN(playerid));
			        }
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	            }
	        }
	    }
	}
	else if(dialogid == 10) // Dealership main
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: ShowDialog(playerid, 11); // Bikes
	            case 1: ShowDialog(playerid, 12); // Normal Vehicles
	            case 2: ShowDialog(playerid, 21); // Lowriders
	            case 3: ShowDialog(playerid, 13); // Off-Road Vehicles
	            case 4: ShowDialog(playerid, 14); // Sport Vehicles
	        }
	    }
	}
	else if(dialogid == 11) // Bikes
	{
	    new string[128], carid, price;
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: {carid = 481; price = 600;}
	            case 1: {carid = 462; price = 4000;}
	            case 2: {carid = 463; price = 6000;}
	            case 3: {carid = 468; price = 4000;}
	            case 4: {carid = 471; price = 6000;}
	            case 5: {carid = 461; price = 20000;}
	            case 6: {carid = 521; price = 25000;}
	        }
	        if(price > PlayerInfo[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
			GiveZaiatMoney(playerid, -price);
         	format(string, sizeof(string), " You have purchased a %s. (Unlock it using /lock)", RVN(carid));
	        SendClientMessage(playerid, COLOR_GREEN, string);
	        if(PlayerInfo[playerid][pVIP] >= 2 && PlayerInfo[playerid][vModel])
	        {
	            PlayerInfo[playerid][pVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,0,0,1200);
		        SetVehicleParamsEx(PlayerInfo[playerid][pVVeh], 0, 0, 0, 1, 0, 0, 0);
		        PlayerInfo[playerid][vVLocked] = 1;
		        PlayerInfo[playerid][vVModel] = carid;
				GetVehiclePos(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][vVX], PlayerInfo[playerid][vVY], PlayerInfo[playerid][vVZ]);
				GetVehicleZAngle(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][vVA]);
				PlayerInfo[playerid][vVC1] = 0;
				PlayerInfo[playerid][vVC2] = 0;
				return 1;
	        }
	        PlayerInfo[playerid][pVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,0,0,1200);
	        SetVehicleParamsEx(PlayerInfo[playerid][pVeh], 0, 0, 0, 1, 0, 0, 0);
	        PlayerInfo[playerid][vLocked] = 1;
	        PlayerInfo[playerid][vModel] = carid;
			GetVehiclePos(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][vX], PlayerInfo[playerid][vY], PlayerInfo[playerid][vZ]);
			GetVehicleZAngle(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][vA]);
			PlayerInfo[playerid][vC1] = 0;
			PlayerInfo[playerid][vC2] = 0;
	    }
	}
	else if(dialogid == 12) // Normal Vehicles
	{
	    new string[128], carid, price;
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: {carid = 480; price = 30000;}
	            case 1: {carid = 533; price = 26000;}
	            case 2: {carid = 439; price = 26000;}
	            case 3: {carid = 555; price = 28000;}
	            case 4: {carid = 405; price = 24000;} // Sentinel
	            case 5: {carid = 410; price = 22000;} // Manana
	        }
	        if(price > PlayerInfo[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
            GiveZaiatMoney(playerid, -price);
         	format(string, sizeof(string), " You have purchased a %s. (Unlock it using /lock)", RVN(carid));
	        SendClientMessage(playerid, COLOR_GREEN, string);
	        if(PlayerInfo[playerid][pVIP] >= 2 && PlayerInfo[playerid][vModel])
	        {
	            PlayerInfo[playerid][pVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,0,0,1200);
		        SetVehicleParamsEx(PlayerInfo[playerid][pVVeh], 0, 0, 0, 1, 0, 0, 0);
		        PlayerInfo[playerid][vVLocked] = 1;
		        PlayerInfo[playerid][vVModel] = carid;
				GetVehiclePos(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][vVX], PlayerInfo[playerid][vVY], PlayerInfo[playerid][vVZ]);
				GetVehicleZAngle(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][vVA]);
				PlayerInfo[playerid][vVC1] = 0;
				PlayerInfo[playerid][vVC2] = 0;
				return 1;
	        }
	        PlayerInfo[playerid][pVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,0,0,1200);
	        SetVehicleParamsEx(PlayerInfo[playerid][pVeh], 0, 0, 0, 1, 0, 0, 0);
	        PlayerInfo[playerid][vLocked] = 1;
	        PlayerInfo[playerid][vModel] = carid;
			GetVehiclePos(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][vX], PlayerInfo[playerid][vY], PlayerInfo[playerid][vZ]);
			GetVehicleZAngle(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][vA]);
			PlayerInfo[playerid][vC1] = 0;
			PlayerInfo[playerid][vC2] = 0;
	    }
	}
	else if(dialogid == 13) // Off-Road Vehicles
	{
	    new string[128], carid, price;
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: {carid = 579; price = 22000;}
	            case 1: {carid = 400; price = 24000;}
	            case 2: {carid = 495; price = 30000;}
	        }
	        if(price > PlayerInfo[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
            GiveZaiatMoney(playerid, -price);
         	format(string, sizeof(string), " You have purchased a %s. (Unlock it using /lock)", RVN(carid));
	        SendClientMessage(playerid, COLOR_GREEN, string);
			if(PlayerInfo[playerid][pVIP] >= 2 && PlayerInfo[playerid][vModel])
	        {
	            PlayerInfo[playerid][pVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,0,0,1200);
		        SetVehicleParamsEx(PlayerInfo[playerid][pVVeh], 0, 0, 0, 1, 0, 0, 0);
		        PlayerInfo[playerid][vVLocked] = 1;
		        PlayerInfo[playerid][vVModel] = carid;
				GetVehiclePos(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][vVX], PlayerInfo[playerid][vVY], PlayerInfo[playerid][vVZ]);
				GetVehicleZAngle(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][vVA]);
				PlayerInfo[playerid][vVC1] = 0;
				PlayerInfo[playerid][vVC2] = 0;
				return 1;
	        }
	        PlayerInfo[playerid][pVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,0,0,1200);
	        SetVehicleParamsEx(PlayerInfo[playerid][pVeh], 0, 0, 0, 1, 0, 0, 0);
	        PlayerInfo[playerid][vLocked] = 1;
	        PlayerInfo[playerid][vModel] = carid;
			GetVehiclePos(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][vX], PlayerInfo[playerid][vY], PlayerInfo[playerid][vZ]);
			GetVehicleZAngle(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][vA]);
			PlayerInfo[playerid][vC1] = 0;
			PlayerInfo[playerid][vC2] = 0;
	    }
	}
	else if(dialogid == 14) // Sport Vehicles
	{
	    new string[128], carid, price;
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: {carid = 560; price = 60000;}
	            case 1: {carid = 429; price = 65000;}
	            case 2: {carid = 402; price = 70000;}
	            case 3: {carid = 541; price = 90000;}
	            case 4: {carid = 415; price = 80000;}
	            case 5: {carid = 559; price = 70000;}
	            case 6: {carid = 451; price = 110000;}
	        }
	        if(price > PlayerInfo[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
            GiveZaiatMoney(playerid, -price);
         	format(string, sizeof(string), " You have purchased a %s. (Unlock it using /lock)", RVN(carid));
	        SendClientMessage(playerid, COLOR_GREEN, string);
	        if(PlayerInfo[playerid][pVIP] >= 2 && PlayerInfo[playerid][vModel])
	        {
	            PlayerInfo[playerid][pVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,0,0,1200);
		        SetVehicleParamsEx(PlayerInfo[playerid][pVVeh], 0, 0, 0, 1, 0, 0, 0);
		        PlayerInfo[playerid][vVLocked] = 1;
		        PlayerInfo[playerid][vVModel] = carid;
				GetVehiclePos(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][vVX], PlayerInfo[playerid][vVY], PlayerInfo[playerid][vVZ]);
				GetVehicleZAngle(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][vVA]);
				PlayerInfo[playerid][vVC1] = 0;
				PlayerInfo[playerid][vVC2] = 0;
				return 1;
	        }
	        PlayerInfo[playerid][pVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,0,0,1200);
	        SetVehicleParamsEx(PlayerInfo[playerid][pVeh], 0, 0, 0, 1, 0, 0, 0);
	        PlayerInfo[playerid][vLocked] = 1;
	        PlayerInfo[playerid][vModel] = carid;
			GetVehiclePos(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][vX], PlayerInfo[playerid][vY], PlayerInfo[playerid][vZ]);
			GetVehicleZAngle(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][vA]);
			PlayerInfo[playerid][vC1] = 0;
			PlayerInfo[playerid][vC2] = 0;
	    }
	}


	else if(dialogid == 21) // Lowriders
	{
	    new string[128], carid, price;
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: {carid = 536; price = 25000;} // Blade
	            case 1: {carid = 575; price = 35000;} // Broadway
	            case 2: {carid = 534; price = 30000;} // Remington
	            case 3: {carid = 567; price = 25000;} // Savanna
	            case 4: {carid = 535; price = 27000;} // Slamvan
	            case 5: {carid = 576; price = 24000;} // Tornado
	            case 6: {carid = 412; price = 30000;} // Voodo
	        }
	        if(price > PlayerInfo[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
            GiveZaiatMoney(playerid, -price);
         	format(string, sizeof(string), " You have purchased a %s. (Unlock it using /lock)", RVN(carid));
	        SendClientMessage(playerid, COLOR_GREEN, string);
	        if(PlayerInfo[playerid][pVIP] >= 2 && PlayerInfo[playerid][vModel])
	        {
	            PlayerInfo[playerid][pVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,0,0,1200);
		        SetVehicleParamsEx(PlayerInfo[playerid][pVVeh], 0, 0, 0, 1, 0, 0, 0);
		        PlayerInfo[playerid][vVLocked] = 1;
		        PlayerInfo[playerid][vVModel] = carid;
				GetVehiclePos(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][vVX], PlayerInfo[playerid][vVY], PlayerInfo[playerid][vVZ]);
				GetVehicleZAngle(PlayerInfo[playerid][pVVeh], PlayerInfo[playerid][vVA]);
				PlayerInfo[playerid][vVC1] = 0;
				PlayerInfo[playerid][vVC2] = 0;
				return 1;
	        }
	        PlayerInfo[playerid][pVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,0,0,1200);
	        SetVehicleParamsEx(PlayerInfo[playerid][pVeh], 0, 0, 0, 1, 0, 0, 0);
	        PlayerInfo[playerid][vLocked] = 1;
	        PlayerInfo[playerid][vModel] = carid;
			GetVehiclePos(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][vX], PlayerInfo[playerid][vY], PlayerInfo[playerid][vZ]);
			GetVehicleZAngle(PlayerInfo[playerid][pVeh], PlayerInfo[playerid][vA]);
			PlayerInfo[playerid][vC1] = 0;
			PlayerInfo[playerid][vC2] = 0;
	    }
	}
	else if(dialogid == 15) // Smartphone /ad
	{
	    new string[128];
	    new price = strlen(inputtext) * 12;
	    if(strlen(inputtext) == 0) return 1;
		if(strlen(inputtext) > 64) return SendClientMessage(playerid, COLOR_GREY, "Maximum characters allowed per advertisement are 64.");
		if(PlayerInfo[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		if(HasAD[playerid]) return SendClientMessage(playerid, COLOR_GREY, " You must wait for your advertisement to be published before making a new one.");
		if(AdQueue == MAX_ADS-1) return SendClientMessage(playerid, COLOR_GREY, " There are no queue slots for your advertisement.");
		// Advertisement
		HasAD[playerid] = 1;
		if(LastAd) SendClientMessage(playerid, COLOR_LIGHTBLUE, " Your advertisement has been placed in the queue, wait for about 60 seconds maximum.");
	    format(AD[AdQueue], 128, "Advertisement: %s, Contact: %s - Ph: %d", inputtext, RPN(playerid), PlayerInfo[playerid][pCellphone]);
		iAD[AdQueue] = 1;
		AdQueue++;
	    GiveZaiatMoney(playerid, -price);
	    NewsMoney = price;
	    format(string, sizeof(string), "* %s has placed an advertisement in the queue for $%d.", RPN(playerid), price);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		SendClientMessage(playerid, COLOR_WHITE, " You have been charged $10 per character as you are using an internet service.");
	}
	else if(dialogid == 16) // VIP
	{
	    if(response)
	    {
	        new string[128];
		    switch(listitem)
		    {
	        	case 0: // VIP Color (Bronze+)
		        {
		            if(GetPlayerColor(playerid) != TRANSPARENT_VIP) {SetPlayerColor(playerid, TRANSPARENT_VIP); SendClientMessage(playerid, COLOR_VIP, "You have toggled your VIP name color on.");}
		            else {SetPlayerColor(playerid, TRANSPARENT_WHITE); SendClientMessage(playerid, COLOR_VIP, "You have toggled your VIP name color off.");}
		        }
		        case 1: // VIP Tag (Silver+)
		        {
		            if(PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not Silver VIP.");
		            if(!VIPTag[playerid])
		            {

		                VIPTag[playerid] = 1;
		                format(string, sizeof(string), "%s VIP", RPVIPN(playerid));
		                /*Delete3DTextLabel(VIPText[playerid]);
		                VIPText[playerid] = Create3DTextLabel(string, COLOR_VIP, 0, 0, -20, 25, -1, 1);
		                Attach3DTextLabelToPlayer(VIPText[playerid], playerid, 0, 0, 0.25);*/
		                if(IsValidDynamic3DTextLabel(VIPText[playerid])) DestroyDynamic3DTextLabel(VIPText[playerid]);
		                VIPText[playerid] = CreateDynamic3DTextLabel(string, COLOR_VIP, 0, 0, -20, 25, playerid);
		                Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, VIPText[playerid] , E_STREAMER_ATTACH_OFFSET_Z, 0.25);
		                SendClientMessage(playerid, COLOR_VIP, "You have toggled your VIP Head Tag on.");
		            }
		            else
		            {
		                VIPTag[playerid] = 0;
		            	//Delete3DTextLabel(VIPText[playerid]);
		            	if(IsValidDynamic3DTextLabel(VIPText[playerid])) DestroyDynamic3DTextLabel(VIPText[playerid]);
		                SendClientMessage(playerid, COLOR_VIP, "You have toggled your VIP Head Tag off.");
		            }
		        }
		        case 2: // Tuning (Silver+)
		        {
		            if(PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not Silver VIP.");
		            if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You are not driving a vehicle.");
					CarmodDialog(playerid);
		        }
		        case 3: // VIP advertisement
		        {
		            if(PlayerInfo[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GREY, "You are not Silver VIP.");
					ShowDialog(playerid, 20);
		        }
		        case 4: // Skin (Gold+)
		        {
		        	if(PlayerInfo[playerid][pVIP] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not Gold VIP.");
					ShowDialog(playerid, 17);
		        }
		        case 5: // Age (Gold+)
		        {
		            if(PlayerInfo[playerid][pVIP] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not Gold VIP.");
		            VIP[playerid] = 1;
		            ShowDialog(playerid, 4);
		        }
		        case 6: // Gender (Gold+)
		        {
		            if(PlayerInfo[playerid][pVIP] < 3) return SendClientMessage(playerid, COLOR_GREY, "You are not Gold VIP.");
		            VIP[playerid] = 1;
		            ShowDialog(playerid, 3);
		        }
		        case 7: // Name (Platinum)
		        {
		            if(PlayerInfo[playerid][pVIP] < 4) return SendClientMessage(playerid, COLOR_GREY, "You are not Platinum VIP.");
		            ShowDialog(playerid, 18);
		        }
		    }
		}
	}
	else if(dialogid == 17)
	{
	    if(response)
	    {
	        new skinid = strval(inputtext);
	        if(skinid < 0 || skinid > 299) return SendClientMessage(playerid, COLOR_GREY, "Skins are between 0 and 299.");
	        SetPlayerSkin(playerid, skinid);
	        PlayerInfo[playerid][pModel] = skinid;
	    }
	}
	else if(dialogid == 18)
	{
	    if(response)
	    {
	        new string[128];
	        format(VIPName[playerid], MAX_PLAYER_NAME, "%s", inputtext);
	        format(string, sizeof(string), "AdmWarn: Platinum VIP %s has requested a free namechange to %s. (/approve) (/deny)", RPN(playerid), VIPName[playerid]);
	        SendAdminMessage(COLOR_DARKRED, 1, string);
	    }
	}
	else if(dialogid == 19)
	{
	    if(response)
	    {
	        new string[128];
	        switch(listitem)
	        {
				case 0: // Knife
				{
				    if(PlayerInfo[playerid][pMoney] < 10000) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money.");
					GiveZaiatMoney(playerid, -10000);
					GiveZaiatWeapon(playerid, 4, 1);
					format(string, sizeof(string), "* %s has bought a knife.", RPN(playerid));
 					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 1: // Grenade
				{
				    if(PlayerInfo[playerid][pMoney] < 20000) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money.");
					GiveZaiatMoney(playerid, -20000);
					GiveZaiatWeapon(playerid, 16, 5);
					format(string, sizeof(string), "* %s has bought grenades.", RPN(playerid));
 					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 2: // Molotov
				{
					if(PlayerInfo[playerid][pMoney] < 20000) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money.");
					GiveZaiatMoney(playerid, -20000);
					GiveZaiatWeapon(playerid, 18, 5);
					format(string, sizeof(string), "* %s has bought molotov cocktails.", RPN(playerid));
 					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
	        }
	    }
	}
	else if(dialogid == 20) // VIP /ad
	{
	    new string[128];
	    new price = strlen(inputtext) * 3;
	    if(strlen(inputtext) == 0) return 1;
		if(strlen(inputtext) > 64) return SendClientMessage(playerid, COLOR_GREY, "Maximum characters allowed per advertisement are 64.");
		if(PlayerInfo[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");
		if(HasAD[playerid]) return SendClientMessage(playerid, COLOR_GREY, " You must wait for your advertisement to be published before making a new one.");
		if(AdQueue == MAX_ADS-1) return SendClientMessage(playerid, COLOR_GREY, " There are no queue slots for your advertisement.");
		// Advertisement
		HasAD[playerid] = 1;
		if(LastAd) SendClientMessage(playerid, COLOR_LIGHTBLUE, " Your advertisement has been placed in the queue, wait for about 60 seconds maximum.");
	    format(AD[AdQueue], 128, "Advertisement: %s, Contact: %s - Ph: %d", inputtext, RPN(playerid), PlayerInfo[playerid][pCellphone]);
		iAD[AdQueue] = 2;
		AdQueue++;
	    GiveZaiatMoney(playerid, -price);
	    NewsMoney = price;
	    format(string, sizeof(string), "* %s has placed an advertisement in the queue for $%d.", RPN(playerid), price);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		SendClientMessage(playerid, COLOR_WHITE, " You have been charged $3 per character as you are using a VIP service.");
	}
	else if(dialogid == 22)
	{
	    if(response)
	    {
	       	if(PlayerInfo[playerid][pMoney] < 3000) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money on you.");
	        switch(listitem)
	        {
				case 0:
				{
				    if(GetPlayerFightingStyle(playerid) == FIGHT_STYLE_NORMAL) return SendClientMessage(playerid, COLOR_GREY, "You are already using that fighting style.");
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You are now using the normal fighting style.");
					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_NORMAL;
				}
				case 1:
				{
				    if(GetPlayerFightingStyle(playerid) == FIGHT_STYLE_BOXING) return SendClientMessage(playerid, COLOR_GREY, "You are already using that fighting style.");
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You are now using the boxing fighting style.");
					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_BOXING;
				}
				case 2:
				{
				    if(GetPlayerFightingStyle(playerid) == FIGHT_STYLE_KUNGFU) return SendClientMessage(playerid, COLOR_GREY, "You are already using that fighting style.");
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You are now using the kung-fu fighting style.");
					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_KUNGFU;
				}
				case 3:
				{
				    if(GetPlayerFightingStyle(playerid) == FIGHT_STYLE_KNEEHEAD) return SendClientMessage(playerid, COLOR_GREY, "You are already using that fighting style.");
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You are now using the knee-head fighting style.");
					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_KNEEHEAD;
				}
				case 4:
				{
				    if(GetPlayerFightingStyle(playerid) == FIGHT_STYLE_GRABKICK) return SendClientMessage(playerid, COLOR_GREY, "You are already using that fighting style.");
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You are now using the grab-kick fighting style.");
					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_GRABKICK;
				}
				case 5:
				{
				    if(GetPlayerFightingStyle(playerid) == FIGHT_STYLE_ELBOW) return SendClientMessage(playerid, COLOR_GREY, "You are already using that fighting style.");
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You are now using the elbow fighting style.");
					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_ELBOW;
				}
	        }
	        GiveZaiatMoney(playerid, -3000);
	    }
	}
	else if(dialogid == 23)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: toyslot[playerid] = 0; case 1: toyslot[playerid] = 1; case 2: toyslot[playerid] = 2; case 3: toyslot[playerid] = 3; case 4: toyslot[playerid] = 4;
	            case 5: toyslot[playerid] = 5; case 6: toyslot[playerid] = 6; case 7: toyslot[playerid] = 7; case 8: toyslot[playerid] = 8; case 9: toyslot[playerid] = 9;
	        }
	        new index = toyslot[playerid];
		    if(PlayerInfo[playerid][pToyModel][index] == 0)
		    {
		        ShowDialog(playerid, 23);
		    }
		    else
		    {
	        	ShowDialog(playerid, 24);
	        }
	    }
	}
	else if(dialogid == 24)
	{
	    if(response)
	    {
			switch(listitem)
			{
				case 0:
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, toyslot[playerid]))
					{
					    ShowDialog(playerid, 25);
					}
			    	else
			    	{
			    	    RemovePlayerAttachedObject(playerid, toyslot[playerid]);
			    	}
				}
				case 1:
				{
				    EditAttachedObject(playerid, toyslot[playerid]);
				}
			}
	    }
	    else ShowDialog(playerid, 23);
	}
	else if(dialogid == 25)
	{
	    if(response)
	    {
			new bone, index = toyslot[playerid];
	        switch(listitem)
	        {
	            case 0: bone = 1; case 1: bone = 2; case 2: bone = 3; case 3: bone = 4; case 4: bone = 5; case 5: bone = 6;
	            case 6: bone = 7; case 7: bone = 8; case 8: bone = 9; case 9: bone = 10; case 10: bone = 11; case 11: bone = 12;
	            case 12: bone = 13; case 13: bone = 14; case 14: bone = 15; case 15: bone = 16; case 16: bone = 17; case 17: bone = 18;
	        }
			//SetPlayerAttachedObject(playerid, index, PlayerInfo[playerid][pToyModel][index], bone, Float:PlayerInfo[playerid][pToyX][index], Float:PlayerInfo[playerid][pToyY][index], Float:PlayerInfo[playerid][pToyZ][index], Float:PlayerInfo[playerid][pToyRX][index], Float:PlayerInfo[playerid][pToyRY][index], Float:PlayerInfo[playerid][pToyRZ][index], Float:PlayerInfo[playerid][pToySX][index], Float:PlayerInfo[playerid][pToySY][index], Float:PlayerInfo[playerid][pToySZ][index]);
			//
			SetPlayerAttachedObject(playerid, index, PlayerInfo[playerid][pToyModel][index], bone, Float:PlayerInfo[playerid][pToyX][index], Float:PlayerInfo[playerid][pToyY][index], Float:PlayerInfo[playerid][pToyZ][index], Float:PlayerInfo[playerid][pToyRX][index], Float:PlayerInfo[playerid][pToyRY][index], Float:PlayerInfo[playerid][pToyRZ][index], Float:PlayerInfo[playerid][pToySX][index], Float:PlayerInfo[playerid][pToySY][index], Float:PlayerInfo[playerid][pToySZ][index]);
	    }
	    else ShowDialog(playerid, 24);
	}
	else if(dialogid == 26)
	{
		if(response)
		{
		    new string[128];
		    switch(listitem)
		    {
				case 0:
				{
				    if(LHealth)
				    {
				        format(string, sizeof(string), "You need to wait %d more hours (%d minutes) before refilling everybody's health.", LHealth/60, LHealth);
						SendClientMessage(playerid, COLOR_GREY, string);
				        return 1;
				    }
				    if(PlayerInfo[playerid][pLPoints] < 2) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough loyalty points for this.");
				    foreach(Player, i)
				    {
				        SetPlayerHealth(i, 100);
				    }
				    format(string, sizeof(string), "LoyalWarn: Loyal Player %s has refilled everybody's health.", RPN(playerid));
				    PlayerInfo[playerid][pLPoints] -= 2;
				    LHealth = 120;
				}
				case 1:
				{
				    if(LFix)
				    {
				        format(string, sizeof(string), "You need to wait %d more hours (%d minutes) before repairing all vehicles.", LFix/60, LFix);
				        SendClientMessage(playerid, COLOR_GREY, string);
				        return 1;
				    }
				    if(PlayerInfo[playerid][pLPoints] < 4) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough loyalty points for this.");
					for(new i=0; i<MAX_VEHICLES; i++)
					{
					    RepairVehicle(i);
					}
					format(string, sizeof(string), "LoyalWarn: Loyal Player %s has repaired all vehicles.", RPN(playerid));
					PlayerInfo[playerid][pLPoints] -= 4;
					LFix = 120;
				}
				case 2:
				{
				    if(LRefill)
				    {
				        format(string, sizeof(string), "You need to wait %d more hours (%d minutes) to refill everybody's health.", LRefill/60, LRefill);
				        SendClientMessage(playerid, COLOR_GREY, string);
				        return 1;
				    }
				    if(PlayerInfo[playerid][pLPoints] < 6) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough loyalty points for this.");
					for(new i=0; i<MAX_VEHICLES; i++)
					{
					    Fuel[i] = 100;
					}
					format(string, sizeof(string), "LoyalWarn: Loyal Player %s has refilled all vehicles.", RPN(playerid));
					PlayerInfo[playerid][pLPoints] -= 6;
					LRefill = 120;
				}
		    }
		    SendClientMessageToAll(COLOR_LIGHTRED, string);
		}
	}
	else if(dialogid == 27)
	{
	    if(response)
	    {
	        new string[128];
	        switch(listitem)
	        {
		        case 0:
		        {
		        	GiveZaiatWeapon(playerid, 43, 999999);
	                format(string, sizeof(string), "* %s grabs a Camera from the locker.", RPN(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    		}
		        case 1:
		        {
		            ShowDialog(playerid, 7);
		        }
	        }
	    }
	}
    else if(dialogid == 1111 && response)
	{
		switch(listitem)
		{
			case 0: AddVehicleComponent(vehid,1010),CarmodDialog(playerid), PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			case 1: ShowPlayerDialog(playerid,1112,DIALOG_STYLE_LIST,"Choose primary color:","White\nBlack\nOrange\nLight Blue\nDark Blue\nPurple\nRed\nDark Red\nGrey","Select","Cancle");
			case 2: ShowPlayerDialog(playerid,1113,DIALOG_STYLE_LIST,"Choose a wheel:","Shadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\nAhab\nVirtual\nAcces\n{FF0000}Back","Select","Cancle");
			case 3: AddVehicleComponent(vehid, 1086), PlayerPlaySound(playerid,1133,0.0,0.0,0.0), CarmodDialog(playerid);
			case 4: AddVehicleComponent(vehid, 1087), PlayerPlaySound(playerid,1133,0.0,0.0,0.0), CarmodDialog(playerid);
			case 5:
			{
				if(vehmd == 562 || vehmd == 565 || vehmd == 559 || vehmd == 561 || vehmd == 560 || vehmd == 558)
				{
					ShowPlayerDialog(playerid,1114,DIALOG_STYLE_LIST,"Choose one","Paintjob\nAlien\nX-Flow\n{FF0000}Back","Select","Cancel");
				}
				else if(vehmd == 576 || vehmd == 575 || vehmd == 535)
				{
					Lowrider(playerid);
    			}
				else if(vehmd == 567 || vehmd == 536)
				{
                    ShowPlayerDialog(playerid,1002,DIALOG_STYLE_LIST,"Choose one","Paintjob\nChrome\nSlamin\nHardtop Roof\nSofttop Roof\n{FF0000}Back","Select","Cancel");
				}
				else if(vehmd == 534)
				{
                    ShowPlayerDialog(playerid,1003,DIALOG_STYLE_LIST,"Choose one","Paintjob\nChrome\nSlamin\nFlame Sideskirt \nArches Sideskirt Roof\n{FF0000}Back","Select","Cancel");
				}
				else if(vehmd == 496 || vehmd == 505 || vehmd == 516 || vehmd == 517 || vehmd == 518 || vehmd == 527 || vehmd == 529 || vehmd == 540 || vehmd == 546 || vehmd == 547 || vehmd == 549 || vehmd == 550 || vehmd == 551 || vehmd == 580 || vehmd == 585 || vehmd == 587 || vehmd == 589 || vehmd == 600 || vehmd == 603 || vehmd == 401 || vehmd == 410 || vehmd == 415 || vehmd == 418 || vehmd == 420 || vehmd == 436 || vehmd == 439 || vehmd == 458 || vehmd == 489 || vehmd == 491 || vehmd == 492)
				{
					RegularCarDialog(playerid);
				}
				else
				{
					SendClientMessage(playerid,COLOR_GREY,"This vehicle can't be tuned.");
				}
			}
		}
	}
	if(dialogid == 1112 && response)
	{
		new color1, color2;
		GetVehicleColor(vehid,color1,color2);
	    new Carray[] = {1,0,6,2,79,149,151,3,34};
	    ChangeVehicleColor(vehid,Carray[listitem],color2);
	    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
		{
		    PlayerInfo[playerid][vC1] = Carray[listitem];
		}
		else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
		{
		    PlayerInfo[playerid][vVC1] = Carray[listitem];
		}
	    return ShowPlayerDialog(playerid,1116,DIALOG_STYLE_LIST,"Choose second color:","White\nBlack\nOrange\nLight Blue\nDark Blue\nPurple\nRed\nDark Red\nGrey","Select","Cancle");
	}

	if(dialogid == 1116 && response)
	{
	    new color1, color2;
		GetVehicleColor(vehid,color1,color2);
	    new Carray[] = {1,0,6,2,79,149,151,3,34};
        ChangeVehicleColor(vehid,color1,Carray[listitem]);
        if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVeh])
		{
		    PlayerInfo[playerid][vC2] = Carray[listitem];
		}
		else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pVVeh])
		{
		    PlayerInfo[playerid][vVC2] = Carray[listitem];
		}
        return CarmodDialog(playerid);
	}
	if(dialogid == 1113 && response)
	{
	    if(listitem == 16) return CarmodDialog(playerid);
		new Warray[] = {1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};
		AddVehicleComponent(vehid,Warray[listitem]);
		return CarmodDialog(playerid);
	}
	if(dialogid == 1114 && response)
	{
	    switch(listitem)
	    {
			case 0: ShowPlayerDialog(playerid,1115,DIALOG_STYLE_LIST,"Choose a paintjob:","Paintjob 1\nPaintjob 2\nPaintjob 3","Select","Cancel");
			case 1: Mod(playerid);
			case 2: Mod1(playerid);
			case 3: CarmodDialog(playerid);
		}
	}
	if(dialogid == 1001 && response)
	{
		switch(listitem)
		{
			case 0: ShowPlayerDialog(playerid,1115,DIALOG_STYLE_LIST,"Choose a paintjob:","Paintjob 1\nPaintjob 2\nPaintjob 3","Select","Cancel");
			case 1: Mod2(playerid);
			case 2: Mod3(playerid);
			case 3: CarmodDialog(playerid);
		}
	}
	if(dialogid  == 1002)
	{
		switch(listitem)
		{
			case 0: ShowPlayerDialog(playerid,1115,DIALOG_STYLE_LIST,"Choose a paintjob:","Paintjob 1\nPaintjob 2\nPaintjob 3","Select","Cancel");
			case 1: Mod2(playerid);
			case 2: Mod3(playerid);
			case 3:
			{
				if(vehmd == 567)//Savanna
				{
					AddVehicleComponent(vehid, 1130);
				}
				if(vehmd == 536)//Blade
                {
                    AddVehicleComponent(vehid, 1128);
				}
			}
			case 4:
			{
				if(vehmd == 567)//Savanna
				{
    				 AddVehicleComponent(vehid, 1131);
				}
				if(vehmd == 536)//Blade
                {
                    AddVehicleComponent(vehid, 1103);
				}
			}
			case 5: CarmodDialog(playerid);
		}
	}
	if(dialogid  == 1003)//Remington
	{
		switch(listitem)
		{
		    case 0:ShowPlayerDialog(playerid,1115,DIALOG_STYLE_LIST,"Choose a paintjob:","Paintjob 1\nPaintjob 2\nPaintjob 3","Select","Cancel");
		    case 1: Mod2(playerid);
			case 2: Mod3(playerid);
			case 3: AddVehicleComponent(vehid, 1122),AddVehicleComponent(vehid, 1101),ShowPlayerDialog(playerid,1003,DIALOG_STYLE_LIST,"Choose one","Paintjob\nChrome\nSlamin\nFlame Sideskirt \nArches Sideskirt Roof\n{FF0000}Back","Select","Cancel");
			case 4: AddVehicleComponent(vehid, 1106),AddVehicleComponent(vehid, 1124),ShowPlayerDialog(playerid,1003,DIALOG_STYLE_LIST,"Choose one","Paintjob\nChrome\nSlamin\nFlame Sideskirt \nArches Sideskirt Roof\n{FF0000}Back","Select","Cancel");
			case 5: CarmodDialog(playerid);
		}
	}
	if(dialogid == 1004 && response)//regular cars
	{
	    switch(listitem)
	    {
			case 0:
			{
				ShowPlayerDialog(playerid,1010,DIALOG_STYLE_LIST,"Spoiler","Pro\nWin\nDrag\nAlpha\nChamp\nRace\nWorx\nFury\n{FF0000}Back","Select","Cancel");
			}
			case 1:
			{
			    if(vehmd == 585 || vehmd == 603 || vehmd == 439 || vehmd == 458 || vehmd == 418 || vehmd == 527 || vehmd == 580)
			    {
					AddVehicleComponent(vehid, 1006);
					return RegularCarDialog(playerid);
				}
				else if(vehmd == 439 || vehmd == 458 || vehmd == 491 || vehmd == 517 ||vehmd == 547)
			    {ShowPlayerDialog(playerid,1040,DIALOG_STYLE_LIST,"Vents","Oval\nSquare\n{FF0000}Back","Select","Cancel");}
                else if(vehmd == 415)
                {
					AddVehicleComponent(vehid, 1007);
					AddVehicleComponent(vehid, 1071);
					return RegularCarDialog(playerid);
				}
                else ShowPlayerDialog(playerid,1020,DIALOG_STYLE_LIST,"Hood","Champ\nFury\nRace\nWorx\n{FF0000}Back","Select","Cancel");
			}
			case 2:
			{
			    if(vehmd == 549 || vehmd == 585 || vehmd == 603)
				{ShowPlayerDialog(playerid,1040,DIALOG_STYLE_LIST,"Vents","Oval\nSquare\n{FF0000}Back","Select","Cancel");}
				else if(vehmd == 410 || vehmd == 436 || vehmd == 439 || vehmd == 458 || vehmd == 516 || vehmd == 491 || vehmd == 517 || vehmd == 418 || vehmd == 527 || vehmd == 580)
				{
                    AddVehicleComponent(vehid, 1007);
					AddVehicleComponent(vehid, 1071);
					return RegularCarDialog(playerid);
				}
				else if(vehmd == 415 || vehmd == 547 || vehmd == 420 || vehmd == 587)
				{CarmodDialog(playerid);}
				else
				{
					AddVehicleComponent(vehid, 1006);
					return RegularCarDialog(playerid);
				}

			}
			case 3:
			{
			    if(vehmd == 549 || vehmd == 585 || vehmd == 603 || vehmd == 551 || vehmd == 492 || vehmd == 529)
			    {
					AddVehicleComponent(vehid, 1007);
					AddVehicleComponent(vehid, 1071);
					return RegularCarDialog(playerid);
				}
				else if(vehmd == 410 || vehmd == 436 || vehmd == 439 || vehmd == 458 || vehmd == 489 || vehmd == 505)
				{ShowPlayerDialog(playerid,1060,DIALOG_STYLE_LIST,"Lights","Round Fog\nSquare Fog\n{FF0000}Back","Select","Cancel");}
				else if(vehmd == 418 || vehmd == 527 || vehmd == 580 || vehmd == 491 || vehmd == 517 || vehmd == 516)
				{CarmodDialog(playerid);}
				else{ShowPlayerDialog(playerid,1040,DIALOG_STYLE_LIST,"Vents","Oval\nSquare\n{FF0000}Back","Select","Cancel");}
			}
			case 4:
			{
			    if(vehmd == 549 || vehmd == 550 || vehmd == 585 || vehmd == 603)
			    {ShowPlayerDialog(playerid,1060,DIALOG_STYLE_LIST,"Lights","Round Fog\nSquare Fog\n{FF0000}Back","Select","Cancel");}
			    else if(vehmd == 489 || vehmd == 505 || vehmd == 551 || vehmd == 492 || vehmd == 529 || vehmd == 439 || vehmd == 458 || vehmd == 410 || vehmd == 436)
			    {CarmodDialog(playerid);}
			    else
			    {
					AddVehicleComponent(vehid, 1007);
					AddVehicleComponent(vehid, 1071);
					return RegularCarDialog(playerid);
				}
			}
			case 5:
			{
				if(vehmd == 585 || vehmd == 603 || vehmd == 550 || vehmd == 549)
				{CarmodDialog(playerid);}
				else{ShowPlayerDialog(playerid,1060,DIALOG_STYLE_LIST,"Lights","Round Fog\nSquare Fog\n{FF0000}Back","Select","Cancel");}
			}
			case 6: CarmodDialog(playerid);
		}
	}
	if(dialogid == 1010 && response)
	{
		if(listitem == 8) return RegularCarDialog(playerid);
		new Xarray[] = {1000,1001,1002,1003,1014,1015,1016,1023};
		AddVehicleComponent(vehid, Xarray[listitem]);
		return RegularCarDialog(playerid);
	}
	if(dialogid == 1020 && response)
	{
		if(listitem == 4) return RegularCarDialog(playerid);
		new Xarray[] = {1004,1005,1011,1012};
		AddVehicleComponent(vehid, Xarray[listitem]);
		return RegularCarDialog(playerid);
	}
	if(dialogid == 1040 && response)
	{
	    switch(listitem)
	    {
			case 0:
			{
				AddVehicleComponent(vehid, 1142);
				AddVehicleComponent(vehid, 1143);
				return RegularCarDialog(playerid);
			}
			case 1:
			{
				AddVehicleComponent(vehid, 1144);
				AddVehicleComponent(vehid, 1145);
				return RegularCarDialog(playerid);
			}
			case 2: RegularCarDialog(playerid);
		}
	}
	if(dialogid == 1060 && response)
	{
		if(listitem == 2) return RegularCarDialog(playerid);
		new Xarray[] = {1013,1024};
		AddVehicleComponent(vehid, Xarray[listitem]);
		return RegularCarDialog(playerid);
	}
	if(dialogid == 1115 && response)
	{
	    if(listitem == 3) return CarmodDialog(playerid);
		new Parray[] = {0,1,2};
		ChangeVehiclePaintjob(vehid, Parray[listitem]);
		return CarmodDialog(playerid);
	}
	if(dialogid == 1511 && response)
	{
	    if(listitem == 7) return ShowPlayerDialog(playerid,1114,DIALOG_STYLE_LIST,"Choose one","Paintjob\nAlien\nX-Flow\n{FF0000}Back","Select","Cancel");
		if(vehmd == 558)//Uranus
		{
			new Varray[] = {1090,1094,1092,1088,1164,1166,1168};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod(playerid);
		}
		if(vehmd == 559)//Jester
		{
            new Varray[] = {1069,1071,1065,1067,1162,1160,1159};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod(playerid);
		}
		if(vehmd == 560)//Sultan
		{
            new Varray[] = {1026,1027,1028,1032,1138,1169,1141};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod(playerid);
		}
		if(vehmd == 561)//Stratum
		{
            new Varray[] = {1056,1062,1064,1055,1058,1155,1154};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod(playerid);
		}
		if(vehmd == 562)//Elegy
		{
            new Varray[] = {1036,1040,1034,1038,1147,1171,1149};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod(playerid);
		}
		if(vehmd == 565)//Flash
		{
            new Varray[] = {1047,1051,1046,1054,1049,1153,1150};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod(playerid);
		}
	}
	if(dialogid == 1512 && response)
	{
	    if(listitem == 7) return ShowPlayerDialog(playerid,1114,DIALOG_STYLE_LIST,"Choose one","Paintjob\nAlien\nX-Flow\n{FF0000}Back","Select","Cancel");
	    if(vehmd == 558)//Uranus
	    {
            new Varray[] = {1093,1095,1089,1091,1163,1165,1167};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod1(playerid);
		}
	    if(vehmd == 559)//Jester
	    {
            new Varray[] = {1070,1072,1066,1068,1158,1173,1161};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod1(playerid);
		}
	    if(vehmd == 560)//Sultan
	    {
            new Varray[] = {1031,1030,1029,1033,1139,1170,1140};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod1(playerid);
		}
	    if(vehmd == 561)//Stratum
	    {
            new Varray[] = {1057,1063,1059,1061,1060,1157,1156};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod1(playerid);
		}
	    if(vehmd == 562)//Elegy
	    {
            new Varray[] = {1039,1041,1037,1035,1146,1172,1148};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod1(playerid);
		}
	    if(vehmd == 565)//Flash
	    {
            new Varray[] = {1048,1052,1045,1053,1050,1152,1151};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod1(playerid);
		}
	}
	if(dialogid == 1513 && response)
	{
		if(vehmd == 576)
        {
			if(listitem == 5) return Lowrider(playerid);
      		new Varray[] = {1134,1137,1136,1191,1192};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod2(playerid);
		}
		if(vehmd == 575)
		{
			if(listitem == 5) return Lowrider(playerid);
  			new Varray[] = {1042,1099,1044,1174,1176};
			AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod2(playerid);
		}
		if(vehmd == 535)
		{
  			if(listitem == 6) return Lowrider(playerid);
  			new Varray[] = {1115,1109,1113,1117,1118,1120};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod2(playerid);
		}
		if(vehmd == 567)
		{
		    if(listitem == 5) return Lowrider(playerid);
			new Varray[] = {1129,1133,1102,1187,1189};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod2(playerid);
		}
		if(vehmd == 536)
		{
		    if(listitem == 5) return Lowrider(playerid);
			new Varray[] = {1104,1108,1107,1184,1182};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod2(playerid);
		}
		if(vehmd == 534)
		{
		    if(listitem == 6) return Lowrider(playerid);
			new Varray[] = {1100,1123,1125,1126,1179,1180};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod2(playerid);
		}
	}
	if(dialogid == 1514 && response)
	{
		if(vehmd == 576)
		{
		    if(listitem == 3) return Lowrider(playerid);
  			new Varray[] = {1135,1190,1193};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod3(playerid);
		}
		if(vehmd == 575)
		{
		    if(listitem == 3) return Lowrider(playerid);
  			new Varray[] = {1177,1175,1043};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod3(playerid);
		}
		if(vehmd == 535)
		{
		    if(listitem == 5) return Lowrider(playerid);
  			new Varray[] = {1110,1116,1114,1119,1121};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod3(playerid);
		}
  		if(vehmd == 567)
		{
		    if(listitem == 3) return Lowrider(playerid);
			new Varray[] = {1188,1186,1132};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod3(playerid);
		}
		if(vehmd == 536)
		{
		    if(listitem == 3) return Lowrider(playerid);
			new Varray[] = {1181,1183,1105};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod3(playerid);
		}
		if(vehmd == 534)
		{
		    if(listitem == 3) return Lowrider(playerid);
			new Varray[] = {1185,1178,1127};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod3(playerid);
		}
	}
	return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new string[128], idx = gEditID[playerid];
	if(response == EDIT_RESPONSE_UPDATE)
	{
	    SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);
	}
	else if(response == EDIT_RESPONSE_CANCEL)
	{
	    SetDynamicObjectPos(objectid, gPos[playerid][0], gPos[playerid][1], gPos[playerid][2]);
		SetDynamicObjectRot(objectid, gRot[playerid][0], gRot[playerid][1], gRot[playerid][2]);
		gPos[playerid][0] = 0; gPos[playerid][1] = 0; gPos[playerid][2] = 0;
		gRot[playerid][0] = 0; gRot[playerid][1] = 0; gRot[playerid][2] = 0;
		format(string, sizeof(string), " You have canceled editing gate ID %d.", idx);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else if(response == EDIT_RESPONSE_FINAL)
	{
		SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);
		if(gEdit[playerid] == 1)
		{
		    GateInfo[idx][gCX] = x;
			GateInfo[idx][gCY] = y;
			GateInfo[idx][gCZ] = z;
			GateInfo[idx][gCRX] = rx;
			GateInfo[idx][gCRY] = ry;
			GateInfo[idx][gCRZ] = rz;
			if(IsValidDynamic3DTextLabel(GateInfo[idx][gText])) DestroyDynamic3DTextLabel(GateInfo[idx][gText]);
			format(string, sizeof(string), "Gate ID: %d", idx);
			GateInfo[idx][gText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], 10);
		    gEdit[playerid] = 0;
		    gEditID[playerid] = 0;
		    format(string, sizeof(string), " You have finished editing gate ID %d's closing position.", idx);
		    SendClientMessage(playerid, COLOR_WHITE, string);
		    GateInfo[idx][gStatus] = 0;
		}
		else if(gEdit[playerid] == 2)
		{
		    GateInfo[idx][gOX] = x;
			GateInfo[idx][gOY] = y;
			GateInfo[idx][gOZ] = z;
			GateInfo[idx][gORX] = rx;
			GateInfo[idx][gORY] = ry;
			GateInfo[idx][gORZ] = rz;
			gEdit[playerid] = 0;
			gEditID[playerid] = 0;
			format(string, sizeof(string), " You have finished editing gate ID %d's opening position.", idx);
		    SendClientMessage(playerid, COLOR_WHITE, string);
		    GateInfo[idx][gStatus] = 1;
		}
	}
	return 1;
}

////////////////////////////////// STOCKS //////////////////////////////////
stock AntiAdv(playerid, text[])
{
    // Anti Adv
    new strR[255], is1=0, r=0;
 	while(strlen(text[is1]))
 	{
  		if('0'<=text[is1]<='9')
  		{
	 		new is2=is1+1, p=0;
	   		while(p==0)
		  	{
		   		if('0'<=text[is2]<='9'&&strlen(text[is2]))
			   	{
				   is2++;
				}
			 	else
			  	{
				   	strmid(strR[r],text,is1,is2,255);
				   	if(strval(strR[r])<255) r++;
				    is1=is2;
				    p=1;
		    	}
		    }
	    }
    	is1++;
 	}
 	if(r>=4)
 	{
	  	new strMy[255];
	  	format(strMy, sizeof(strMy), "AdmWarn: %s is attempting to Server Advertise: %s", RPN(playerid), text);
	  	SendAdminMessage(COLOR_DARKRED, 1, strMy);
	   	new pr2;
	  	for(new z=0;z<r;z++)
	  	{

		   	while((pr2=strfind(text,strR[z],true))!=-1)
			{
				for(new i=pr2,j=pr2+strlen(strR[z]);i<j;i++)
				{
					text[i]='*';
				}
			}
	  	}
	  	return 1;
 	}
 	return 0;
}

stock IsAtFishingSpot(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 2, 403.8016,-2088.7976,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 398.7358,-2088.7939,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 396.1771,-2088.7976,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 391.0683,-2088.7974,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 383.4282,-2088.7969,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 374.9623,-2088.7974,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 369.8990,-2088.7976,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 367.3003,-2088.7981,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 362.1855,-2088.7974,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 354.5370,-2088.7983,7.8359)) return 1;
	return 0;
}

stock SendRobberyMessage(color, string[])
{
	foreach(Player, playerid)
	{
	    if(BankRobber[playerid])
	    {
	        SendClientMessage(playerid, color, string);
	    }
	}
	return 1;
}

stock IsHoldingBullets(playerid)
{
	if(GetPlayerWeapon(playerid) < 22) return 0;
	if(GetPlayerWeapon(playerid) > 38) return 0;
	return 1;
}

stock SendGymMessage(color, string[])
{
	foreach(Player, playerid)
	{
		if(GetPlayerInterior(playerid) == 5 && GetPlayerVirtualWorld(playerid) == 1)
		{
		    SendClientMessage(playerid, color, string);
		}
	}
	return 1;
}

stock CreateStrip(Float:x,Float:y,Float:z,Float:Angle)
{
    for(new i = 0; i < sizeof(SpikeInfo); i++)
  	{
  	    if(SpikeInfo[i][sCreated] == 0)
  	    {
            SpikeInfo[i][sCreated]=1;
            SpikeInfo[i][sX]=x;
            SpikeInfo[i][sY]=y;
            SpikeInfo[i][sZ]=z-0.7;
            SpikeInfo[i][sObject] = CreateDynamicObject(2899, x, y, z-0.9, 0, 0, Angle-90);
	        return 1;
  	    }
  	}
  	return 0;
}

stock DeleteAllStrip()
{
    for(new i = 0; i < sizeof(SpikeInfo); i++)
  	{
  	    if(SpikeInfo[i][sCreated] == 1)
  	    {
  	        SpikeInfo[i][sCreated]=0;
            SpikeInfo[i][sX]=0.0;
            SpikeInfo[i][sY]=0.0;
            SpikeInfo[i][sZ]=0.0;
            DestroyDynamicObject(SpikeInfo[i][sObject]);
  	    }
	}
    return 1;
}

stock DeleteClosestStrip(playerid)
{
	new done, string[128];
    for(new i = 0; i < sizeof(SpikeInfo); i++)
  	{
  	    if(IsPlayerInRangeOfPoint(playerid, 2.0, SpikeInfo[i][sX], SpikeInfo[i][sY], SpikeInfo[i][sZ]))
        {
  	        if(SpikeInfo[i][sCreated] == 1)
            {
                SpikeInfo[i][sCreated]=0;
                SpikeInfo[i][sX]=0.0;
                SpikeInfo[i][sY]=0.0;
                SpikeInfo[i][sZ]=0.0;
                DestroyDynamicObject(SpikeInfo[i][sObject]);
                format(string, sizeof(string), "SAPD: %s has removed a spike strip.", RPN(playerid));
 				SendCopMessage(COLOR_BLUE, string);
 				done = 1;
  	        }
  	    }
  	}
  	if(!done) SendClientMessage(playerid, COLOR_GREY, "You are not near a spike strip.");
    return 1;
}

encode_tires(tires1, tires2, tires3, tires4) {

	return tires1 | (tires2 << 1) | (tires3 << 2) | (tires4 << 3);

}

stock IsATowTruck(carid)
{
	if(GetVehicleModel(carid) == 485 || GetVehicleModel(carid) == 525 || GetVehicleModel(carid) == 583 || GetVehicleModel(carid) == 574)
	{
		return 1;
	}
	return 0;
}
stock GetNumberOfPlayersOnThisIP(test_ip[])
{
	new against_ip[32+1];
	new x = 0;
	new ip_count = 0;
	for(x=0; x<MAX_PLAYERS; x++) {
		if(IsPlayerConnected(x)) {
		    GetPlayerIp(x,against_ip,32);
		    if(!strcmp(against_ip,test_ip)) ip_count++;
		}
	}
	return ip_count;
}

stock AntiTPCheck(playerid)
{
	if(AntiTP[playerid])
	{
	    new string[128];
		format(string, sizeof(string), "AdmCmd: %s has been autobanned, reason: TP Hacks", RPN(playerid));
        SendClientMessageToAll(COLOR_LIGHTRED, string);
        Log("logs/ban.log", string);
		// Banreason
		new file[32];
		format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
		dini_Set(file, "BanReason", "TP Hacks");
		dini_Set(file, "BannedBy", "AutoBan");
		PlayerInfo[playerid][pBanned] = 1;
		AddBan(playerid);
		Kick(playerid);
	}
	return 1;
}
stock SaveMOTDS()
{
	new file[16];
	format(file, sizeof(file), "motds.cfg");
	if(!dini_Exists(file)) dini_Create(file);
	dini_Set(file, "Server", ServerMOTD);
	dini_Set(file, "SAPD", SAPDMOTD);
	dini_Set(file, "GOV", GOVMOTD);
	dini_Set(file, "HA", HAMOTD);
	dini_Set(file, "Admin", AdminMOTD);
	print("MOTDs saved successfully.");
}
stock LoadMOTDS()
{
	new file[16];
	format(file, sizeof(file), "motds.cfg");
	format(ServerMOTD, 128, "%s", dini_Get(file, "Server"));
	format(SAPDMOTD, 128, "%s", dini_Get(file, "SAPD"));
	format(GOVMOTD, 128, "%s", dini_Get(file, "GOV"));
	format(HAMOTD, 128, "%s", dini_Get(file, "HA"));
	format(AdminMOTD, 128, "%s", dini_Get(file, "Admin"));
	print("MOTDs loaded successfully.");
}
stock LoadDrugs()
{
	new file[32];
	format(file, sizeof(file), "drugs.cfg");
	if(!dini_Exists(file)) dini_Create(file);
	Weed = dini_Int(file, "Weed");
	Crack = dini_Int(file, "Crack");
	print("Drugs loaded successfully.");
	return 1;
}
stock SaveDrugs()
{
	new file[32];
	format(file, sizeof(file), "drugs.cfg");
	if(!dini_Exists(file)) dini_Create(file);
	dini_IntSet(file, "Weed", Weed);
	dini_IntSet(file, "Crack", Crack);
	print("Drugs saved successfully.");
	return 1;
}

stock LoadProducts()
{
	new file[32];
	format(file, sizeof(file), "products.cfg");
	if(!dini_Exists(file)) dini_Create(file);
	Products = dini_Int(file, "Products");
	print("Products loaded successfully.");
	return 1;
}
stock SaveProducts()
{
	new file[32];
	format(file, sizeof(file), "products.cfg");
	if(!dini_Exists(file)) dini_Create(file);
	dini_IntSet(file, "Products", Products);
	print("Products saved successfully.");
	return 1;
}

stock LoadStaticVehicles()
{
    // DMV Vehicles
	DMVCar[0] = CreateVehicle(404,2052.8206,-1903.9745,13.3249,359.6511-180,6,1,300); // Car1
	DMVCar[1] = CreateVehicle(404,2056.1641,-1903.9946,13.3470,359.6512-180,6,1,300); // Car2
	DMVCar[2] = CreateVehicle(404,2059.3220,-1904.0138,13.3470,359.6512-180,6,1,300); // Car3
	DMVCar[3] = CreateVehicle(404,2062.5098,-1904.0331,13.3470,359.6512-180,6,1,300); // Car4
	DMVCar[4] = CreateVehicle(404,2065.6597,-1904.0526,13.3470,359.6512-180,6,1,300); // Car5

	// Police Vehicles
	FacInfo[1][fCars][0] = CreateVehicle(596,1601.9502,-1683.9442,5.5580,90.0662,0,1,1200); // Crusier1
	FacInfo[1][fCars][1] = CreateVehicle(596,1601.9349,-1688.1353,5.5585,89.8182,0,1,1200); // Crusier2
	FacInfo[1][fCars][2] = CreateVehicle(596,1602.0319,-1691.9169,5.5580,90.1704,0,1,1200); // Crusier3
	FacInfo[1][fCars][3] = CreateVehicle(596,1602.1292,-1695.9916,5.5580,88.9515,0,1,1200); // Crusier4
	FacInfo[1][fCars][4] = CreateVehicle(596,1602.1547,-1700.2701,5.5580,89.4748,0,1,1200); // Crusier5
	FacInfo[1][fCars][5] = CreateVehicle(596,1602.0511,-1704.3525,5.5580,88.4754,0,1,1200); // Crusier6
	FacInfo[1][fCars][6] = CreateVehicle(599,1585.2120,-1667.6892,6.1291,270.2057,0,1,1200); // Ranger1
	FacInfo[1][fCars][7] = CreateVehicle(599,1585.1547,-1671.9965,6.1323,271.1247,0,1,1200); // Ranger2
	FacInfo[1][fCars][8] = CreateVehicle(523,1530.0715,-1688.0465,5.4559,267.5331,1,0,1200); // Bike1
	FacInfo[1][fCars][9] = CreateVehicle(523,1526.7520,-1688.0627,5.4582,268.2188,1,0,1200); // Bike2
	FacInfo[1][fCars][10] = CreateVehicle(523,1529.9504,-1683.8184,5.4578,271.5452,1,0,1200); // Bike3
	FacInfo[1][fCars][11] = CreateVehicle(523,1526.6595,-1683.8164,5.4625,271.1716,1,0,1200); // Bike4
	FacInfo[1][fCars][12] = CreateVehicle(411,1545.3519,-1680.2714,5.6263,88.9375,0,1,1200); // Speed1Infernus
	FacInfo[1][fCars][13] = CreateVehicle(411,1545.3575,-1676.2065,5.6263,90.4601,0,1,1200); // Speed2Infernus
	FacInfo[1][fCars][14] = CreateVehicle(541,1545.1260,-1672.0992,5.5249,90.8087,0,1,1200); // Speed3Bullet
	FacInfo[1][fCars][15] = CreateVehicle(541,1545.1002,-1667.9021,5.5249,90.8901,0,1,1200); // Speed4Bullet
	FacInfo[1][fCars][16] = CreateVehicle(601,1545.0055,-1662.9552,5.6769,88.8576,0,0,1200); // Splashy1
	FacInfo[1][fCars][17] = CreateVehicle(601,1544.9072,-1658.9329,5.6780,88.7145,0,0,1200); // Splashy2
	FacInfo[1][fCars][18] = CreateVehicle(601,1545.0282,-1655.0873,5.6767,89.4033,0,0,1200); // Splashy3
	FacInfo[1][fCars][19] = CreateVehicle(601,1545.0804,-1651.2063,5.6920,90.5362,0,0,1200); // Splashy4
	FacInfo[1][fCars][20] = CreateVehicle(427,1538.9954,-1644.9917,6.0463,180.4178,0,1,1200); // Enforcer1
	FacInfo[1][fCars][21] = CreateVehicle(427,1534.8733,-1644.9760,6.0481,179.3436,0,1,1200); // Enforcer2
	FacInfo[1][fCars][22] = CreateVehicle(427,1531.0992,-1645.0317,6.0463,179.9259,0,1,1200); // Enforcer3
	FacInfo[1][fCars][23] = CreateVehicle(427,1526.8904,-1645.1100,6.0463,180.7001,0,1,1200); // Enforcer4
	FacInfo[1][fCars][24] = CreateVehicle(497,1550.4070,-1707.7499,28.6315,90.2970,0,1,1200); // MAV 1
	FacInfo[1][fCars][25] = CreateVehicle(497,1550.4070,-1644.1296,28.6315,90.2970,0,1,1200); // MAV 2
	for(new i=16; i < 24; i++) // Splashy & Enforcer can't be blown up
	{
	    SetVehicleHealth(FacInfo[1][fCars][i], 9999999);
	}
	// Trucker Vehicles
	JobInfo[JOB_TRUCKER][jCars][0] = CreateVehicle(403,1689.8835,2317.8638,11.4135,269.8633,0,0,1200); // Truck 1
	JobInfo[JOB_TRUCKER][jCars][1] = CreateVehicle(403,1689.8956,2322.3589,11.4548,269.8634,0,0,1200); // Truck 2
	JobInfo[JOB_TRUCKER][jCars][2] = CreateVehicle(403,1689.9127,2329.4316,11.4422,269.8634,0,0,1200); // Truck 3
	JobInfo[JOB_TRUCKER][jCars][3] = CreateVehicle(403,1689.9270,2335.4407,11.4316,269.8634,0,0,1200); // Truck 4
	JobInfo[JOB_TRUCKER][jCars][4] = CreateVehicle(403,1689.9513,2345.5820,11.4135,269.8634,0,0,1200); // Truck 5
	JobInfo[JOB_TRUCKER][jCars][5] = CreateVehicle(403,1689.9634,2350.6553,11.4045,269.8634,0,0,1200); // Truck 6
	JobInfo[JOB_TRUCKER][jCars][6] = CreateVehicle(403,1689.9780,2356.7107,11.3938,269.8634,0,0,1200); // Truck 7
	JobInfo[JOB_TRUCKER][jCars][7] = CreateVehicle(403,1689.9921,2362.5903,11.3833,269.8634,0,0,1200); // Truck 8
	JobInfo[JOB_TRUCKER][jCars][8] = CreateVehicle(403,1690.0057,2368.3911,11.3730,269.8634,0,0,1200); // Truck 9

	JobInfo[JOB_TRUCKER][jTrailers][0] = CreateVehicle(591,1681.1849,2317.3940,11.4272,270.1179,0,0,1200); // Trailer1
	JobInfo[JOB_TRUCKER][jTrailers][1] = CreateVehicle(591,1681.1752,2322.2817,11.4272,270.1179,0,0,1200); // Trailer2
	JobInfo[JOB_TRUCKER][jTrailers][2] = CreateVehicle(591,1681.1609,2329.4038,11.4273,270.1179,0,0,1200); // Trailer3
	JobInfo[JOB_TRUCKER][jTrailers][3] = CreateVehicle(591,1681.1484,2335.4326,11.4273,270.1179,0,0,1200); // Trailer4
	JobInfo[JOB_TRUCKER][jTrailers][4] = CreateVehicle(591,1681.1273,2345.6333,11.4274,270.1179,0,0,1200); // Trailer5
	JobInfo[JOB_TRUCKER][jTrailers][5] = CreateVehicle(591,1681.1165,2350.6311,11.4275,270.1179,0,0,1200); // Trailer6
	JobInfo[JOB_TRUCKER][jTrailers][6] = CreateVehicle(591,1681.1041,2356.6460,11.4275,270.1179,0,0,1200); // Trailer7
	JobInfo[JOB_TRUCKER][jTrailers][7] = CreateVehicle(591,1681.0917,2362.5952,11.4276,270.1179,0,0,1200); // Trailer8
	JobInfo[JOB_TRUCKER][jTrailers][8] = CreateVehicle(591,1681.0798,2368.3921,11.4276,270.1179,0,0,1200); // Trailer9


	// Government Vehicles
	FacInfo[2][fCars][0] = CreateVehicle(507,1454.8049,-1749.6432,13.4354,359.8442,0,0,1200); // Gov 1
	FacInfo[2][fCars][1] = CreateVehicle(507,1507.4797,-1749.7860,13.4354,359.8442,0,0,1200); // Gov 2

	// SA News Vehicles
	FacInfo[4][fCars][0] = CreateVehicle(582,770.3323,-1334.0879,13.5999,178.7927,1,6,1200); // News1
	FacInfo[4][fCars][1] = CreateVehicle(582,765.2671,-1333.9707,13.6022,178.8279,1,6,1200); // News2
	FacInfo[4][fCars][2] = CreateVehicle(582,760.0087,-1333.8882,13.5979,178.7898,1,6,1200); // News3
	FacInfo[4][fCars][3] = CreateVehicle(582,754.6099,-1333.7980,13.5991,180.2735,1,6,1200); // News4
	FacInfo[4][fCars][4] = CreateVehicle(582,749.0009,-1333.7161,13.5978,180.0546,1,6,1200); // News5
	FacInfo[4][fCars][5] = CreateVehicle(582,743.3420,-1333.6884,13.5983,180.0397,1,6,1200); // News6
	FacInfo[4][fCars][6] = CreateVehicle(488,743.7799,-1365.5004,25.8675,270.3967,1,6,1200); // News7
	FacInfo[4][fCars][7] = CreateVehicle(488,736.9495,-1376.4574,25.8464,182.8519,1,6,1200); // News8

	CreateVehicle(413,2297.30004883,-1629.40002441,14.69999981,266.25000000,-1,-1,1200); //Pony
	CreateVehicle(482,2297.10009766,-1633.80004883,15.00000000,270.00000000,-1,-1,1200); //Burrito
	CreateVehicle(600,2297.39990234,-1638.80004883,14.60000038,88.50000000,-1,-1,1200); //Picador
	CreateVehicle(543,2297.39990234,-1643.59997559,14.69999981,270.00000000,-1,-1,1200); //Sadler
	CreateVehicle(436,2293.69995117,-1684.00000000,13.69999981,0.00000000,-1,-1,1200); //Previon
	CreateVehicle(436,2290.00000000,-1684.00000000,13.69999981,0.74523926,-1,-1,1200); //Previon
	CreateVehicle(474,2284.10009766,-1683.80004883,13.89999962,180.00000000,-1,-1,1200); //Hermes
	CreateVehicle(491,2280.30004883,-1683.40002441,14.00000000,0.00000000,-1,-1,1200); //Virgo
	CreateVehicle(526,2294.10009766,-1673.90002441,14.39999962,359.25000000,-1,-1,1200); //Fortune
	CreateVehicle(527,2182.89990234,-1690.80004883,13.39999962,177.74993896,-1,-1,1200); //Cadrona
	CreateVehicle(439,2182.19995117,-1700.40002441,13.50000000,176.99993896,-1,-1,1200); //Stallion
	CreateVehicle(475,2188.89990234,-1660.59997559,14.80000019,167.24987793,-1,-1,1200); //Sabre
	CreateVehicle(542,2122.30004883,-1782.69995117,13.19999981,0.75000000,-1,-1,1200); //Clover
	CreateVehicle(412,2117.30004883,-1782.19995117,13.30000019,0.75000000,-1,-1,1200); //Voodoo
	CreateVehicle(536,2104.30004883,-1782.69995117,13.19999981,358.50000000,-1,-1,1200); //Blade
	CreateVehicle(426,2108.39990234,-1783.40002441,13.19999981,177.74993896,-1,-1,1200); //Premier
	CreateVehicle(445,2095.50000000,-1792.80004883,13.39999962,90.00000000,-1,-1,1200); //Admiral
	CreateVehicle(466,2095.80004883,-1797.00000000,13.30000019,270.00000000,-1,-1,1200); //Glendale
	CreateVehicle(492,2095.80004883,-1813.40002441,13.30000019,89.25000000,-1,-1,1200); //Greenwood
	CreateVehicle(516,2095.69995117,-1816.69995117,13.30000019,269.25000000,-1,-1,1200); //Nebula
	CreateVehicle(546,2095.69995117,-1820.00000000,13.19999981,90.00000000,-1,-1,1200); //Intruder
	CreateVehicle(525,1929.09997559,-1788.90002441,13.39999962,270.00000000,-1,-1,1200); //Tow Truck
	CreateVehicle(515,1945.90002441,-1790.50000000,14.39999962,270.00000000,-1,-1,1200); //Roadtrain
	CreateVehicle(518,1841.09997559,-1871.09997559,13.19999981,0.00000000,-1,-1,1200); //Buccaneer
	CreateVehicle(567,1834.90002441,-1870.90002441,13.39999962,0.00000000,-1,-1,1200); //Savanna
	CreateVehicle(405,1836.40002441,-1853.59997559,13.39999962,0.00000000,-1,-1,1200); //Sentinel
	CreateVehicle(405,1839.59997559,-1853.50000000,13.39999962,0.00000000,-1,-1,1200); //Sentinel
	CreateVehicle(445,1606.90002441,-1644.90002441,13.50000000,88.50000000,-1,-1,1200); //Admiral
	CreateVehicle(466,1607.19995117,-1648.30004883,13.50000000,90.00000000,-1,-1,1200); //Glendale
	CreateVehicle(466,1607.19995117,-1651.50000000,13.50000000,90.00000000,-1,-1,1200); //Glendale
	CreateVehicle(440,1625.40002441,-1697.19995117,13.60000038,1.50000000,-1,-1,1200); //Rumpo
	CreateVehicle(482,1361.19995117,-1650.80004883,13.60000038,91.50000000,-1,-1,1200); //Burrito
	CreateVehicle(526,1361.00000000,-1643.40002441,13.19999981,270.00000000,-1,-1,1200); //Fortune
	CreateVehicle(533,1015.79998779,-1367.50000000,13.19999981,90.00000000,-1,-1,1200); //Feltzer
	CreateVehicle(545,1016.29998779,-1364.09997559,13.30000019,270.00000000,-1,-1,1200); //Hustler
	CreateVehicle(545,1016.29998779,-1361.40002441,13.30000019,270.00000000,-1,-1,1200); //Hustler
	CreateVehicle(439,990.40002441,-1351.19995117,13.39999962,0.00000000,-1,-1,1200); //Stallion
	CreateVehicle(412,987.59997559,-1306.09997559,13.30000019,0.00000000,-1,-1,1200); //Voodoo
	CreateVehicle(412,991.59997559,-1305.80004883,13.30000019,0.00000000,-1,-1,1200); //Voodoo
	CreateVehicle(412,997.70001221,-1306.80004883,13.30000019,180.00000000,-1,-1,1200); //Voodoo
	CreateVehicle(534,883.70001221,-1669.00000000,13.39999962,0.00000000,-1,-1,1200); //Remington
	CreateVehicle(534,870.50000000,-1669.30004883,13.39999962,0.00000000,-1,-1,1200); //Remington
	CreateVehicle(534,888.29998779,-1658.19995117,13.39999962,0.00000000,-1,-1,1200); //Remington
	CreateVehicle(535,892.70001221,-1669.09997559,13.39999962,0.00000000,-1,-1,1200); //Slamvan
	CreateVehicle(535,879.70001221,-1657.59997559,13.39999962,0.00000000,-1,-1,1200); //Slamvan
	CreateVehicle(405,879.50000000,-1678.09997559,13.50000000,0.00000000,-1,-1,1200); //Sentinel
	CreateVehicle(405,888.20001221,-1678.19995117,13.50000000,0.00000000,-1,-1,1200); //Sentinel
	CreateVehicle(550,2106.39990234,-1782.80004883,13.30000019,177.99493408,-1,-1,1200); //Sunrise
	CreateVehicle(550,2119.80004883,-1782.90002441,13.30000019,177.98950195,-1,-1,1200); //Sunrise
	CreateVehicle(445,2115.80004883,-1783.09997559,13.39999962,180.00000000,-1,-1,1200); //Admiral
	//CreateVehicle(536,2065.50000000,-1904.80004883,13.39999962,0.00000000,-1,-1,1200); //Blade
	//CreateVehicle(536,2052.89941406,-1904.50000000,13.39999962,0.00000000,-1,-1,1200); //Blade
	//CreateVehicle(521,2062.19995117,-1904.59997559,13.19999981,0.00000000,-1,-1,1200); //FCR-900
	//CreateVehicle(521,2055.89941406,-1904.19921875,13.19999981,0.00000000,-1,-1,1200); //FCR-900
	//CreateVehicle(536,2059.19921875,-1904.69921875,13.39999962,0.00000000,-1,-1,1200); //Blade
	CreateVehicle(400,1012.79998779,-1368.50000000,13.50000000,0.00000000,-1,-1,1200); //Landstalker
	CreateVehicle(400,1009.40002441,-1368.50000000,13.50000000,0.00000000,-1,-1,1200); //Landstalker
	CreateVehicle(541,311.60000610,-1808.40002441,4.19999981,0.00000000,-1,-1,1200); //Bullet
	CreateVehicle(506,324.20001221,-1789.19995117,4.59999990,0.00000000,-1,-1,1200); //Super GT
	CreateVehicle(424,422.60000610,-1792.50000000,5.40000010,270.00000000,-1,-1,1200); //BF Injection
	CreateVehicle(424,422.79980469,-1803.79980469,5.40000010,270.00000000,-1,-1,1200); //BF Injection
	CreateVehicle(424,422.59960938,-1799.69921875,5.40000010,270.00000000,-1,-1,1200); //BF Injection
	CreateVehicle(424,422.59960938,-1796.09960938,5.40000010,270.00000000,-1,-1,1200); //BF Injection
	CreateVehicle(421,200.19999695,-1440.40002441,13.10000038,318.00000000,-1,-1,1200); //Washington
	CreateVehicle(421,210.00000000,-1421.09960938,13.30000019,313.99475098,-1,-1,1200); //Washington
	CreateVehicle(421,214.29980469,-1425.39941406,13.30000019,313.99475098,-1,-1,1200); //Washington
	CreateVehicle(411,1316.00000000,-874.20001221,39.40000153,0.00000000,-1,-1,1200); //Infernus
	CreateVehicle(411,1309.39941406,-874.09960938,39.40000153,0.00000000,-1,-1,1200); //Infernus
	CreateVehicle(411,1312.89941406,-874.29980469,39.40000153,0.00000000,-1,-1,1200); //Infernus
	CreateVehicle(519,1617.59997559,-2626.30004883,14.50000000,0.00000000,-1,-1,1200); //Shamal
	CreateVehicle(519,1755.00000000,-2628.30004883,14.50000000,0.00000000,-1,-1,1200); //Shamal
	CreateVehicle(519,1889.59997559,-2627.39990234,14.50000000,0.00000000,-1,-1,1200); //Shamal
	CreateVehicle(553,1822.90002441,-2630.39990234,15.80000019,0.00000000,-1,-1,1200); //Nevada
	CreateVehicle(553,1682.00000000,-2628.80004883,15.80000019,0.00000000,-1,-1,1200); //Nevada
	CreateVehicle(487,1940.19995117,-2632.60009766,13.80000019,0.00000000,-1,-1,1200); //Maverick
	CreateVehicle(487,1954.09997559,-2633.10009766,13.80000019,0.00000000,-1,-1,1200); //Maverick
	CreateVehicle(487,1966.40002441,-2633.60009766,13.80000019,0.00000000,-1,-1,1200); //Maverick
	CreateVehicle(487,1979.00000000,-2633.60009766,13.80000019,0.00000000,-1,-1,1200); //Maverick
	CreateVehicle(511,1989.19995117,-2381.89990234,15.10000038,90.00000000,-1,-1,1200); //Beagle
	CreateVehicle(511,1993.69995117,-2315.80004883,15.10000038,90.00000000,-1,-1,1200); //Beagle
	CreateVehicle(513,1999.40002441,-2238.30004883,14.30000019,90.00000000,-1,-1,1200); //Stunt
	CreateVehicle(513,1999.90002441,-2265.10009766,14.30000019,90.00000000,-1,-1,1200); //Stunt
	CreateVehicle(513,1999.69995117,-2251.30004883,14.30000019,90.00000000,-1,-1,1200); //Stunt

	print("Static vehicles loaded.");
	return 1;
}
stock LoadObjects() // Objects
{
	// SA-MP
	CreateObject(18750, 1975.203002, 3779.311523, -0.243506, 0.000000, 0.000000, -45.00000);
	// Rest
	SAPDLobby[0] = CreateDynamicObject(14819, 246.4050, 72.3000, 1003.6700, 0.0000, 0.0000, 180.0000); // SAPD Lobby Door Left
	SAPDLobby[1] = CreateDynamicObject(14819, 246.4050, 72.5750, 1003.6650, 0.0000, 0.0000, 0.0000); // SAPD Lobby Door Right
	SAPDLobby[2] = CreateDynamicObject(13360, 246.9850, 72.4500, 1003.7000, 0.0000, 0.0000, 180.0000); // SAPD Lobby Door Left Block
	SAPDLobby[3] = CreateDynamicObject(13360, 245.8330, 72.4500, 1003.7000, 0.0000, 0.0000, 180.0000); // SAPD Lobby Door Right Block

	SAPDCells[0] = CreateDynamicObject(14819,259.105194,90.812126,1002.584350,0.000000,0.000000,-90.000000); // SAPD Cells Door Left
	SAPDCells[1] = CreateDynamicObject(14819,258.843353,90.840599,1002.584350,0.000000,0.000000,91.000000); // SAPD Cells Door Right
	SAPDCells[2] = CreateDynamicObject(13360,258.949157,91.412040,1002.528625,0.000000,0.000000,-90.000000); // SAPD Cells Door Left Block
	SAPDCells[3] = CreateDynamicObject(13360,258.949157,90.292076,1002.528625,0.000000,0.000000,90.000000); // SAPD Cells Door Right Block

	SAPDBarrier = CreateDynamicObject(968, 1544.6943359375, -1630.73046875, 13.27956199646, 0.000000, 90, 90); // SAPD Barrier
	SAPDGate =  CreateDynamicObject(971, 1588.6428222656, -1638.02734375, 15.240161895752, 0, 0, 181.03271484375); // SAPD Gate

	SAPDOffice[0] = CreateDynamicObject(13360,255.494674,85.290985,1002.445312,0.000000,0.000000,0.000000); // SAPD Office Door Left
	SAPDOffice[1] = CreateDynamicObject(13360,254.380661,85.286033,1002.445312,0.000000,0.000000,180.000000); // SAPD Office Door Right

	SAPDChief[0] = CreateDynamicObject(14819,222.281802,69.786598,1005.079895,0.000000,0.000000,-90.000000);// Chief's Door Right
	SAPDChief[1] = CreateDynamicObject(14819,222.002853,69.801109,1005.079895,0.000000,0.000000,-270.000000);// Chief's Door Left
	SAPDChief[2] = CreateDynamicObject(13360,222.120773,70.343833,1005.128601,0.000000,0.000000,-90.000000); // Chief's Block Right
	SAPDChief[3] = CreateDynamicObject(13360,222.120773,69.220504,1005.128601,0.000000,0.000000,-270.000000); // Chief's Block Left

	// Bank Vault
	BankVault = CreateDynamicObject(2634, 2242.202148, 1631.861694, 961.833129, 0.000000, 0.000000, 9.799999);

	// NA HQ
	SAGate1 = CreateDynamicObject(975, 777.457580, -1384.939453, 14.392275, 0.000000, 0.000000, -179.999908);
	SAGate2 = CreateDynamicObject(975, 778.548583, -1330.212890, 14.167037, 0.000000, 0.000000, -1.800000);

    CreateDynamicObject(1522, 731.941955, -1358.044311, 22.105916, 0.000000, 0.000000, -90.100074);
	CreateDynamicObject(14488, 1211.8000488281, -760.20001220703, 1074.3000488281, 0, 0, 0);
	CreateDynamicObject(6874, 1212.4000244141, -754.70001220703, 1055.0999755859, 0, 0, 269.83056640625);
	CreateDynamicObject(1537, 1218.5999755859, -770.79998779297, 1072, 0, 0, 181.02136230469);
	CreateDynamicObject(1294, 1217.1909179688, -770.755859375, 1076.2299804688, 0, 0, 0);
	CreateDynamicObject(2395, 1218.4000244141, -749.40002441406, 1072.1999511719, 0, 0, 270.22546386719);
	CreateDynamicObject(2395, 1218.4000244141, -753.09997558594, 1072.1999511719, 0, 0, 270.22521972656);
	CreateDynamicObject(2395, 1218.8000488281, -756.70001220703, 1072.1999511719, 0, 0, 317.83325195313);
	CreateDynamicObject(2395, 1221.6999511719, -758.90002441406, 1072.1999511719, 0, 0, 355.91711425781);
	CreateDynamicObject(2395, 1218.8000488281, -756.70001220703, 1074.9399414063, 0, 0, 317.82897949219);
	CreateDynamicObject(2395, 1221.6999511719, -758.90002441406, 1074.9399414063, 0, 0, 355.9130859375);
	CreateDynamicObject(2395, 1218.4000244141, -753.09997558594, 1074.9399414063, 0, 0, 270.22521972656);
	CreateDynamicObject(2395, 1218.4000244141, -749.40002441406, 1074.9300537109, 0, 0, 270.22521972656);
	CreateDynamicObject(2796, 1219.9000244141, -757.59997558594, 1074.8000488281, 0, 0, 317.83337402344);
	CreateDynamicObject(1536, 1219.1999511719, -757, 1072, 0, 0, 317.83337402344);
	CreateDynamicObject(627, 1218.4000244141, -757.20001220703, 1074, 0, 0, 0);
	CreateDynamicObject(627, 1220.1999511719, -758.90002441406, 1074, 0, 0, 0);
	CreateDynamicObject(627, 1218, -749.5, 1074, 0, 0, 77.531341552734);
	CreateDynamicObject(1533, 1218.4000244141, -750.70001220703, 1072.1999511719, 0, 0, 268.865234375);
	CreateDynamicObject(1533, 1218.4000244141, -752.20001220703, 1072.1999511719, 0, 0, 268.86291503906);
	CreateDynamicObject(627, 1217.8000488281, -754.5, 1074, 0, 0, 77.530517578125);
	CreateDynamicObject(16151, 1221.1999511719, -764.5, 1072.5, 0, 0, 0);
	CreateDynamicObject(1775, 1222.1999511719, -765.90002441406, 1073.3000488281, 0, 0, 270.22546386719);
	CreateDynamicObject(1491, 1221.1999511719, -768.10009765625, 1070.6199951172, 0, 0, 0);
	CreateDynamicObject(2773, 1215.9000244141, -765.79998779297, 1072.5, 0, 0, 272.94592285156);
	CreateDynamicObject(2773, 1214.3000488281, -766.70001220703, 1072.5, 0, 0, 324.63220214844);
	CreateDynamicObject(2773, 1213.5, -768.5, 1072.5, 0, 0, 345.03283691406);
	CreateDynamicObject(2773, 1214.0999755859, -770, 1072.5, 0, 0, 59.842254638672);
	CreateDynamicObject(1432, 1216.0999755859, -769.29998779297, 1072.1999511719, 0, 0, 353.19897460938);
	CreateDynamicObject(1432, 1215.6999511719, -767.20001220703, 1072.1999511719, 0, 0, 5.4357604980469);
	CreateDynamicObject(1361, 1216.5999755859, -764.90002441406, 1072.9000244141, 0, 0, 0);
	CreateDynamicObject(1361, 1213.4000244141, -767.40002441406, 1072.9000244141, 0, 0, 0);
	CreateDynamicObject(1361, 1213, -769.5, 1072.9000244141, 0, 0, 0);
	CreateDynamicObject(1361, 1214.5, -765.5, 1072.9000244141, 0, 0, 0);
	CreateDynamicObject(630, 1217.9000244141, -755.29998779297, 1073.1999511719, 0, 0, 0);
	CreateDynamicObject(630, 1217.9000244141, -756, 1073.1999511719, 0, 0, 0);
	CreateDynamicObject(630, 1218.1999511719, -756.5, 1073.1999511719, 0, 0, 0);
	CreateDynamicObject(630, 1218, -750.29998779297, 1073.1999511719, 0, 0, 0);
	CreateDynamicObject(630, 1217.6999511719, -753.70001220703, 1073.1999511719, 0, 0, 0);
	CreateDynamicObject(630, 1220.8000488281, -759.20001220703, 1073.1999511719, 0, 0, 0);
	CreateDynamicObject(630, 1221.5999755859, -759.29998779297, 1073.1999511719, 0, 0, 0);
	CreateDynamicObject(630, 1216.8000488281, -764.90002441406, 1073.1999511719, 0, 0, 0);
	CreateDynamicObject(630, 1214.5999755859, -765.5, 1073.1999511719, 0, 0, 0);
	CreateDynamicObject(630, 1213.5, -767.40002441406, 1073.1999511719, 0, 0, 0);
	CreateDynamicObject(630, 1213, -769.40002441406, 1073.1999511719, 0, 0, 0);
	CreateDynamicObject(638, 1210.5999755859, -770.19995117188, 1072.9000244141, 0, 0, 270.22546386719);
	CreateDynamicObject(638, 1207.4000244141, -770.20001220703, 1072.9000244141, 0, 0, 270.22521972656);
	CreateDynamicObject(638, 1204.1999511719, -770.20001220703, 1072.9000244141, 0, 0, 270.22314453125);
	CreateDynamicObject(1544, 1216.4000244141, -769.70001220703, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1544, 1216.3000488281, -769.59997558594, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1544, 1216, -768.79998779297, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1544, 1215.9000244141, -769, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1544, 1215.8000488281, -768.90002441406, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1543, 1216.4000244141, -769.5, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1543, 1215.8000488281, -769, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1543, 1215.9000244141, -768.79998779297, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1543, 1216.0999755859, -768.70001220703, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1520, 1216.0999755859, -769.70001220703, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1520, 1216, -769.79998779297, 1072.8000488281, 0, 0, 36.725372314453);
	CreateDynamicObject(1541, 1221.8000488281, -767.09997558594, 1074.1999511719, 0, 0, 88.413055419922);
	CreateDynamicObject(1542, 1222, -767.09997558594, 1073.5, 0, 0, 93.397888183594);
	CreateDynamicObject(1542, 1222, -767.09997558594, 1073.1999511719, 0, 0, 93.394775390625);
	CreateDynamicObject(1512, 1216, -769.29998779297, 1073, 0, 0, 36.725372314453);
	CreateDynamicObject(1512, 1216.0999755859, -769.09997558594, 1073, 0, 0, 321.91046142578);
	CreateDynamicObject(1512, 1215.4000244141, -766.90002441406, 1073, 0, 0, 13.602111816406);
	CreateDynamicObject(1512, 1215.5, -767, 1073, 0, 0, 340.9560546875);
	CreateDynamicObject(1520, 1215.4000244141, -767.09997558594, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1520, 1215.1999511719, -767, 1072.8000488281, 0, 0, 334.15606689453);
	CreateDynamicObject(1486, 1216.1999511719, -767.29998779297, 1073, 0, 0, 0);
	CreateDynamicObject(1486, 1216.0999755859, -767.40002441406, 1073, 0, 0, 0);
	CreateDynamicObject(1486, 1216.1999511719, -767.40002441406, 1073, 0, 0, 0);
	CreateDynamicObject(1486, 1215.4000244141, -767.70001220703, 1073, 0, 0, 0);
	CreateDynamicObject(1486, 1215.4000244141, -767.59997558594, 1073, 0, 0, 0);
	CreateDynamicObject(1486, 1215.3000488281, -767.70001220703, 1073, 0, 0, 0);
	CreateDynamicObject(1486, 1215.9000244141, -766.79998779297, 1073, 0, 0, 0);
	CreateDynamicObject(1486, 1216, -766.90002441406, 1073, 0, 0, 0);
	CreateDynamicObject(1486, 1215.9000244141, -766.90002441406, 1073, 0, 0, 0);
	CreateDynamicObject(1486, 1215.6999511719, -766.90002441406, 1073, 0, 0, 0);
	CreateDynamicObject(1544, 1215.5999755859, -767.70001220703, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1544, 1215.5999755859, -767.59997558594, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1544, 1215.5, -767.70001220703, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1544, 1215.8000488281, -767.20001220703, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1544, 1215.8000488281, -767.29998779297, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1544, 1215.6999511719, -767.20001220703, 1072.8000488281, 0, 0, 0);
	CreateDynamicObject(1544, 1221.6999511719, -760.90002441406, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1544, 1221.6999511719, -761.09997558594, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1544, 1221.4000244141, -761.29998779297, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1544, 1221.5, -761.09997558594, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1544, 1220.8000488281, -761.09997558594, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1544, 1220.9000244141, -761.20001220703, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1544, 1220.6999511719, -761.20001220703, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1544, 1220.3000488281, -761.79998779297, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1544, 1220.3000488281, -761.70001220703, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1544, 1220.1999511719, -761.79998779297, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1544, 1220.4000244141, -762.59997558594, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1544, 1220.1999511719, -762.70001220703, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1544, 1220.1999511719, -762.59997558594, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1220.3000488281, -762.40002441406, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1220, -762.5, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1220, -762.70001220703, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1220.4000244141, -761.90002441406, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1220.0999755859, -762, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1220.0999755859, -761.70001220703, 1073.1999511719, 0, 0, 0);
	CreateDynamicObject(1543, 1221.3000488281, -760.90002441406, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1221.5999755859, -761, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1221.3000488281, -761, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1221.6999511719, -761.20001220703, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1221.5, -761.40002441406, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1221.0999755859, -761.09997558594, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1221.0999755859, -761.29998779297, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1220.6999511719, -761.09997558594, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(1543, 1220.5999755859, -761.40002441406, 1073.0999755859, 0, 0, 0);
	CreateDynamicObject(2671, 1219.1999511719, -769.09997558594, 1072.1999511719, 0, 0, 347.75817871094);
	CreateDynamicObject(2671, 1218.1999511719, -767, 1072.1999511719, 0, 0, 321.91162109375);
	CreateDynamicObject(2267, 1216.5999755859, -770.53002929688, 1074.0999755859, 0, 0, 180.45141601563);
	CreateDynamicObject(2266, 1221.5, -769.70001220703, 1073.9000244141, 0, 0, 268.86535644531);
	CreateDynamicObject(2266, 1221.5, -769.70001220703, 1073.0999755859, 0, 0, 268.86291503906);
	CreateDynamicObject(2266, 1221.5, -768.70001220703, 1073.0999755859, 0, 0, 268.86291503906);
	CreateDynamicObject(2266, 1221.5, -768.70001220703, 1073.9000244141, 0, 0, 268.86291503906);
	CreateDynamicObject(2172, 1209.4000244141, -767.79998779297, 1072.1999511719, 0, 0, 51.687561035156);
	CreateDynamicObject(2172, 1209.3000488281, -766.40002441406, 1072.1999511719, 0, 0, 232.13781738281);
	CreateDynamicObject(2172, 1206.4000244141, -766.59997558594, 1072.1999511719, 0, 0, 232.13562011719);
	CreateDynamicObject(2172, 1206.5, -768, 1072.1999511719, 0, 0, 51.685180664063);
	CreateDynamicObject(1806, 1210.5, -768.09997558594, 1072.1999511719, 0, 0, 0);
	CreateDynamicObject(1806, 1207.8000488281, -768.59997558594, 1072.1999511719, 0, 0, 34.004974365234);
	CreateDynamicObject(1806, 1208.3000488281, -766, 1072.1999511719, 0, 0, 355.91943359375);
	CreateDynamicObject(1806, 1205.4000244141, -766.59997558594, 1072.1999511719, 0, 0, 279.74645996094);
	CreateDynamicObject(2164, 1202.0999755859, -769.09997558594, 1072.1999511719, 0, 0, 91.133453369141);
	CreateDynamicObject(2164, 1202.0999755859, -767.19989013672, 1072.1999511719, 0, 0, 91.131591796875);
	CreateDynamicObject(2596, 1205.8000488281, -770.59997558594, 1075, 0, 0, 180.45141601563);
	CreateDynamicObject(2596, 1205, -770.70001220703, 1075, 0, 0, 180.45043945313);
	CreateDynamicObject(2596, 1204.1999511719, -770.59997558594, 1075, 0, 0, 180.45043945313);
	CreateDynamicObject(1752, 1204.8000488281, -770.79998779297, 1073.8000488281, 0, 0, 184.53198242188);
	CreateDynamicObject(627, 1182.6999511719, -768.59997558594, 1074, 0, 0, 0);
	CreateDynamicObject(627, 1202.4000244141, -770.40002441406, 1074, 0, 0, 10.881591796875);
	CreateDynamicObject(2395, 1202.4000244141, -754.29998779297, 1072.1999511719, 0, 0, 1.3601989746094);
	CreateDynamicObject(2395, 1206, -753.79998779297, 1072.1999511719, 0, 0, 54.404876708984);
	CreateDynamicObject(1491, 1207.8000488281, -751.09997558594, 1072.1999511719, 0, 0, 91.133453369141);
	CreateDynamicObject(2395, 1207.8000488281, -749.09997558594, 1071.9702148438, 0, 0, 102.01147460938);
	CreateDynamicObject(2395, 1207.8900146484, -750.59997558594, 1074.6999511719, 0, 0, 91.129852294922);
	CreateDynamicObject(2395, 1206, -753.79998779297, 1074.9400634766, 0, 0, 54.404296875);
	CreateDynamicObject(2395, 1202.4000244141, -754.29998779297, 1074.9499511719, 0, 0, 1.3568115234375);
	CreateDynamicObject(2395, 1205.5, -753.90002441406, 1072.1999511719, 0, 0, 185.44079589844);
	CreateDynamicObject(2395, 1207.5, -751.40002441406, 1072.1999511719, 0, 0, 234.4052734375);
	CreateDynamicObject(2395, 1201.8000488281, -754, 1072.1999511719, 0, 0, 133.75250244141);
	CreateDynamicObject(2395, 1201.8000488281, -754, 1074.9500732422, 0, 0, 133.74758911133);
	CreateDynamicObject(2395, 1205.5, -753.90002441406, 1074.9499511719, 0, 0, 185.43823242188);
	CreateDynamicObject(1294, 1200.8000488281, -754.29998779297, 1076, 0, 0, 0);
	CreateDynamicObject(1294, 1200.6999511719, -754.40002441406, 1076, 0, 0, 0);
	CreateDynamicObject(1294, 1204.5999755859, -753.90002441406, 1076, 0, 0, 0);
	CreateDynamicObject(2395, 1207.5, -751.40002441406, 1074.9499511719, 0, 0, 234.404296875);
	CreateDynamicObject(1294, 1206.4000244141, -751.09997558594, 1076, 0, 0, 0);
	CreateDynamicObject(1294, 1206.5, -749.59997558594, 1076, 0, 0, 0);
	CreateDynamicObject(1294, 1206.3000488281, -749.59997558594, 1076, 0, 0, 0);
	CreateDynamicObject(1294, 1206.1999511719, -751.09997558594, 1076, 0, 0, 0);
	CreateDynamicObject(2395, 1207.6999511719, -747.79998779297, 1074.6999511719, 0, 0, 270);
	CreateDynamicObject(2395, 1205.9000244141, -746.90002441406, 1072, 0, 0, 302.86437988281);
	CreateDynamicObject(14782, 1202.4000244141, -750.59997558594, 1073.1999511719, 0, 0, 89.773254394531);
	CreateDynamicObject(2700, 1204.6999511719, -753.79998779297, 1074.5, 0, 0, 93.853912353516);
	CreateDynamicObject(2700, 1203.8000488281, -753.90002441406, 1074.5, 0, 0, 93.852813720703);
	CreateDynamicObject(2400, 1203, -749.29998779297, 1072.1999511719, 0, 0, 0);
	CreateDynamicObject(2394, 1203.8000488281, -749.79998779297, 1073.5999755859, 0, 0, 0);
	CreateDynamicObject(2394, 1204.9000244141, -749.79998779297, 1072.9000244141, 0, 0, 0);
	CreateDynamicObject(2614, 1204.3000488281, -753.92443847656, 1075.6999511719, 0, 0, 184.98785400391);
	CreateDynamicObject(1280, 1204.0999755859, -753.59997558594, 1072.5999755859, 0, 0, 275.66638183594);
	CreateDynamicObject(1280, 1206.3000488281, -752.20001220703, 1072.5999755859, 0, 0, 325.99133300781);
	CreateDynamicObject(2845, 1202.9000244141, -750.70001220703, 1072.1999511719, 0, 0, 0);
	CreateDynamicObject(2846, 1203.9000244141, -750.59997558594, 1072.1999511719, 0, 0, 0);
	CreateDynamicObject(2843, 1203.5999755859, -751, 1072.1999511719, 0, 0, 0);
	CreateDynamicObject(2676, 1204.3000488281, -751.40002441406, 1072.3049316406, 0, 0, 59.848876953125);
	CreateDynamicObject(1999, 1204.6999511719, -763.29998779297, 1072.1999511719, 0, 0, 270.22546386719);
	CreateDynamicObject(1999, 1204.6999511719, -760, 1072.1999511719, 0, 0, 271.58544921875);
	CreateDynamicObject(1999, 1204.5999755859, -756.59997558594, 1072.1999511719, 0, 0, 271.580078125);
	CreateDynamicObject(2163, 1202, -764.40002441406, 1072, 0, 0, 90);
	CreateDynamicObject(2167, 1202, -762.59997558594, 1072, 0, 0, 90);
	CreateDynamicObject(2164, 1202, -760.20001220703, 1072, 0, 0, 89.773315429688);
	CreateDynamicObject(2164, 1202.0999755859, -757.90002441406, 1072.1999511719, 0, 0, 89.769287109375);
	CreateDynamicObject(2773, 1203.4000244141, -765.40002441406, 1072.5, 0, 0, 301.51062011719);
	CreateDynamicObject(2773, 1203.5, -755.59997558594, 1072.5, 0, 0, 244.38000488281);
	CreateDynamicObject(2773, 1201.6999511719, -755.79998779297, 1072.5, 0, 0, 304.22912597656);
	CreateDynamicObject(1808, 1202.1999511719, -761.40002441406, 1072, 0, 0, 91.133453369141);
	CreateDynamicObject(1806, 1203.1999511719, -764.40002441406, 1072.1999511719, 0, 0, 279.74487304688);
	CreateDynamicObject(1806, 1204, -760.5, 1072.1999511719, 0, 0, 238.93872070313);
	CreateDynamicObject(1806, 1203.3000488281, -757.29998779297, 1072.1999511719, 0, 0, 255.25891113281);

	// North LS Gas Station
	CreateDynamicObject(1676,998.63592529,-937.55993652,42.83398819,0.00000000,0.00000000,8.75000000); //object(washgaspump) (1)
	CreateDynamicObject(1676,1002.15386963,-937.07757568,42.83398819,0.00000000,0.00000000,8.74511719); //object(washgaspump) (2)
	CreateDynamicObject(1676,1005.69854736,-936.55706787,42.83398819,0.00000000,0.00000000,8.74511719); //object(washgaspump) (3)
	CreateDynamicObject(1676,1009.05902100,-936.06591797,42.83398819,0.00000000,0.00000000,8.74511719); //object(washgaspump) (4)
	CreateDynamicObject(997,1007.79016113,-936.89746094,41.40344238,0.00000000,0.00000000,8.50000000); //object(lhouse_barrier3) (1)
	CreateDynamicObject(997,1004.13403320,-937.44079590,41.40344238,0.00000000,0.00000000,7.99792480); //object(lhouse_barrier3) (2)
	CreateDynamicObject(997,1000.84777832,-937.91687012,41.40344238,0.00000000,0.00000000,8.24255371); //object(lhouse_barrier3) (3)
	CreateDynamicObject(997,997.16809082,-938.39813232,41.40344238,0.00000000,0.00000000,7.73974609); //object(lhouse_barrier3) (4)
	CreateDynamicObject(997,1007.56115723,-935.66760254,41.40344238,0.00000000,0.00000000,8.49792480); //object(lhouse_barrier3) (5)
	CreateDynamicObject(997,1003.90948486,-936.23516846,41.40344238,0.00000000,0.00000000,7.99255371); //object(lhouse_barrier3) (6)
	CreateDynamicObject(997,1000.61877441,-936.68615723,41.40344238,0.00000000,0.00000000,8.23974609); //object(lhouse_barrier3) (7)
	CreateDynamicObject(997,996.94824219,-937.21679688,41.40344238,0.00000000,0.00000000,7.73437500); //object(lhouse_barrier3) (8)

	// Crack Lab Fixes
	CreateDynamicObject(7191,2338.39135742,-1182.56323242,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(1)
	CreateDynamicObject(13656,2292.93872070,-1132.04724121,1017.29772949,0.00000000,0.00000000,0.00000000, -1, 5); //object(fuckknows)(1)
	CreateDynamicObject(7191,2337.95458984,-1182.54309082,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(2)
	CreateDynamicObject(7191,2338.43408203,-1182.39440918,1032.95129395,90.00000000,180.00000000,90.24850464, -1, 5); //object(vegasnnewfence2b)(3)
	CreateDynamicObject(7191,2337.97314453,-1182.39111328,1032.95129395,90.00000000,179.99450684,90.24719238, -1, 5); //object(vegasnnewfence2b)(4)
	CreateDynamicObject(7191,2328.80346680,-1180.43066406,1034.70544434,0.00000000,270.00000000,88.50006104, -1, 5); //object(vegasnnewfence2b)(5)
	CreateDynamicObject(3055,2319.78198242,-1184.82641602,1032.36450195,63.75003052,269.99996948,178.5001220, -1, 5); //object(kmb_shutter)(1)
	CreateDynamicObject(7191,2328.83715820,-1186.81262207,1030.70446777,0.00000000,90.74990845,359.99481201, -1, 5); //object(vegasnnewfence2b)(6)
	CreateDynamicObject(7191,2326.84863281,-1187.03125000,1030.70446777,0.00000000,90.74707031,359.99450684, -1, 5); //object(vegasnnewfence2b)(8)
	CreateDynamicObject(7191,2337.31689453,-1186.55639648,1030.70446777,0.00000000,90.74707031,359.99450684, -1, 5); //object(vegasnnewfence2b)(9)
	CreateDynamicObject(7191,2339.06689453,-1186.13159180,1030.70446777,0.00000000,91.24694824,359.99453735, -1, 5); //object(vegasnnewfence2b)(10)
	CreateDynamicObject(7191,2338.39062500,-1182.56250000,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(11)
	CreateDynamicObject(7191,2337.95947266,-1179.38879395,1032.95129395,90.00000000,180.00000000,270.00000000, -1, 5); //object(vegasnnewfence2b)(12)
	CreateDynamicObject(7191,2338.38476562,-1179.43066406,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(13)
	CreateDynamicObject(7191,2337.96630859,-1179.23559570,1032.95129395,90.00000000,179.99450684,90.24719238, -1, 5); //object(vegasnnewfence2b)(14)

	// Bus Stops
	CreateDynamicObject(984,1181.00000000,-1346.00000000,13.19999981,0.00000000,0.00000000,309.26000977); //object(fenceshit2) (1)
	CreateDynamicObject(984,1185.50000000,-1311.59997559,13.19999981,0.00000000,0.00000000,0.74707031); //object(fenceshit2) (2)
	CreateDynamicObject(984,1180.50000000,-1301.19995117,13.19999981,0.00000000,0.00000000,50.74707031); //object(fenceshit2) (3)
	CreateDynamicObject(1280,1186.09997559,-1339.80004883,13.00000000,0.00000000,0.00000000,182.00000000); //object(parkbench1) (1)
	CreateDynamicObject(1280,1186.00000000,-1337.00000000,13.00000000,0.00000000,0.00000000,181.99951172); //object(parkbench1) (2)
	CreateDynamicObject(1229,1186.09997559,-1341.50000000,14.10000038,0.00000000,0.00000000,120.00000000); //object(bussign1) (1)
	CreateDynamicObject(984,1185.59997559,-1335.80004883,13.19999981,0.00000000,0.00000000,0.74707031); //object(fenceshit2) (4)
	CreateDynamicObject(1280,1539.59997559,-1743.59997559,12.89999962,0.00000000,0.00000000,270.00000000); //object(parkbench1) (3)
	CreateDynamicObject(1280,1536.80004883,-1743.59997559,12.89999962,0.00000000,0.00000000,270.00000000); //object(parkbench1) (4)
	CreateDynamicObject(1229,1541.19995117,-1743.59997559,14.10000038,0.00000000,0.00000000,220.00000000); //object(bussign1) (2)
	CreateDynamicObject(1229,1812.19995117,-1926.19995117,14.10000038,0.00000000,0.00000000,117.50000000); //object(bussign1) (3)
	CreateDynamicObject(1280,1811.90002441,-1924.50000000,13.00000000,0.00000000,0.00000000,180.00000000); //object(parkbench1) (5)
	CreateDynamicObject(1280,1811.90002441,-1921.80004883,13.00000000,0.00000000,0.00000000,179.99450684); //object(parkbench1) (6)

	// VIP Lounge
	CreateDynamicObject(14803,287.79998779,-178.10000610,1000.59997559,0.00000000,0.00000000,0.00000000); //object(bdupsnew) (1)
	CreateDynamicObject(14803,279.89999390,-178.10000610,1000.59997559,0.00000000,0.00000000,0.00000000); //object(bdupsnew) (2)
	CreateDynamicObject(10844,274.79998779,-182.50000000,997.40002441,0.00000000,90.00000000,1.24694824); //object(gen_whouse01_sfse) (1)
	CreateDynamicObject(10844,293.39941406,-181.50000000,997.40002441,0.00000000,90.00000000,177.24243164); //object(gen_whouse01_sfse) (2)
	CreateDynamicObject(2946,290.70001221,-178.69999695,998.59997559,0.00000000,0.00000000,0.00000000); //object(cr_door_03) (4)
	CreateDynamicObject(2946,290.69921875,-178.59960938,998.59997559,0.00000000,0.00000000,179.99450684); //object(cr_door_03) (5)
	CreateDynamicObject(2424,28.00000000,-175.39999390,998.59997559,0.00000000,0.00000000,358.00000000); //object(cj_ff_conter_1) (1)
	CreateDynamicObject(2435,284.60000610,-175.89999390,998.59997559,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_2) (1)
	CreateDynamicObject(2435,285.50000000,-175.89999390,998.59997559,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_2) (2)
	CreateDynamicObject(2435,284.59960938,-175.89941406,998.59997559,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_2) (3)
	CreateDynamicObject(2435,285.50000000,-175.89941406,998.59997559,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_2) (4)
	CreateDynamicObject(2435,285.50000000,-175.89941406,998.59997559,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_2) (5)
	CreateDynamicObject(2435,285.50000000,-175.89941406,998.59997559,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_2) (6)
	CreateDynamicObject(2435,286.39999390,-175.89999390,998.59997559,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_2) (7)
	CreateDynamicObject(2434,288.20001221,-175.89999390,998.59997559,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_2b) (1)
	CreateDynamicObject(2435,287.29998779,-175.89999390,998.59997559,0.00000000,0.00000000,0.00000000); //object(cj_ff_conter_2) (8)
	CreateDynamicObject(2435,288.39999390,-174.80000305,998.59997559,0.00000000,0.00000000,85.75000000); //object(cj_ff_conter_2) (9)
	CreateDynamicObject(2435,288.45996094,-173.89941406,998.59997559,0.00000000,0.00000000,85.74279785); //object(cj_ff_conter_2) (10)
	CreateDynamicObject(2435,288.51998901,-173.00000000,998.59997559,0.00000000,0.00000000,85.74279785); //object(cj_ff_conter_2) (11)
	CreateDynamicObject(1242,287.19921875,-176.09960938,999.90002441,0.00000000,0.00000000,179.99450684); //object(bodyarmour) (1)
	CreateDynamicObject(1240,284.79980469,-176.09960938,999.90002441,0.00000000,0.00000000,329.99633789); //object(health) (2)
	CreateDynamicObject(2290,290.10000610,-182.39999390,998.59997559,0.00000000,0.00000000,179.99450684); //object(swk_couch_1) (1)
	CreateDynamicObject(2290,286.50000000,-182.39999390,998.59997559,0.00000000,0.00000000,179.99450684); //object(swk_couch_1) (2)
	CreateDynamicObject(631,287.29998779,-182.39999390,999.50000000,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (1)
	CreateDynamicObject(2773,286.00000000,-176.89999390,999.09997559,0.00000000,0.00000000,0.00000000); //object(cj_airprt_bar) (1)
	CreateDynamicObject(14788,279.00000000,-175.89999390,1000.70001221,0.00000000,0.00000000,0.00000000); //object(ab_sfgymbits01a) (2)
	CreateDynamicObject(14788,279.00000000,-180.39999390,1000.70001221,0.00000000,0.00000000,0.00000000); //object(ab_sfgymbits01a) (3)
	CreateDynamicObject(2395,284.00000000,-173.30000305,1001.29998779,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,287.69921875,-173.29980469,998.59997559,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (2)
	CreateDynamicObject(2395,287.69921875,-173.29980469,998.59997559,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,287.69921875,-173.29980469,998.59997559,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (4)
	CreateDynamicObject(2395,284.20001221,-183.80000305,998.40002441,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (5)
	CreateDynamicObject(2395,284.00000000,-173.29980469,998.59997559,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (6)
	CreateDynamicObject(2395,284.00000000,-173.29980469,998.59997559,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (7)
	CreateDynamicObject(2395,287.69921875,-173.29980469,1001.29998779,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (8)
	CreateDynamicObject(2395,284.00000000,-173.29980469,1001.29998779,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (9)
	CreateDynamicObject(2395,284.19921875,-176.50000000,998.57000732,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (10)
	CreateDynamicObject(2395,284.19921875,-178.55000305,998.57000732,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (11)
	CreateDynamicObject(2395,284.19921875,-176.50000000,1001.29998779,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (12)
	CreateDynamicObject(2395,284.19921875,-176.50000000,1001.29998779,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (13)
	CreateDynamicObject(2395,284.19921875,-176.50000000,1001.29998779,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (14)
	CreateDynamicObject(2395,284.19921875,-176.50000000,998.57000732,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (15)
	CreateDynamicObject(2395,284.19921875,-180.19921875,1001.04998779,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (16)
	CreateDynamicObject(2395,284.19921875,-183.93945312,1001.04998779,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (17)
	CreateDynamicObject(2395,284.19921875,-183.93945312,1001.04998779,0.00000000,0.00000000,90.00000000); //object(cj_sports_wall) (18)
	CreateDynamicObject(10844,280.00000000,-175.10000610,995.76000977,0.00000000,0.00000000,176.24609375); //object(gen_whouse01_sfse) (1)
	CreateDynamicObject(2395,280.25000000,-173.29980469,998.59997559,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (19)
	CreateDynamicObject(2395,277.50000000,-173.29980469,998.59997559,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (20)
	CreateDynamicObject(2395,280.25000000,-173.29980469,1001.29998779,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (21)
	CreateDynamicObject(2395,277.50000000,-173.29980469,1001.29998779,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (22)
	CreateDynamicObject(2395,283.79998779,-173.69999695,998.59997559,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (23)
	CreateDynamicObject(2395,283.79980469,-173.69921875,1001.29998779,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (24)
	CreateDynamicObject(2395,283.79980469,-173.69921875,998.59997559,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (25)
	CreateDynamicObject(2395,283.79980469,-173.69921875,998.59997559,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (26)
	CreateDynamicObject(2395,283.79998779,-177.00000000,1001.00000000,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (27)
	CreateDynamicObject(2395,283.79980469,-175.84960938,998.59997559,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (29)
	CreateDynamicObject(2395,283.79980469,-180.69999695,1001.00000000,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (30)
	CreateDynamicObject(2395,283.79980469,-181.00999451,998.29998779,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (31)
	CreateDynamicObject(5369,229.00000000,-228.89999390,935.20001221,0.00000000,0.00000000,0.00000000); //object(alphbrk4_las2) (1)
	CreateDynamicObject(10844,283.19921875,-185.69921875,997.40002441,0.00000000,90.00000000,91.24694824); //object(gen_whouse01_sfse) (1)
	CreateDynamicObject(1491,284.10000610,-180.57000732,998.59997559,0.00000000,0.00000000,90.00000000); //object(gen_doorint01) (2)



    /* Project Raprap */
	CreateDynamicObject(3749,2867.98828125,-345.51074219,10.06885242,0.00000000,0.00000000,99.48669434); //object(clubgate01_lax) (1)
	CreateDynamicObject(2910,3101.65234375,-304.40039062,4.06885290,0.00000000,0.00000000,99.99206543); //object(temp_road) (2)
	CreateDynamicObject(9482,3186.32324219,-289.34863281,10.39907837,0.00000000,0.00000000,9.99755859); //object(chinagate) (1)
	CreateDynamicObject(7423,3252.95996094,-300.16601562,3.86885285,0.00000000,0.00000000,99.99206543); //object(glfcrsgate1_vgs) (1)
	CreateDynamicObject(3279,3193.93750000,-295.42382812,3.86885285,0.00000000,0.00000000,10.99731445); //object(a51_spottower) (1)
	CreateDynamicObject(3483,3272.91577148,-221.71006775,10.89944935,0.00000000,0.00000000,279.99206543); //object(vegasxrexhse09) (1)
	CreateDynamicObject(3488,3282.03393555,-274.14773560,10.42944908,0.00000000,0.00000000,279.98657227); //object(vegasxrexhse07) (1)
	CreateDynamicObject(3486,3277.88598633,-250.75639343,10.89944935,0.00000000,0.00000000,279.98657227); //object(vegasxrexhse05) (1)
	CreateDynamicObject(2910,2933.87109375,-333.97656250,4.06885290,0.00000000,0.00000000,99.99206543); //object(temp_road) (1)
	CreateDynamicObject(1597,3168.38134766,-292.48388672,6.72623491,0.00000000,1.99951172,280.24475098); //object(cntrlrsac1) (4)
	CreateDynamicObject(1597,3158.86376953,-294.59777832,6.72623491,0.00000000,0.00000000,100.73913574); //object(cntrlrsac1) (5)
	CreateDynamicObject(1597,3178.03613281,-290.84863281,6.72623491,0.00000000,0.00000000,280.49194336); //object(cntrlrsac1) (7)
	CreateDynamicObject(9833,3250.84814453,-293.18933105,6.87139654,0.00000000,0.00000000,337.98339844); //object(fountain_sfw) (2)
	CreateDynamicObject(1775,3188.77050781,-283.04589844,4.96893740,0.00000000,0.00000000,10.49194336); //object(cj_sprunk1) (1)
	CreateDynamicObject(3462,2863.08886719,-338.81054688,6.43592930,0.00000000,0.00000000,9.99755859); //object(csrangel_lvs) (1)
	CreateDynamicObject(3462,2865.16308594,-354.12988281,6.43592930,0.00000000,0.00000000,9.99755859); //object(csrangel_lvs) (2)
	CreateDynamicObject(3524,3252.00805664,-315.82482910,6.95419312,0.00000000,0.00000000,183.99353027); //object(skullpillar01_lvs) (1)
	CreateDynamicObject(3524,3258.61572266,-314.62023926,6.95419312,0.00000000,0.00000000,191.99157715); //object(skullpillar01_lvs) (2)
	CreateDynamicObject(14628,2864.02734375,-345.89550781,11.40565491,0.00000000,0.00000000,97.73986816); //object(ab_caligulasfront) (1)
	CreateDynamicObject(16420,3132.86914062,-298.67675781,-2.59999990,0.00000000,0.00000000,279.99206543); //object(des_sbridsupps04) (2)
	CreateDynamicObject(16420,2931.12719727,-334.38238525,-2.59999990,0.00000000,0.00000000,279.99707031); //object(des_sbridsupps04) (4)
	CreateDynamicObject(16420,2931.12695312,-334.38183594,-2.59999990,0.00000000,0.00000000,279.98657227); //object(des_sbridsupps04) (5)
	CreateDynamicObject(1231,2912.55175781,-332.02288818,6.88518333,0.00000000,0.00000000,9.99755859); //object(streetlamp2) (1)
	CreateDynamicObject(1231,2914.07446289,-343.18179321,6.88518333,0.00000000,0.00000000,11.99853516); //object(streetlamp2) (3)
	CreateDynamicObject(1231,2879.43481445,-337.80059814,6.88518333,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (5)
	CreateDynamicObject(1231,2947.35791016,-325.87506104,6.88518333,0.00000000,0.00000000,9.99755859); //object(streetlamp2) (6)
	CreateDynamicObject(1231,2983.09570312,-331.28613281,6.88518333,0.00000000,0.00000000,9.99755859); //object(streetlamp2) (7)
	CreateDynamicObject(1231,2949.37402344,-337.06018066,6.88518333,0.00000000,0.00000000,9.99755859); //object(streetlamp2) (8)
	CreateDynamicObject(1231,2981.08496094,-319.96289062,6.88518333,0.00000000,0.00000000,9.99755859); //object(streetlamp2) (9)
	CreateDynamicObject(1231,3081.36718750,-302.17382812,6.88518333,0.00000000,0.00000000,9.99755859); //object(streetlamp2) (10)
	CreateDynamicObject(1231,3083.33300781,-313.25000000,6.88518333,0.00000000,0.00000000,9.99755859); //object(streetlamp2) (11)
	CreateDynamicObject(1231,3116.14746094,-307.51562500,6.88518333,0.00000000,0.00000000,9.99755859); //object(streetlamp2) (12)
	CreateDynamicObject(1231,3114.40039062,-296.55175781,6.88518333,0.00000000,0.00000000,9.99755859); //object(streetlamp2) (13)
	CreateDynamicObject(1231,3148.62500000,-290.08691406,6.88518333,0.00000000,0.00000000,9.99755859); //object(streetlamp2) (14)
	CreateDynamicObject(1231,3150.77636719,-301.38378906,6.88518333,0.00000000,0.00000000,9.99755859); //object(streetlamp2) (15)
	CreateDynamicObject(1231,3027.64941406,-311.60156250,6.88518333,0.00000000,0.00000000,9.99755859); //object(streetlamp2) (16)
	CreateDynamicObject(1231,3030.19628906,-323.07128906,6.88518333,0.00000000,0.00000000,9.99755859); //object(streetlamp2) (17)
	CreateDynamicObject(3092,2867.53979492,-346.78414917,8.99257469,0.00000000,177.99499512,103.99658203); //object(dead_tied_cop) (1)
	CreateDynamicObject(3092,2867.02734375,-343.55590820,8.99257469,0.00000000,177.98950195,103.99658203); //object(dead_tied_cop) (3)
	CreateDynamicObject(3092,2868.50463867,-349.80606079,8.99257469,0.00000000,177.98950195,103.99658203); //object(dead_tied_cop) (4)
	CreateDynamicObject(3092,2866.53808594,-341.30883789,8.99257469,0.00000000,177.98950195,103.99658203); //object(dead_tied_cop) (7)
	CreateDynamicObject(3485,3268.00219727,-193.80744934,10.89944935,0.00000000,0.00000000,279.98657227); //object(vegasxrexhse04) (2)
	CreateDynamicObject(3487,3196.40820312,-244.54394531,10.56944942,0.00000000,0.00000000,99.99206543); //object(vegasxrexhse06) (1)
	CreateDynamicObject(3484,3191.87109375,-219.37988281,10.56944942,0.00000000,0.00000000,99.99206543); //object(vegasxrexhse03) (2)
	CreateDynamicObject(3485,3186.50000000,-189.54296875,10.90334225,0.00000000,0.00000000,99.99206543); //object(vegasxrexhse04) (1)
	CreateDynamicObject(3279,3191.42480469,-278.71582031,3.86885285,0.00000000,0.00000000,10.99731445); //object(a51_spottower) (1)
	CreateDynamicObject(1597,3236.15039062,-192.24902344,6.46623468,0.00000000,357.99499512,190.48645020); //object(cntrlrsac1) (7)
	CreateDynamicObject(1597,3237.81933594,-201.94824219,6.46623468,0.00000000,0.00000000,190.48645020); //object(cntrlrsac1) (7)
	CreateDynamicObject(3512,3236.66723633,-196.43353271,4.06885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3238.41552734,-206.22953796,4.06885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(1597,3239.63085938,-211.61425781,6.46623468,0.00000000,0.00000000,190.48645020); //object(cntrlrsac1) (7)
	CreateDynamicObject(1597,3241.51855469,-221.38378906,6.46623468,0.00000000,0.00000000,190.48645020); //object(cntrlrsac1) (7)
	CreateDynamicObject(3512,3240.16967773,-215.87388611,4.06885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(1597,3243.33203125,-231.12402344,6.46623468,0.00000000,0.00000000,190.48645020); //object(cntrlrsac1) (7)
	CreateDynamicObject(3512,3242.13378906,-225.57283020,4.06885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3244.10058594,-236.80709839,4.06885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(1597,3245.04687500,-240.91015625,6.46623468,0.00000000,0.00000000,190.48645020); //object(cntrlrsac1) (7)
	CreateDynamicObject(7885,3259.20019531,-337.31542969,3.86885285,0.00000000,0.00000000,279.99206543); //object(vegasglfhse1) (3)
	CreateDynamicObject(3454,3292.36718750,-298.58258057,8.12642384,0.00000000,0.00000000,279.99206543); //object(vgnhseing15) (1)
	CreateDynamicObject(8154,3237.46875000,-336.89453125,7.00000000,0.00000000,0.00000000,279.99755859); //object(vgsselecfence08) (1)
	CreateDynamicObject(8154,3279.70507812,-314.29687500,7.00000000,0.00000000,0.00000000,9.99755859); //object(vgsselecfence08) (2)
	CreateDynamicObject(8154,3242.71777344,-191.15039062,7.00000000,0.00000000,0.00000000,99.99755859); //object(vgsselecfence08) (3)
	CreateDynamicObject(8154,3200.40332031,-213.74218750,7.00000000,0.00000000,0.00000000,189.99755859); //object(vgsselecfence08) (5)
	CreateDynamicObject(8150,3293.15161133,-235.41339111,7.26410294,0.00000000,0.00000000,99.99993896); //object(vgsselecfence04) (1)
	CreateDynamicObject(8150,3125.38696289,-309.65643311,7.26410294,0.00000000,0.00000000,189.99755859); //object(vgsselecfence04) (2)
	CreateDynamicObject(8150,3001.41284180,-331.51177979,7.26410294,0.00000000,0.00000000,189.99755859); //object(vgsselecfence04) (3)
	CreateDynamicObject(8150,2933.37158203,-343.50164795,7.26410294,0.00000000,0.00000000,189.99755859); //object(vgsselecfence04) (4)
	CreateDynamicObject(8150,3122.11718750,-291.41519165,7.26410294,0.00000000,0.00000000,9.99755859); //object(vgsselecfence04) (6)
	CreateDynamicObject(8150,2998.16357422,-313.22808838,7.26410294,0.00000000,0.00000000,9.99755859); //object(vgsselecfence04) (5)
	CreateDynamicObject(8150,2930.21582031,-325.17001343,7.26410294,0.00000000,0.00000000,9.99755859); //object(vgsselecfence04) (7)
	CreateDynamicObject(3550,3187.80297852,-297.69735718,6.32566786,0.00000000,0.00000000,10.00000000); //object(vgsn_fncelec_msh) (1)
	CreateDynamicObject(3550,3184.78247070,-280.85397339,6.32566786,0.00000000,0.00000000,9.99755859); //object(vgsn_fncelec_msh) (2)
	CreateDynamicObject(987,3183.08886719,-270.95996094,3.81885290,0.00000000,0.00000000,99.99755859); //object(elecfence_bar) (1)
	CreateDynamicObject(987,3184.78417969,-279.79980469,3.81885290,0.00000000,0.00000000,99.99206543); //object(elecfence_bar) (2)
	CreateDynamicObject(987,3191.58398438,-317.36621094,3.56885290,0.00000000,0.00000000,99.99206543); //object(elecfence_bar) (3)
	CreateDynamicObject(987,3189.96093750,-308.49804688,3.56885290,0.00000000,0.00000000,99.99206543); //object(elecfence_bar) (4)
	CreateDynamicObject(1231,2881.14379883,-349.09555054,6.88518333,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (5)
	CreateDynamicObject(16114,3185.12377930,-314.41006470,-20.25000000,0.00000000,0.00000000,202.00000000); //object(des_rockgp2_) (1)
	CreateDynamicObject(16114,3187.14453125,-321.33496094,-20.25000000,0.00000000,0.00000000,201.98913574); //object(des_rockgp2_) (2)
	CreateDynamicObject(16114,3187.40820312,-328.08001709,-20.25000000,0.00000000,0.00000000,201.99462891); //object(des_rockgp2_) (3)
	CreateDynamicObject(16114,3188.42114258,-334.79458618,-20.25000000,0.00000000,0.00000000,201.99462891); //object(des_rockgp2_) (4)
	CreateDynamicObject(16114,3189.85644531,-342.15527344,-20.25000000,0.00000000,0.00000000,201.98913574); //object(des_rockgp2_) (5)
	CreateDynamicObject(16114,3191.19628906,-349.02624512,-20.25000000,0.00000000,0.00000000,201.99462891); //object(des_rockgp2_) (6)
	CreateDynamicObject(16114,3192.63183594,-356.38714600,-20.25000000,0.00000000,0.00000000,203.99462891); //object(des_rockgp2_) (7)
	CreateDynamicObject(16114,3193.97167969,-363.25769043,-20.25000000,0.00000000,0.00000000,203.99414062); //object(des_rockgp2_) (8)
	CreateDynamicObject(16114,3195.45507812,-370.86398315,-20.25000000,0.00000000,0.00000000,207.99414062); //object(des_rockgp2_) (9)
	CreateDynamicObject(16114,3196.93847656,-378.47042847,-20.25000000,0.00000000,0.00000000,207.99316406); //object(des_rockgp2_) (10)
	CreateDynamicObject(16114,3206.94555664,-380.30065918,-20.25000000,0.00000000,0.00000000,251.99316406); //object(des_rockgp2_) (11)
	CreateDynamicObject(16114,3225.56005859,-413.32968140,-15.75000000,0.00000000,0.00000000,279.98657227); //object(des_rockgp2_) (12)
	CreateDynamicObject(16114,3199.33544922,-406.05395508,-13.25000000,0.00000000,0.00000000,189.98657227); //object(des_rockgp2_) (13)
	CreateDynamicObject(16114,3173.76513672,-326.47628784,-15.00000000,0.00000000,0.00000000,189.98657227); //object(des_rockgp2_) (14)
	CreateDynamicObject(16114,3250.81225586,-409.98852539,-17.00000000,0.00000000,0.00000000,279.98657227); //object(des_rockgp2_) (16)
	CreateDynamicObject(16114,3273.76000977,-406.10937500,-16.00000000,0.00000000,0.00000000,279.98657227); //object(des_rockgp2_) (19)
	CreateDynamicObject(16114,3300.34985352,-401.89520264,-14.25000000,0.00000000,0.00000000,281.98608398); //object(des_rockgp2_) (24)
	CreateDynamicObject(16114,3324.42089844,-394.31771851,-15.00000000,0.00000000,0.00000000,281.98059082); //object(des_rockgp2_) (25)
	CreateDynamicObject(16114,3351.25634766,-389.07336426,-13.75000000,0.00000000,0.00000000,281.98059082); //object(des_rockgp2_) (26)
	CreateDynamicObject(16114,3354.96044922,-382.62683105,-16.25000000,0.00000000,0.00000000,201.98059082); //object(des_rockgp2_) (27)
	CreateDynamicObject(16114,3345.66015625,-335.28872681,-16.00000000,0.00000000,0.00000000,23.98315430); //object(des_rockgp2_) (28)
	CreateDynamicObject(16114,3340.04760742,-308.83798218,-15.00000000,0.00000000,0.00000000,29.97619629); //object(des_rockgp2_) (42)
	CreateDynamicObject(16114,3337.84765625,-284.34143066,-14.50000000,0.00000000,0.00000000,31.98120117); //object(des_rockgp2_) (43)
	CreateDynamicObject(16114,3332.47338867,-261.38165283,-15.75000000,0.00000000,0.00000000,31.98120117); //object(des_rockgp2_) (44)
	CreateDynamicObject(16114,3327.21386719,-235.20898438,-14.75000000,0.00000000,0.00000000,31.98120117); //object(des_rockgp2_) (45)
	CreateDynamicObject(16114,3325.95800781,-210.36749268,-15.50000000,0.00000000,0.00000000,31.98120117); //object(des_rockgp2_) (46)
	CreateDynamicObject(16114,3320.24218750,-184.28808594,-15.00000000,0.00000000,0.00000000,31.98120117); //object(des_rockgp2_) (47)
	CreateDynamicObject(16114,3315.18017578,-156.90597534,-15.50000000,0.00000000,0.00000000,31.98120117); //object(des_rockgp2_) (48)
	CreateDynamicObject(16114,3310.82714844,-127.26537323,-13.75000000,0.00000000,0.00000000,13.98120117); //object(des_rockgp2_) (49)
	CreateDynamicObject(16114,3287.09863281,-117.27613831,-12.75000000,0.00000000,0.00000000,101.98120117); //object(des_rockgp2_) (50)
	CreateDynamicObject(16114,3273.60278320,-112.14041138,-20.75000000,0.00000000,0.00000000,31.98120117); //object(des_rockgp2_) (51)
	CreateDynamicObject(16114,3253.08886719,-122.02053070,-17.00000000,0.00000000,0.00000000,101.98059082); //object(des_rockgp2_) (52)
	CreateDynamicObject(16114,3236.40356445,-124.05343628,-10.25000000,0.00000000,0.00000000,111.98059082); //object(des_rockgp2_) (53)
	CreateDynamicObject(16114,3199.59375000,-128.90237427,-12.00000000,0.00000000,0.00000000,101.98059082); //object(des_rockgp2_) (54)
	CreateDynamicObject(16114,3173.53955078,-136.84936523,-17.00000000,0.00000000,0.00000000,101.98059082); //object(des_rockgp2_) (55)
	CreateDynamicObject(16114,3155.97949219,-141.34240723,-15.25000000,0.00000000,0.00000000,101.98059082); //object(des_rockgp2_) (56)
	CreateDynamicObject(16114,3150.30126953,-152.29763794,-18.50000000,0.00000000,0.00000000,101.98059082); //object(des_rockgp2_) (57)
	CreateDynamicObject(16114,3152.55761719,-164.24037170,-18.75000000,0.00000000,0.00000000,101.98059082); //object(des_rockgp2_) (58)
	CreateDynamicObject(16114,3153.21508789,-140.68142700,-11.75000000,0.00000000,0.00000000,353.98059082); //object(des_rockgp2_) (59)
	CreateDynamicObject(16114,3154.14624023,-323.91687012,-14.75000000,0.00000000,0.00000000,151.98059082); //object(des_rockgp2_) (60)
	CreateDynamicObject(16114,3151.47827148,-274.98416138,-15.75000000,0.00000000,0.00000000,121.98059082); //object(des_rockgp2_) (61)
	CreateDynamicObject(16114,3165.21435547,-258.22305298,-16.75000000,0.00000000,0.00000000,33.98059082); //object(des_rockgp2_) (62)
	CreateDynamicObject(16114,3155.58447266,-174.10296631,-20.75000000,0.00000000,0.00000000,101.98059082); //object(des_rockgp2_) (65)
	CreateDynamicObject(16114,3162.44458008,-195.89611816,-20.75000000,0.00000000,356.00000000,185.98059082); //object(des_rockgp2_) (66)
	CreateDynamicObject(16114,3163.85693359,-204.46224976,-20.75000000,0.00000000,355.99548340,185.97656250); //object(des_rockgp2_) (67)
	CreateDynamicObject(16114,3165.30566406,-212.64631653,-20.75000000,0.00000000,355.99548340,185.97656250); //object(des_rockgp2_) (68)
	CreateDynamicObject(16114,3166.86791992,-221.26940918,-20.75000000,0.00000000,355.99548340,185.97656250); //object(des_rockgp2_) (69)
	CreateDynamicObject(16114,3169.07617188,-229.33328247,-20.75000000,0.00000000,355.99548340,185.97656250); //object(des_rockgp2_) (70)
	CreateDynamicObject(16114,3169.90673828,-236.03192139,-20.75000000,0.00000000,355.99548340,185.97656250); //object(des_rockgp2_) (71)
	CreateDynamicObject(16114,3170.85986328,-243.72259521,-20.75000000,0.00000000,355.99548340,185.97656250); //object(des_rockgp2_) (72)
	CreateDynamicObject(16114,3171.75146484,-250.91680908,-20.75000000,0.00000000,355.99548340,185.97656250); //object(des_rockgp2_) (73)
	CreateDynamicObject(16114,3172.67382812,-258.35925293,-20.75000000,0.00000000,355.99548340,185.97656250); //object(des_rockgp2_) (74)
	CreateDynamicObject(16114,3173.10302734,-265.72344971,-20.75000000,0.00000000,355.99548340,185.97656250); //object(des_rockgp2_) (75)
	CreateDynamicObject(16114,3175.29394531,-274.52624512,-20.75000000,0.00000000,355.99548340,185.97656250); //object(des_rockgp2_) (76)
	CreateDynamicObject(16114,3176.20410156,-282.23791504,-20.75000000,0.00000000,355.99548340,185.97656250); //object(des_rockgp2_) (77)
	CreateDynamicObject(16114,3177.35864258,-287.83114624,-20.75000000,0.00000000,355.99548340,185.97656250); //object(des_rockgp2_) (78)
	CreateDynamicObject(3512,3235.02563477,-188.16067505,4.06885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3236.85473633,-197.91744995,4.06885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3238.62817383,-207.67288208,4.06885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3240.57373047,-217.35084534,4.06885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3242.36572266,-227.04862976,4.06885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3243.91015625,-235.36230469,4.06885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3245.62084961,-245.22564697,4.06885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3267.28027344,-285.41891479,3.81885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3264.28369141,-268.88018799,3.56885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3264.02124023,-267.69622803,3.81885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3261.08691406,-249.00708008,3.81885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3259.21582031,-239.93621826,3.81885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3259.95190430,-238.38958740,3.81885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3258.82812500,-233.07965088,3.81885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3255.39062500,-211.92521667,3.81885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3255.00097656,-210.24133301,3.81885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3253.57055664,-202.41957092,3.81885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3249.81542969,-184.55596924,3.81885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3200.40136719,-180.57128906,3.81885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3198.86035156,-172.96972656,3.81885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3204.03320312,-200.69140625,3.81885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3204.58398438,-203.63964844,3.81885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3209.66699219,-230.87500000,3.81885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3208.54687500,-225.69238281,3.81885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3209.95019531,-233.21191406,3.81885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3212.33300781,-250.06054688,3.81885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3263.46289062,-290.73522949,4.06885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3239.54858398,-294.71798706,4.06885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3934,3209.20117188,-357.25585938,3.95852804,0.00000000,0.00000000,9.99755859); //object(helipad01) (2)
	CreateDynamicObject(3934,3206.94335938,-342.64062500,3.95852804,0.00000000,0.00000000,9.99755859); //object(helipad01) (3)
	CreateDynamicObject(10183,3231.80175781,-197.13183594,3.93999600,0.00000000,0.00000000,325.99731445); //object(ferspaces) (1)
	CreateDynamicObject(10183,3239.24804688,-236.54589844,3.93999600,0.00000000,0.00000000,325.99182129); //object(ferspaces) (3)
	CreateDynamicObject(1597,3234.27539062,-182.42578125,6.46623468,0.00000000,357.98950195,190.48645020); //object(cntrlrsac1) (7)
	CreateDynamicObject(3512,3234.72290039,-186.68904114,4.06885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3233.12939453,-178.32095337,4.06885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(1597,3246.98046875,-250.62988281,6.46623468,0.00000000,0.00000000,190.48645020); //object(cntrlrsac1) (7)
	CreateDynamicObject(3512,3245.95678711,-246.56701660,4.06885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3247.60766602,-254.81819153,4.06885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(10183,3258.90429688,-171.03125000,3.93999600,0.00000000,0.00000000,235.99182129); //object(ferspaces) (4)
	CreateDynamicObject(8664,3269.00585938,-333.83007812,3.85589218,0.00000000,0.00000000,9.99755859); //object(casrylegrnd_lvs) (1)
	CreateDynamicObject(8664,3244.93457031,-196.59667969,3.86589217,0.00000000,0.00000000,189.99755859); //object(casrylegrnd_lvs) (2)
	CreateDynamicObject(3488,3199.29565430,-263.53735352,10.42944908,0.00000000,0.00000000,99.98657227); //object(vegasxrexhse07) (1)
	CreateDynamicObject(3485,3208.29687500,-313.48828125,10.89334202,0.00000000,0.00000000,99.99206543); //object(vegasxrexhse04) (1)
	CreateDynamicObject(8557,3240.47509766,-236.40374756,5.46555805,0.00000000,0.00000000,280.00000000); //object(vgshseing27) (1)
	CreateDynamicObject(8557,3233.52612305,-196.99749756,5.46555805,0.00000000,0.00000000,279.99755859); //object(vgshseing27) (2)
	CreateDynamicObject(3488,3264.16210938,-170.76869202,10.42944908,0.00000000,0.00000000,279.98657227); //object(vegasxrexhse07) (1)
	CreateDynamicObject(3512,3249.44799805,-182.84465027,3.81885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3246.37402344,-164.83772278,3.81885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3212.62231445,-252.07594299,3.81885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)
	CreateDynamicObject(3512,3215.77392578,-266.62448120,3.81885290,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b02) (5)

	// DMV
	CreateDynamicObject(970, 2071.6501464844, -1899.1999511719, 13.10000038147, 0, 0, 90);
	CreateDynamicObject(970, 2071.6501464844, -1903.3699951172, 13.10000038147, 0, 0, 90);
	CreateDynamicObject(970, 2071.6501464844, -1907.5400390625, 13.10000038147, 0, 0, 90);
	CreateDynamicObject(970, 2071.6501464844, -1915.8801269531, 13.10000038147, 0, 0, 90);
	CreateDynamicObject(970, 2071.6494140625, -1920.0498046875, 13.10000038147, 0, 0, 90);
	CreateDynamicObject(970, 2069.6000976563, -1922.3000488281, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(970, 2065.5, -1922.3000488281, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(970, 2061.3994140625, -1922.2998046875, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(970, 2053.1999511719, -1922.3000488281, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(970, 2049.099609375, -1922.2998046875, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(970, 2045, -1922.2780761719, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1237, 2072.1000976563, -1914, 12.39999961853, 0, 0, 0);
	CreateDynamicObject(1237, 2072.1000976563, -1909.4000244141, 12.39999961853, 0, 0, 0);
	CreateDynamicObject(1237, 2059.6999511719, -1922.8000488281, 12.39999961853, 0, 0, 0);
	CreateDynamicObject(1237, 2055, -1922.8000488281, 12.39999961853, 0, 0, 0);
	CreateDynamicObject(1361, 2049.1999511719, -1921.5999755859, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1361, 2049.1999511719, -1917.5999755859, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1361, 2049.1999511719, -1913.5999755859, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1361, 2049.1999511719, -1909.5999755859, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1361, 2049.1999511719, -1904.8000488281, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1361, 2049.1999511719, -1900.5, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1361, 2052.3999023438, -1900.4000244141, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1361, 2055.9995117188, -1900.4000244141, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1361, 2059.5986328125, -1900.3994140625, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1361, 2063.1982421875, -1900.3994140625, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1361, 2066.7978515625, -1900.3994140625, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1361, 2070.3999023438, -1900.4000244141, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1232, 2049.1999511719, -1921.5999755859, 11.10000038147, 0, 0, 0);
	CreateDynamicObject(1232, 2049.1999511719, -1917.5999755859, 11.10000038147, 0, 0, 0);
	CreateDynamicObject(1232, 2049.1999511719, -1913.5999755859, 11.10000038147, 0, 0, 0);
	CreateDynamicObject(1232, 2049.1999511719, -1909.5999755859, 11.10000038147, 0, 0, 0);
	CreateDynamicObject(1232, 2049.1999511719, -1904.8000488281, 11.10000038147, 0, 0, 0);
	CreateDynamicObject(1232, 2049.1999511719, -1900.5, 11.10000038147, 0, 0, 0);
	CreateDynamicObject(1232, 2052.3999023438, -1900.3000488281, 11.10000038147, 0, 0, 0);
	CreateDynamicObject(1232, 2056.1000976563, -1900.3000488281, 11.10000038147, 0, 0, 0);
	CreateDynamicObject(1232, 2059.6999511719, -1900.3000488281, 11.10000038147, 0, 0, 0);
	CreateDynamicObject(1232, 2063.1999511719, -1900.3000488281, 11.10000038147, 0, 0, 0);
	CreateDynamicObject(1232, 2066.8000488281, -1900.3000488281, 11.10000038147, 0, 0, 0);
	CreateDynamicObject(1232, 2070.3999023438, -1900.3000488281, 11.10000038147, 0, 0, 0);
	CreateDynamicObject(647, 2071.6999511719, -1922.5, 13.39999961853, 0, 0, 8.25);
	CreateDynamicObject(13011, 2063.8999023438, -1883.8000488281, 14.300000190735, 0, 0, 269.25);


	// Gym and New LSPD Out
	CreateDynamicObject(994,1539.09997559,-1651.30004883,12.60000038,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(997,1539.59997559,-1651.30004883,12.60000038,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(997,1539.59997559,-1656.30004883,12.60000038,0.00000000,0.00000000,269.99450684); //
	CreateDynamicObject(997,1539.59997559,-1661.30004883,12.60000038,0.00000000,0.00000000,269.98901367); //
	CreateDynamicObject(997,1539.59997559,-1666.30004883,12.60000038,0.00000000,0.00000000,269.98352051); //
	CreateDynamicObject(997,1539.59997559,-1671.30004883,12.60000038,0.00000000,0.00000000,269.97802734); //
	CreateDynamicObject(997,1539.59997559,-1676.30004883,12.60000038,0.00000000,0.00000000,269.97253418); //
	CreateDynamicObject(997,1539.59997559,-1681.30004883,12.60000038,0.00000000,0.00000000,269.96704102); //
	CreateDynamicObject(997,1539.59997559,-1686.30004883,12.60000038,0.00000000,0.00000000,269.96154785); //
	CreateDynamicObject(997,1539.59997559,-1691.30004883,12.60000038,0.00000000,0.00000000,269.95605469); //
	CreateDynamicObject(997,1539.59997559,-1696.30004883,12.60000038,0.00000000,0.00000000,269.95056152); //
	CreateDynamicObject(1237,1535.00000000,-1682.00000000,12.39999962,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1237,1538.00000000,-1681.80004883,12.39999962,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1237,1538.00000000,-1679.09997559,12.39999962,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1237,1538.00000000,-1676.39990234,12.39999962,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1237,1538.00000000,-1673.69982910,12.39999962,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1237,1538.00000000,-1670.99902344,12.39999962,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1237,1538.00000000,-1668.29882812,12.39999962,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1237,1538.00000000,-1665.59863281,12.39999962,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1237,1538.00000000,-1663.50000000,12.39999962,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1237,1535.00000000,-1663.30004883,12.39999962,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(994,1539.09997559,-1699.90002441,12.60000038,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(716,1536.40002441,-1683.00000000,12.39999962,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(716,1536.40002441,-1662.80004883,12.39999962,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(994,1504.00000000,-1744.00000000,12.50000000,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(994,1504.00000000,-1737.80004883,12.50000000,0.00000000,0.00000000,269.99450684); //
	CreateDynamicObject(997,1500.80004883,-1737.80004883,12.50000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(997,1496.19995117,-1737.80004883,12.50000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(997,1491.59985352,-1737.80004883,12.50000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(997,1486.99975586,-1737.80004883,12.50000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(997,1483.90002441,-1737.80004883,12.50000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(997,1476.30004883,-1737.80004883,12.50000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(997,1473.19946289,-1737.80004883,12.50000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(997,1468.59936523,-1737.80004883,12.50000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(997,1463.50000000,-1737.80004883,12.50000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(997,1458.30004883,-1737.80004883,12.50000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(994,1458.30004883,-1744.00000000,12.50000000,0.00000000,0.00000000,269.99450684); //
	CreateDynamicObject(994,1458.30004883,-1737.80004883,12.50000000,0.00000000,0.00000000,269.99450684); //
	CreateDynamicObject(997,2235.30004883,-1727.19995117,12.50000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(994,2238.39990234,-1721.00000000,12.50000000,0.00000000,0.00000000,270.75000000); //
	CreateDynamicObject(997,2231.39990234,-1727.19995117,12.50000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(997,2227.60009766,-1727.19995117,12.50000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(997,2223.80004883,-1726.40002441,12.50000000,0.00000000,0.00000000,345.75000000); //
	CreateDynamicObject(997,2221.60009766,-1723.69995117,12.50000000,0.00000000,0.00000000,307.49523926); //
	CreateDynamicObject(997,2221.60009766,-1720.09997559,12.50000000,0.00000000,0.00000000,268.49084473); //
	CreateDynamicObject(997,2222.00000000,-1716.19995117,12.50000000,0.00000000,0.00000000,263.98937988); //
	CreateDynamicObject(997,2222.39990234,-1712.40002441,12.50000000,0.00000000,0.00000000,263.98498535); //
	CreateDynamicObject(997,2223.00000000,-1708.59997559,12.50000000,0.00000000,0.00000000,260.97949219); //
	CreateDynamicObject(994,2223.50000000,-1704.80004883,12.50000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(997,2223.60009766,-1704.80004883,12.50000000,0.00000000,0.00000000,261.72399902); //
	CreateDynamicObject(11245,2228.80004883,-1720.09997559,19.70000076,0.00000000,0.00000000,180.00000000); //
	CreateDynamicObject(11245,2228.79980469,-1720.09960938,19.70000076,0.00000000,0.00000000,212.99450684); //
	CreateDynamicObject(11245,2228.79980469,-1720.09960938,19.70000076,0.00000000,0.00000000,239.24194336); //

	// Tax Vault
	CreateDynamicObject(2614, 361.70001220703, 165.10000610352, 1020.9000244141, 0, 0, 89.247436523438);
	CreateDynamicObject(2634, 369.5, 162.39999389648, 1020.4000244141, 0, 0, 269.99816894531);
	CreateDynamicObject(7930, 363.5, 168.80000305176, 1023.200012207, 0, 0, 90.7470703125);
	CreateDynamicObject(7930, 363.5, 168.80000305176, 1020.200012207, 0, 0, 90.741577148438);
	CreateDynamicObject(2290, 367.20001220703, 167.10000610352, 1019, 0, 0, 270);
	CreateDynamicObject(2571, 363, 163.60000610352, 1019, 0, 0, 88.494873046875);
	CreateDynamicObject(2332, 367.10000610352, 168.69999694824, 1019.5, 0, 0, 0.7470703125);
	CreateDynamicObject(2332, 367.10000610352, 168.69999694824, 1020.4000244141, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 367.10000610352, 168.69999694824, 1021.299987793, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 367.10000610352, 168.69999694824, 1022.200012207, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 365.79998779297, 168.69999694824, 1019.5, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 365.79998779297, 168.69999694824, 1020.4000244141, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 365.79998779297, 168.69999694824, 1021.299987793, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 365.79998779297, 168.69999694824, 1022.200012207, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 364.39999389648, 168.60000610352, 1019.5, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 364.39999389648, 168.60000610352, 1020.4000244141, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 364.39999389648, 168.60000610352, 1021.299987793, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 364.39999389648, 168.60000610352, 1022.200012207, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 363.10000610352, 168.5, 1019.5, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 363.10000610352, 168.5, 1020.4000244141, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 363.10000610352, 168.5, 1021.299987793, 0, 0, 0.7415771484375);
	CreateDynamicObject(2332, 363.10000610352, 168.5, 1022.200012207, 0, 0, 0.7415771484375);
	CreateDynamicObject(1361, 362.10000610352, 167.69999694824, 1019.700012207, 0, 0, 0);
	CreateDynamicObject(631, 362, 167.80000305176, 1020.700012207, 0, 0, 16.495971679688);
	CreateDynamicObject(1361, 362.10000610352, 162.69999694824, 1019.700012207, 0, 0, 0);
	CreateDynamicObject(631, 362.29998779297, 162.69999694824, 1020.799987793, 0, 0, 21.741943359375);
	CreateDynamicObject(2332, 367.70001220703, 167.60000610352, 1021.5999755859, 0, 0, 270);
	CreateDynamicObject(2332, 367.70001220703, 167.60000610352, 1020.700012207, 0, 0, 269.98901367188);
	CreateDynamicObject(2332, 367.70001220703, 166.60000610352, 1021.5999755859, 0, 0, 269.98901367188);
	CreateDynamicObject(2332, 367.70001220703, 166.60000610352, 1020.700012207, 0, 0, 269.98901367188);
	CreateDynamicObject(2332, 367.70001220703, 164.10000610352, 1020.4000244141, 0, 0, 269.98901367188);
	CreateDynamicObject(2332, 367.70001220703, 164.10000610352, 1021.299987793, 0, 0, 269.98901367188);
	CreateDynamicObject(2332, 367.70001220703, 164.10000610352, 1022.200012207, 0, 0, 269.98901367188);
	CreateDynamicObject(1550, 366.39999389648, 167.39999389648, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 366, 167.80000305176, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 366.39999389648, 168, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 366.89999389648, 168, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 366.39999389648, 165.10000610352, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 366.39999389648, 164.5, 1019.4000244141, 0, 0, 0);
	CreateDynamicObject(1550, 366.79998779297, 164.30000305176, 1019.5, 0, 0, 0);
	CreateDynamicObject(1550, 367.29998779297, 164.19999694824, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 366.70001220703, 164, 1019.4000244141, 0, 0, 0);
	CreateDynamicObject(1550, 366.29998779297, 164, 1019.4000244141, 0, 0, 0);
	CreateDynamicObject(1550, 367.20001220703, 165.30000305176, 1019.799987793, 0, 0, 0);
	CreateDynamicObject(1550, 364.60000610352, 167.39999389648, 1019.0999755859, 0, 90, 322.49816894531);
	CreateDynamicObject(1550, 363.20001220703, 167.10000610352, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.79998779297, 166.89999389648, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.60000610352, 163.30000305176, 1019.4000244141, 0, 0, 0);
	CreateDynamicObject(1550, 362.89999389648, 162.80000305176, 1019.4000244141, 0, 0, 0);
	CreateDynamicObject(1550, 363.20001220703, 163.30000305176, 1019.4000244141, 0, 0, 0);
	CreateDynamicObject(1550, 365.10000610352, 167.60000610352, 1019.0999755859, 0, 90, 293.2470703125);
	CreateDynamicObject(16378, 365.5, 159.19999694824, 1019.7299804688, 0, 0, 0);
	CreateDynamicObject(2332, 361.89999389648, 158.5, 1021.4000244141, 0, 0, 89.247436523438);
	CreateDynamicObject(2332, 361.89999389648, 158.5, 1020.5, 0, 0, 89.241943359375);
	CreateDynamicObject(2332, 361.89999389648, 158.5, 1019.5999755859, 0, 0, 89.241943359375);
	CreateDynamicObject(2332, 361.89999389648, 159.69999694824, 1021.4000244141, 0, 0, 89.241943359375);
	CreateDynamicObject(2332, 361.89999389648, 159.69999694824, 1020.5, 0, 0, 89.241943359375);
	CreateDynamicObject(2332, 361.89999389648, 159.69999694824, 1019.5999755859, 0, 0, 89.241943359375);
	CreateDynamicObject(1550, 362.89999389648, 162.39999389648, 1019.4000244141, 0, 0, 0);
	CreateDynamicObject(1550, 363, 162, 1019.4000244141, 0, 0, 0);
	CreateDynamicObject(1550, 363.29998779297, 162.19999694824, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 363.20001220703, 162.60000610352, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 363, 163.19999694824, 1019.4000244141, 0, 0, 0);
	CreateDynamicObject(1550, 367.39999389648, 157.69999694824, 1021, 0, 0, 0);
	CreateDynamicObject(2614, 361.70001220703, 165.10000610352, 1020.9000244141, 0, 0, 89.247436523438);
	CreateDynamicObject(1549, 365.39999389648, 159.10000610352, 1018.9000244141, 0, 0, 0);
	CreateDynamicObject(2267, 367.70001220703, 159.30000305176, 1015.700012207, 0, 0, 270);
	CreateDynamicObject(1550, 367.20001220703, 165.69999694824, 1019.700012207, 0, 49.998779296875, 287.24853515625);
	CreateDynamicObject(1550, 367.10000610352, 166.30000305176, 1019.5999755859, 0, 270, 275.99853515625);
	CreateDynamicObject(1550, 363.29998779297, 162.89999389648, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 363.5, 162.5, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 363.5, 161.89999389648, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 363.29998779297, 161.80000305176, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.79998779297, 161.60000610352, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.39999389648, 161.89999389648, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 363.20001220703, 161.39999389648, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 363, 161.10000610352, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.39999389648, 161.19999694824, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.70001220703, 161.30000305176, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.29998779297, 161.60000610352, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 361.79998779297, 161.69999694824, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 361.89999389648, 162.10000610352, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 362, 161.30000305176, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 361.5, 161, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 361.79998779297, 161.39999389648, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 361.89999389648, 160.80000305176, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.39999389648, 161, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.10000610352, 160.60000610352, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.60000610352, 160.60000610352, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.79998779297, 160.80000305176, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.29998779297, 160.30000305176, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 361.79998779297, 160.30000305176, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 361.70001220703, 160.69999694824, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 361.89999389648, 162.10000610352, 1019.799987793, 0, 0, 0);
	CreateDynamicObject(1550, 361.70001220703, 161.69999694824, 1019.799987793, 0, 0, 0);
	CreateDynamicObject(1550, 361.70001220703, 161.30000305176, 1019.799987793, 0, 0, 0);
	CreateDynamicObject(1550, 362, 161.5, 1019.799987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.10000610352, 161.69999694824, 1019.799987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.29998779297, 161.80000305176, 1019.799987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.5, 161.5, 1019.799987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.29998779297, 161.19999694824, 1019.799987793, 0, 0, 0);
	CreateDynamicObject(1550, 361.79998779297, 160.89999389648, 1019.799987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.10000610352, 160.89999389648, 1019.799987793, 0, 0, 0);
	CreateDynamicObject(1550, 362.20001220703, 161.80000305176, 1020, 0, 0, 0);
	CreateDynamicObject(1550, 361.89999389648, 161.69999694824, 1020, 0, 0, 0);
	CreateDynamicObject(1550, 361.70001220703, 161.19999694824, 1020, 0, 0, 0);
	CreateDynamicObject(1550, 361.79998779297, 161.5, 1020, 0, 0, 0);
	CreateDynamicObject(1550, 362, 161.69999694824, 1020, 0, 0, 0);
	CreateDynamicObject(1550, 362, 161.30000305176, 1020, 0, 0, 0);
	CreateDynamicObject(1550, 361.89999389648, 161, 1020, 0, 0, 0);
	CreateDynamicObject(1550, 362.10000610352, 161.60000610352, 1020, 0, 0, 0);
	CreateDynamicObject(1550, 367.39999389648, 158, 1021, 0, 0, 0);
	CreateDynamicObject(1550, 367.60000610352, 158.69999694824, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 367.60000610352, 159.19999694824, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 367.60000610352, 159.69999694824, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1550, 367.5, 160.89999389648, 1019.299987793, 0, 0, 0);
	CreateDynamicObject(1226, 369.10000610352, 160.30000305176, 1019.5999755859, 0, 0, 56.25);




	// Prison
	CreateDynamicObject(984,2488.60009766,-1259.00000000,1062.90002441,0.00000000,0.00000000,272.25000000); // Prison Fence
	CreateDynamicObject(984,2486.60009766,-1238.90002441,1062.90002441,0.00000000,0.00000000,272.25000000); // Prison Fence
	CreateDynamicObject(984,2486.60009766,-1238.90002441,1064.19995117,0.00000000,0.00000000,272.25000000); // Prison Fence
	CreateDynamicObject(984,2486.59960938,-1238.89941406,1065.50000000,0.00000000,0.00000000,272.24670410); // Prison Fence
	CreateDynamicObject(984,2488.60009766,-1259.00000000,1064.19995117,0.00000000,0.00000000,272.25000000); // Prison Fence
	CreateDynamicObject(984,2488.60009766,-1259.00000000,1065.50000000,0.00000000,0.00000000,272.25000000); // Prison Fence

	// SAPD Between
	CreateDynamicObject(1215,254.931777,85.353546,1001.001831,0.000000,0.000000,0.000000); // SAPD Office Between
	CreateDynamicObject(1215,254.931777,85.870002,1001.001831,0.000000,0.000000,0.000000); // SAPD Office Between
	CreateDynamicObject(1215,254.931777,86.386558,1001.001831,0.000000,0.000000,0.000000); // SAPD Office Between


 	// Idlewood Gas Station Fences
	CreateDynamicObject(970,1942.48376465,-1766.52941895,12.94207954,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (1)
	CreateDynamicObject(970,1942.48632812,-1770.73071289,12.94207954,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (2)
	CreateDynamicObject(970,1942.49255371,-1774.95690918,12.94207954,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (3)
	CreateDynamicObject(970,1942.50024414,-1779.18383789,12.94207954,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (4)
	CreateDynamicObject(970,1940.84838867,-1779.14770508,12.94207954,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (5)
	CreateDynamicObject(970,1940.82446289,-1774.85656738,12.94207954,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (6)
	CreateDynamicObject(970,1940.81445312,-1770.59240723,12.94207954,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (7)
	CreateDynamicObject(970,1940.82299805,-1766.36853027,12.94207954,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (8)
	CreateDynamicObject(1569,1564.05126953,-1667.39648438,27.39560699,0.00000000,0.00000000,0.00000000); //object(adam_v_door) (1)

	// SAPD Interior, Exterior & Garage
	CreateDynamicObject(970,1544.79089355,-1637.28112793,27.95359612,0.00000000,0.00000000,0.00000000); //DynamicObject(fencesmallb) (1)
	CreateDynamicObject(970,1549.14111328,-1637.28027344,27.95359612,0.00000000,0.00000000,0.00000000); //DynamicObject(fencesmallb) (2)
	CreateDynamicObject(970,1553.41735840,-1637.28027344,27.95359612,0.00000000,0.00000000,0.00000000); //DynamicObject(fencesmallb) (3)
	CreateDynamicObject(970,1557.76708984,-1637.28027344,27.95359612,0.00000000,0.00000000,0.00000000); //DynamicObject(fencesmallb) (4)
	CreateDynamicObject(970,1561.96630859,-1637.28027344,27.95359612,0.00000000,0.00000000,0.00000000); //DynamicObject(fencesmallb) (5)
	CreateDynamicObject(970,1566.21630859,-1637.28027344,27.95359612,0.00000000,0.00000000,0.00000000); //DynamicObject(fencesmallb) (6)
	CreateDynamicObject(970,1570.46606445,-1637.28027344,27.95359612,0.00000000,0.00000000,0.00000000); //DynamicObject(fencesmallb) (7)
	CreateDynamicObject(970,1574.74133301,-1637.28027344,27.95359612,0.00000000,0.00000000,0.00000000); //DynamicObject(fencesmallb) (8)
	CreateDynamicObject(970,1577.80664062,-1639.56396484,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (9)
	CreateDynamicObject(970,1577.79174805,-1643.91601562,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (10)
	CreateDynamicObject(970,1577.80053711,-1648.26770020,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (11)
	CreateDynamicObject(970,1577.81018066,-1652.56835938,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (12)
	CreateDynamicObject(970,1577.82360840,-1656.86816406,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (13)
	CreateDynamicObject(970,1577.86291504,-1661.11816406,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (14)
	CreateDynamicObject(970,1577.85290527,-1665.40075684,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (15)
	CreateDynamicObject(970,1577.84338379,-1669.75097656,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (16)
	CreateDynamicObject(970,1577.83422852,-1674.00170898,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (17)
	CreateDynamicObject(970,1577.82177734,-1678.25024414,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (18)
	CreateDynamicObject(970,1577.81457520,-1682.47644043,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (19)
	CreateDynamicObject(970,1577.80590820,-1686.72631836,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (20)
	CreateDynamicObject(970,1577.79833984,-1690.92675781,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (21)
	CreateDynamicObject(970,1577.78869629,-1695.12719727,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (22)
	CreateDynamicObject(970,1577.77587891,-1699.32617188,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (23)
	CreateDynamicObject(970,1577.76440430,-1703.57592773,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (24)
	CreateDynamicObject(970,1577.75207520,-1707.79968262,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (25)
	CreateDynamicObject(970,1577.74096680,-1712.07360840,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (26)
	CreateDynamicObject(970,1575.26379395,-1714.37219238,27.95359612,0.00000000,0.00000000,180.00000000); //DynamicObject(fencesmallb) (27)
	CreateDynamicObject(970,1570.98278809,-1714.34692383,27.95359612,0.00000000,0.00000000,179.99450684); //DynamicObject(fencesmallb) (28)
	CreateDynamicObject(970,1566.72412109,-1714.34838867,27.95359612,0.00000000,0.00000000,179.99450684); //DynamicObject(fencesmallb) (29)
	CreateDynamicObject(970,1562.49572754,-1714.34582520,27.95359612,0.00000000,0.00000000,179.99450684); //DynamicObject(fencesmallb) (30)
	CreateDynamicObject(970,1558.26892090,-1714.34130859,27.95359612,0.00000000,0.00000000,179.99450684); //DynamicObject(fencesmallb) (31)
	CreateDynamicObject(970,1554.04333496,-1714.33496094,27.95359612,0.00000000,0.00000000,179.99450684); //DynamicObject(fencesmallb) (32)
	CreateDynamicObject(970,1549.81799316,-1714.32873535,27.95359612,0.00000000,0.00000000,179.99450684); //DynamicObject(fencesmallb) (33)
	CreateDynamicObject(970,1545.59289551,-1714.32116699,27.95359612,0.00000000,0.00000000,179.99450684); //DynamicObject(fencesmallb) (34)
	CreateDynamicObject(970,1542.66857910,-1711.92492676,27.95359612,0.00000000,0.00000000,89.99450684); //DynamicObject(fencesmallb) (35)
	CreateDynamicObject(970,1542.66015625,-1707.70080566,27.95359612,0.00000000,0.00000000,89.99450684); //DynamicObject(fencesmallb) (36)
	CreateDynamicObject(970,1542.64746094,-1703.47424316,27.95359612,0.00000000,0.00000000,89.99450684); //DynamicObject(fencesmallb) (37)
	CreateDynamicObject(970,1546.46936035,-1700.84899902,27.95359612,0.00000000,0.00000000,359.99450684); //DynamicObject(fencesmallb) (38)
	CreateDynamicObject(970,1550.74743652,-1700.83483887,27.95359612,0.00000000,0.00000000,359.98901367); //DynamicObject(fencesmallb) (39)
	CreateDynamicObject(970,1553.63476562,-1698.10791016,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (40)
	CreateDynamicObject(970,1553.62658691,-1693.77722168,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (41)
	CreateDynamicObject(970,1553.60217285,-1689.51794434,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (42)
	CreateDynamicObject(970,1553.59069824,-1685.26623535,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (43)
	CreateDynamicObject(970,1553.57897949,-1681.04003906,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (44)
	CreateDynamicObject(970,1553.58093262,-1670.81103516,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (45)
	CreateDynamicObject(970,1553.56982422,-1666.50891113,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (46)
	CreateDynamicObject(970,1553.53320312,-1662.25659180,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (47)
	CreateDynamicObject(970,1553.54724121,-1658.03039551,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (48)
	CreateDynamicObject(970,1553.53686523,-1653.75488281,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (49)
	CreateDynamicObject(970,1550.29052734,-1650.73937988,27.95359612,0.00000000,0.00000000,179.98901367); //DynamicObject(fencesmallb) (50)
	CreateDynamicObject(970,1545.93115234,-1650.77368164,27.95359612,0.00000000,0.00000000,179.98352051); //DynamicObject(fencesmallb) (51)
	CreateDynamicObject(970,1542.56152344,-1648.35388184,27.95359612,0.00000000,0.00000000,89.98352051); //DynamicObject(fencesmallb) (52)
	CreateDynamicObject(970,1542.55651855,-1644.07580566,27.95359612,0.00000000,0.00000000,89.98352051); //DynamicObject(fencesmallb) (53)
	CreateDynamicObject(970,1542.54882812,-1639.84790039,27.95359612,0.00000000,0.00000000,89.98352051); //DynamicObject(fencesmallb) (54)
	CreateDynamicObject(1215,1542.68469238,-1637.52331543,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (1)
	CreateDynamicObject(1215,1577.41918945,-1637.37463379,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (2)
	CreateDynamicObject(1215,1543.00610352,-1650.63269043,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (3)
	CreateDynamicObject(1215,1553.51025391,-1650.73876953,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (4)
	CreateDynamicObject(1215,1553.87353516,-1678.61999512,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (5)
	CreateDynamicObject(1215,1553.90393066,-1672.60510254,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (6)
	CreateDynamicObject(1215,1553.38757324,-1700.83959961,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (7)
	CreateDynamicObject(1215,1543.25537109,-1700.90600586,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (8)
	CreateDynamicObject(1215,1542.91027832,-1714.26464844,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (9)
	CreateDynamicObject(1215,1577.68847656,-1714.46398926,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (10)
	CreateDynamicObject(970,1553.58093262,-1670.81103516,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (55)
	CreateDynamicObject(983,1544.67871094,-1620.55090332,13.06636715,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (1)
	CreateDynamicObject(983,1544.66882324,-1635.94934082,13.06636715,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (2)
	CreateDynamicObject(1495,1582.60693359,-1637.98974609,12.39045906,0.00000000,0.00000000,0.00000000); //object(gen_doorext01) (1)
	CreateDynamicObject(2951,264.64941406,79.29980469,1001.00000000,0.00000000,90.00000000,0.24719238); //object(a51_labdoor) (1)
	CreateDynamicObject(2951,272.10000610,79.54000092,1001.00000000,0.00000000,90.00000000,183.24987793); //object(a51_labdoor) (2)
	CreateDynamicObject(3397,269.59960938,80.09960938,1000.00000000,0.00000000,0.00000000,271.99951172); //object(a51_sdsk_1_) (1)
	CreateDynamicObject(2921,270.39999390,81.50000000,1002.90002441,0.00000000,0.00000000,356.00000000); //object(kmb_cam) (1)
	CreateDynamicObject(16782,269.19921875,79.59960938,1002.09997559,0.00000000,0.00000000,92.74658203); //object(a51_radar_scan) (1)
	CreateDynamicObject(1671,269.89999390,81.50000000,1000.50000000,0.00000000,0.00000000,337.99987793); //object(swivelchair_a) (1)
	CreateDynamicObject(2395,154.69999695,157.39999390,519.00000000,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (7)
	CreateDynamicObject(2008,252.79980469,83.00000000,1001.40002441,0.00000000,0.00000000,29.98718262); //object(officedesk1) (1)
	CreateDynamicObject(1715,254.39999390,82.19999695,1001.40002441,0.00000000,0.00000000,229.99328613); //object(kb_swivelchair2) (1)
	CreateDynamicObject(1722,252.89999390,84.80000305,1001.40002441,0.00000000,0.00000000,211.99218750); //object(off_chairnu) (1)
	CreateDynamicObject(1722,252.10000610,84.30000305,1001.40002441,0.00000000,0.00000000,211.99218750); //object(off_chairnu) (2)
	CreateDynamicObject(633,251.50000000,82.39941406,1002.40002441,0.00000000,0.00000000,289.99511719); //object(veg_palmkb10) (1)
	CreateDynamicObject(2172,256.59960938,82.29980469,1001.09997559,0.00000000,0.00000000,179.99450684); //object(med_office2_desk_1) (1)
	CreateDynamicObject(2172,258.50000000,82.29980469,1001.09997559,0.00000000,0.00000000,179.99450684); //object(med_office2_desk_1) (2)
	CreateDynamicObject(1715,257.89999390,83.69999695,1001.40002441,0.00000000,0.00000000,19.99511719); //object(kb_swivelchair2) (2)
	CreateDynamicObject(1715,256.00000000,83.59999847,1001.40002441,0.00000000,0.00000000,15.99060059); //object(kb_swivelchair2) (4)
	CreateDynamicObject(1703,251.30000305,88.50000000,1001.40002441,0.00000000,0.00000000,90.00000000); //object(kb_couch02) (1)
	CreateDynamicObject(1703,252.09960938,91.19921875,1001.40002441,0.00000000,0.00000000,0.00000000); //object(kb_couch02) (2)
	CreateDynamicObject(1808,251.30000305,91.19999695,1001.40002441,0.00000000,0.00000000,43.00000000); //object(cj_watercooler2) (1)
	CreateDynamicObject(2637,217.59960938,80.69921875,1004.40002441,0.00000000,0.00000000,269.74182129); //object(cj_pizza_table2) (3)
	CreateDynamicObject(2289,218.29980469,82.79980469,1006.20001221,0.00000000,0.00000000,0.00000000); //object(frame_2) (1)
	CreateDynamicObject(2267,253.89999390,81.86000061,1003.50000000,0.00000000,0.00000000,180.00000000); //object(frame_wood_3) (2)
	CreateDynamicObject(2637,217.59960938,78.59999847,1004.40002441,0.00000000,0.00000000,269.74731445); //object(cj_pizza_table2) (3)
	CreateDynamicObject(2637,217.59960938,76.50000000,1004.40002441,0.00000000,0.00000000,269.74182129); //object(cj_pizza_table2) (3)
	CreateDynamicObject(2184,219.39999390,68.09999847,1004.00000000,0.00000000,0.00000000,161.99890137); //object(med_office6_desk_2) (1)
	CreateDynamicObject(2164,221.89999390,68.09999847,1004.00000000,0.00000000,0.00000000,270.00000000); //object(med_office_unit_5) (1)
	CreateDynamicObject(2167,221.89999390,66.30000305,1004.00000000,0.00000000,0.00000000,270.00000000); //object(med_office_unit_7) (1)
	CreateDynamicObject(1714,217.69999695,66.50000000,1004.00000000,0.00000000,0.00000000,149.99633789); //object(kb_swivelchair1) (1)
	CreateDynamicObject(1704,219.39941406,69.69921875,1004.00000000,0.00000000,0.00000000,325.99182129); //object(kb_chair03) (1)
	CreateDynamicObject(1704,217.30000305,70.09999847,1004.00000000,0.00000000,0.00000000,359.99450684); //object(kb_chair03) (2)
	CreateDynamicObject(2200,219.89999390,72.80000305,1004.09997559,0.00000000,0.00000000,0.00000000); //object(med_office5_unit_1) (1)
	CreateDynamicObject(2200,217.69999695,72.80000305,1004.09997559,0.00000000,0.00000000,0.00000000); //object(med_office5_unit_1) (2)
	CreateDynamicObject(7091,218.19999695,60.59999847,1107.80004883,0.00000000,0.00000000,0.00000000); //object(vegasflag02) (1)
	CreateDynamicObject(2614,219.60000610,65.90000153,1006.09997559,0.00000000,0.00000000,180.00000000); //object(cj_us_flag) (1)
	CreateDynamicObject(1671,217.60000610,82.50000000,1004.50000000,0.00000000,0.00000000,0.00000000); //object(swivelchair_a) (2)
	CreateDynamicObject(1671,219.10000610,81.30000305,1004.50000000,0.00000000,0.00000000,270.00000000); //object(swivelchair_a) (3)
	CreateDynamicObject(1671,219.10000610,79.50000000,1004.50000000,0.00000000,0.00000000,270.00000000); //object(swivelchair_a) (5)
	CreateDynamicObject(1671,219.10000610,77.69999695,1004.50000000,0.00000000,0.00000000,270.00000000); //object(swivelchair_a) (7)
	CreateDynamicObject(1671,219.10000610,75.90000153,1004.50000000,0.00000000,0.00000000,270.00000000); //object(swivelchair_a) (9)
	CreateDynamicObject(1671,216.10000610,76.00000000,1004.50000000,0.00000000,0.00000000,90.00000000); //object(swivelchair_a) (10)
	CreateDynamicObject(1671,216.10000610,77.80000305,1004.50000000,0.00000000,0.00000000,90.00000000); //object(swivelchair_a) (12)
	CreateDynamicObject(1671,216.10000610,79.40000153,1004.50000000,0.00000000,0.00000000,90.00000000); //object(swivelchair_a) (14)
	CreateDynamicObject(1671,216.10000610,81.00000000,1004.50000000,0.00000000,0.00000000,90.00000000); //object(swivelchair_a) (17)
	CreateDynamicObject(1703,242.89999390,70.09999847,1002.59997559,0.00000000,0.00000000,90.00000000); //object(kb_couch02) (3)
	CreateDynamicObject(1703,242.89999390,63.09999847,1002.59997559,0.00000000,0.00000000,90.00000000); //object(kb_couch02) (4)
	CreateDynamicObject(2614,246.39999390,72.30000305,1006.09997559,0.00000000,0.00000000,0.00000000); //object(cj_us_flag) (2)
	CreateDynamicObject(2612,218.00000000,72.77999878,1006.70001221,0.00000000,0.00000000,0.00000000); //object(police_nb2) (1)
	CreateDynamicObject(2611,220.69999695,72.77999878,1006.70001221,0.00000000,0.00000000,0.00000000); //object(police_nb1) (1)
	CreateDynamicObject(1215,254.931777,85.353546,1001.001831,0.000000,0.000000,0.000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(1215,254.931777,85.870002,1001.001831,0.000000,0.000000,0.000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(1215,254.931777,86.386558,1001.001831,0.000000,0.000000,0.000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,256.567230,85.237609,1001.441955,0.000000,0.000000,0.000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,253.326797,85.388061,1001.408813,0.000000,0.000000,-180.000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,250.600021,85.254783,1001.408020,0.000000,0.000000,0.000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,250.553466,85.231056,1004.123474,0.000000,0.000000,0.000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,253.314941,85.389854,1004.129272,0.000000,0.000000,-180.000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,259.306549,85.365196,1004.129272,0.000000,0.000000,-180.000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,256.567230,85.237609,1004.169067,0.000000,0.000000,0.000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,259.294555,85.347633,1001.415832,0.000000,0.000000,-180.000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,256.641754,85.393638,1003.450927,0.000000,0.000000,-180.000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,253.695861,85.249870,1003.445861,0.000000,0.000000,0.000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,254.829906,84.834633,1001.464904,0.000000,0.000000,-90); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,255.050000,82.078000,1001.464904,0.000000,0.000000,90); //object(cj_sports_wall) (3)
	CreateDynamicObject(1703,242.89999390,67.59999847,1002.59997559,0.00000000,0.00000000,90.00000000); //object(kb_couch02) (3)

	// Bank
	CreateDynamicObject(1649, 2245.282714, 1632.565185, 962.353332, 0.000000, 0.000000, 14.300009);
	CreateDynamicObject(1649, 2245.282714, 1632.565185, 965.603332, 0.000000, 0.000000, 14.300009);
	CreateDynamicObject(1649, 2238.931884, 1631.790405, 962.353332, 0.000000, 0.000000, -2.199988);
	CreateDynamicObject(1649, 2234.593261, 1631.956787, 962.353332, 0.000000, 0.000000, -2.199988);
	CreateDynamicObject(1649, 2234.593261, 1631.956787, 965.633666, 0.000000, 0.000000, -2.199988);
	CreateDynamicObject(1649, 2238.932617, 1631.790893, 965.633666, 0.000000, 0.000000, -2.199988);
	CreateDynamicObject(1649, 2245.282714, 1632.565185, 962.353332, 0.000000, 0.000000, 14.300009);
	CreateDynamicObject(1649, 2245.282714, 1632.565185, 965.603332, 0.000000, 0.000000, 14.300009);
	CreateDynamicObject(1649, 2238.931884, 1631.790405, 962.353332, 0.000000, 0.000000, -2.199988);
	CreateDynamicObject(1649, 2234.593261, 1631.956787, 962.353332, 0.000000, 0.000000, -2.199988);
	CreateDynamicObject(1649, 2234.593261, 1631.956787, 965.633666, 0.000000, 0.000000, -2.199988);
	CreateDynamicObject(1649, 2238.932617, 1631.790893, 965.633666, 0.000000, 0.000000, -2.199988);
	CreateDynamicObject(14623,2239.19921875,1651.29980469,966.29998779,0.00000000,0.00000000,6.74011230); //object(mafcasmain1) (2)
	CreateDynamicObject(9163,2235.50000000,1673.59960938,959.40002441,0.00000000,270.00000000,78.49182129); //object(shop04_lvs) (1)
	CreateDynamicObject(9163,2225.09960938,1671.19921875,959.40002441,0.00000000,270.00000000,106.49047852); //object(shop04_lvs) (2)
	CreateDynamicObject(2946,2228.10009766,1669.09997559,960.70001221,0.00000000,0.00000000,287.24853516); //object(cr_door_03) (1)
	CreateDynamicObject(2946,2228.30004883,1669.09997559,960.70001221,0.00000000,0.00000000,107.24307251); //object(cr_door_03) (2)
	CreateDynamicObject(2207,2304.80004883,1637.00000000,892.09997559,0.00000000,0.00000000,0.00000000); //object(med_office7_desk_1) (1)
	CreateDynamicObject(1536,2243.10009766,1669.01977539,960.70001221,0.00000000,0.00000000,347.25000000); //object(gen_doorext15) (1)
	CreateDynamicObject(2796,2244.00000000,1668.90002441,963.59997559,0.00000000,0.00000000,347.25000000); //object(cj_air_d_6) (1)
	CreateDynamicObject(626,2226.50000000,1667.69995117,962.70001221,0.00000000,0.00000000,18.00000000); //object(veg_palmkb2) (1)
	CreateDynamicObject(626,2230.89990234,1669.19995117,962.70001221,0.00000000,0.00000000,17.99560547); //object(veg_palmkb2) (2)
	CreateDynamicObject(1892,2228.39990234,1667.59997559,960.70001221,0.00000000,0.00000000,18.00000000); //object(security_gatsh) (1)
	CreateDynamicObject(983,2225.39990234,1669.59997559,961.40002441,0.00000000,0.00000000,54.00000000); //object(fenceshit3) (3)
	CreateDynamicObject(983,2225.39990234,1669.59997559,962.70001221,0.00000000,0.00000000,53.99780273); //object(fenceshit3) (4)
	CreateDynamicObject(983,2225.39990234,1669.59997559,964.00000000,0.00000000,0.00000000,53.99780273); //object(fenceshit3) (5)
	CreateDynamicObject(983,2229.89990234,1671.40002441,961.40002441,0.00000000,0.00000000,354.74780273); //object(fenceshit3) (6)
	CreateDynamicObject(983,2229.89990234,1671.40002441,962.70001221,0.00000000,0.00000000,354.74304199); //object(fenceshit3) (7)
	CreateDynamicObject(983,2229.89990234,1671.40002441,964.00000000,0.00000000,0.00000000,354.74304199); //object(fenceshit3) (8)
	CreateDynamicObject(2661,2228.19995117,1669.09997559,963.50000000,0.00000000,0.00000000,17.25000000); //object(cj_banner07) (1)
	CreateDynamicObject(2714,2228.19921875,1669.09960938,964.20001221,0.00000000,0.00000000,16.49597168); //object(cj_open_sign_2) (1)
	CreateDynamicObject(3462,2234.50000000,1669.90002441,962.09997559,0.00000000,0.00000000,120.75000000); //object(csrangel_lvs) (1)
	CreateDynamicObject(3462,2237.39990234,1669.69995117,962.09997559,0.00000000,0.00000000,64.49487305); //object(csrangel_lvs) (2)
	CreateDynamicObject(2773,2233.69995117,1669.59997559,961.29998779,0.00000000,0.00000000,42.00000000); //object(cj_airprt_bar) (1)
	CreateDynamicObject(2773,2235.89990234,1668.69995117,961.29998779,0.00000000,0.00000000,85.74523926); //object(cj_airprt_bar) (2)
	CreateDynamicObject(2773,2238.30004883,1669.19995117,961.29998779,0.00000000,0.00000000,117.74230957); //object(cj_airprt_bar) (3)
	CreateDynamicObject(2745,2235.89990234,1669.80004883,961.79998779,0.00000000,0.00000000,0.75000000); //object(cj_stat_3) (1)
	CreateDynamicObject(2780,2235.60009766,1669.50000000,951.59997559,0.00000000,0.00000000,0.00000000); //object(cj_smoke_mach) (1)
	CreateDynamicObject(632,2233.50000000,1670.19995117,961.20001221,0.00000000,0.00000000,0.00000000); //object(veg_palmkb7) (1)
	CreateDynamicObject(632,2240.39990234,1669.50000000,961.20001221,0.00000000,0.00000000,0.00000000); //object(veg_palmkb7) (2)
	CreateDynamicObject(632,2235.10009766,1670.69995117,959.40002441,0.00000000,0.00000000,14.25000000); //object(veg_palmkb7) (3)
	CreateDynamicObject(632,2236.39990234,1670.40002441,959.40002441,0.00000000,0.00000000,352.49926758); //object(veg_palmkb7) (4)
	CreateDynamicObject(632,2238.19995117,1669.80004883,959.40002441,0.00000000,0.00000000,346.49633789); //object(veg_palmkb7) (5)
	CreateDynamicObject(632,2235.10009766,1670.69995117,960.40002441,0.00000000,0.00000000,14.24926758); //object(veg_palmkb7) (6)
	CreateDynamicObject(632,2236.19995117,1670.50000000,960.40002441,0.00000000,0.00000000,350.24926758); //object(veg_palmkb7) (7)
	CreateDynamicObject(632,2237.89990234,1670.19995117,960.29998779,0.00000000,0.00000000,352.49707031); //object(veg_palmkb7) (8)
	CreateDynamicObject(1215,2239.00000000,1668.59997559,961.20001221,0.00000000,0.00000000,0.00000000); //object(bollardlight) (1)
	CreateDynamicObject(1215,2232.69995117,1669.30004883,961.20001221,0.00000000,0.00000000,0.00000000); //object(bollardlight) (2)
	CreateDynamicObject(630,2245.19995117,1668.40002441,961.79998779,0.00000000,0.00000000,0.00000000); //object(veg_palmkb8) (2)
	CreateDynamicObject(638,2246.89941406,1667.89941406,961.40002441,0.00000000,0.00000000,69.74121094); //object(kb_planter_bush) (1)
	CreateDynamicObject(639,2246.59960938,1668.29980469,963.40002441,0.00000000,0.00000000,77.99743652); //object(veg_ivy_balcny_kb3) (1)
	CreateDynamicObject(870,2249.00000000,1667.09997559,961.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (1)
	CreateDynamicObject(870,2249.89941406,1665.79980469,961.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (2)
	CreateDynamicObject(1361,2249.89941406,1665.69921875,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2248.79980469,1666.69921875,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (2)
	CreateDynamicObject(8657,2222.79980469,1626.19921875,96.00000000,0.00000000,8.00000000,92.24670410); //object(shbbyhswall10_lvs) (4)
	CreateDynamicObject(638,2241.50000000,1669.09960938,961.40002441,0.00000000,0.00000000,75.74523926); //object(kb_planter_bush) (1)
	CreateDynamicObject(870,2250.80004883,1667.09997559,961.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (2)
	CreateDynamicObject(1361,2250.69921875,1666.69921875,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(2184,2251.00000000,1663.80004883,960.79998779,0.00000000,0.00000000,316.50000000); //object(med_office6_desk_2) (1)
	CreateDynamicObject(1361,2255.19995117,1662.00000000,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2253.59960938,1661.00000000,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2255.00000000,1660.39941406,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(2190,2252.30004883,1662.90002441,961.59997559,0.00000000,0.00000000,156.00000000); //object(pc_1) (1)
	CreateDynamicObject(2826,2252.50000000,1662.50000000,961.59997559,0.00000000,0.00000000,38.25000000); //object(gb_novels04) (1)
	CreateDynamicObject(2828,2251.60009766,1664.00000000,961.59997559,0.00000000,0.00000000,257.25000000); //object(gb_ornament02) (1)
	CreateDynamicObject(2853,2251.60009766,1663.19995117,961.59997559,0.00000000,0.00000000,355.50000000); //object(gb_bedmags03) (1)
	CreateDynamicObject(2855,2251.10009766,1663.90002441,961.59997559,0.00000000,0.00000000,0.00000000); //object(gb_bedmags05) (1)
	CreateDynamicObject(2286,2252.19995117,1666.10998535,963.00000000,0.00000000,0.00000000,321.75000000); //object(frame_5) (1)
	CreateDynamicObject(870,2254.60009766,1659.69995117,961.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (3)
	CreateDynamicObject(870,2254.69995117,1661.90002441,961.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (4)
	CreateDynamicObject(870,2253.89990234,1661.09997559,961.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (5)
	CreateDynamicObject(870,2256.60009766,1661.00000000,961.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (6)
	CreateDynamicObject(1671,2249.89990234,1663.09997559,961.20001221,0.00000000,0.00000000,99.00000000); //object(swivelchair_a) (1)
	CreateDynamicObject(1671,2251.50000000,1661.30004883,961.20001221,0.00000000,0.00000000,146.99774170); //object(swivelchair_a) (2)
	CreateDynamicObject(1714,2253.30004883,1664.59997559,960.79998779,0.00000000,0.00000000,310.50000000); //object(kb_swivelchair1) (1)
	CreateDynamicObject(639,2255.19995117,1662.69995117,963.40002441,0.00000000,0.00000000,34.49743652); //object(veg_ivy_balcny_kb3) (1)
	CreateDynamicObject(2773,2248.19995117,1665.40002441,961.29998779,0.00000000,0.00000000,2.25000000); //object(cj_airprt_bar) (4)
	CreateDynamicObject(2773,2248.79980469,1663.00000000,961.29998779,0.00000000,0.00000000,23.99414062); //object(cj_airprt_bar) (5)
	CreateDynamicObject(2773,2251.10009766,1660.50000000,961.29998779,0.00000000,0.00000000,55.49414062); //object(cj_airprt_bar) (6)
	CreateDynamicObject(2773,2253.30004883,1659.80004883,961.29998779,0.00000000,0.00000000,88.49194336); //object(cj_airprt_bar) (7)
	CreateDynamicObject(2269,2241.19995117,1669.00000000,962.70001221,0.00000000,0.00000000,348.75000000); //object(frame_wood_4) (1)
	CreateDynamicObject(2269,2241.19995117,1669.00000000,961.90002441,0.00000000,0.00000000,348.75000000); //object(frame_wood_4) (2)
	CreateDynamicObject(712,2238.60009766,1649.50000000,9.00000000,0.00000000,0.00000000,0.00000000); //object(vgs_palm03) (1)
	CreateDynamicObject(1361,2244.60009766,1654.80004883,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(2773,2245.00000000,1653.09997559,961.29998779,0.00000000,0.00000000,14.24414062); //object(cj_airprt_bar) (5)
	CreateDynamicObject(2773,2245.19995117,1650.69995117,961.29998779,0.00000000,0.00000000,355.49377441); //object(cj_airprt_bar) (5)
	CreateDynamicObject(1361,2245.10009766,1649.00000000,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(2773,2244.00000000,1647.59997559,961.29998779,0.00000000,0.00000000,320.24011230); //object(cj_airprt_bar) (5)
	CreateDynamicObject(1361,2240.60009766,1645.30004883,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(2773,2242.19995117,1646.00000000,961.29998779,0.00000000,0.00000000,305.23498535); //object(cj_airprt_bar) (5)
	CreateDynamicObject(2773,2238.89990234,1645.30004883,961.29998779,0.00000000,0.00000000,264.73315430); //object(cj_airprt_bar) (5)
	CreateDynamicObject(2773,2236.60009766,1645.90002441,961.29998779,0.00000000,0.00000000,247.48205566); //object(cj_airprt_bar) (5)
	CreateDynamicObject(1361,2235.00000000,1646.59960938,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(2773,2234.10009766,1648.19995117,961.29998779,0.00000000,0.00000000,212.97802734); //object(cj_airprt_bar) (5)
	CreateDynamicObject(2773,2233.19995117,1650.40002441,961.29998779,0.00000000,0.00000000,189.72546387); //object(cj_airprt_bar) (5)
	CreateDynamicObject(1361,2232.79980469,1652.09960938,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(2773,2233.30004883,1653.80004883,961.29998779,0.00000000,0.00000000,158.22290039); //object(cj_airprt_bar) (5)
	CreateDynamicObject(2773,2234.50000000,1655.80004883,961.29998779,0.00000000,0.00000000,137.21960449); //object(cj_airprt_bar) (5)
	CreateDynamicObject(1361,2235.80004883,1656.80004883,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(2773,2237.50000000,1657.40002441,961.29998779,0.00000000,0.00000000,104.21923828); //object(cj_airprt_bar) (5)
	CreateDynamicObject(2773,2239.89990234,1657.59997559,961.29998779,0.00000000,0.00000000,83.21630859); //object(cj_airprt_bar) (5)
	CreateDynamicObject(1361,2241.39990234,1657.40002441,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(2773,2243.19995117,1656.19995117,961.29998779,0.00000000,0.00000000,51.71594238); //object(cj_airprt_bar) (5)
	CreateDynamicObject(6965,2239.30004883,1651.50000000,957.29998779,0.00000000,0.00000000,0.00000000); //object(venefountain02) (1)
	CreateDynamicObject(1361,2240.19995117,1653.80004883,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2236.80004883,1651.59997559,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2237.80004883,1649.50000000,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2239.50000000,1649.09997559,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2241.39990234,1652.50000000,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2241.19995117,1650.40002441,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2238.19995117,1653.59997559,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2238.19995117,1653.59997559,962.79998779,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2236.80004883,1651.59997559,962.90002441,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2237.80004883,1649.50000000,962.90002441,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2239.50000000,1649.09997559,962.79998779,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2241.19995117,1650.40002441,962.79998779,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2241.39990234,1652.50000000,962.90002441,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2240.19995117,1653.80004883,962.90002441,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(843,2239.80004883,1655.00000000,960.79998779,0.00000000,0.00000000,0.00000000); //object(dead_tree_15) (1)
	CreateDynamicObject(843,2236.50000000,1647.90002441,960.79998779,0.00000000,0.00000000,315.00000000); //object(dead_tree_15) (2)
	CreateDynamicObject(838,2242.69995117,1649.69995117,961.00000000,0.00000000,0.00000000,33.00000000); //object(dead_tree_9) (1)
	CreateDynamicObject(9163,2223.10009766,1641.19995117,967.20001221,0.00000000,90.00000000,15.74890137); //object(shop04_lvs) (3)
	CreateDynamicObject(2164,2222.19921875,1654.69921875,960.70001221,0.00000000,0.00000000,105.74890137); //object(med_office_unit_5) (1)
	CreateDynamicObject(2167,2221.60009766,1656.59997559,960.70001221,0.00000000,0.00000000,104.99996948); //object(med_office_unit_7) (1)
	CreateDynamicObject(2167,2222.39941406,1653.59960938,960.70001221,0.00000000,0.00000000,104.99084473); //object(med_office_unit_7) (2)
	CreateDynamicObject(2164,2223.09960938,1651.69921875,960.70001221,0.00000000,0.00000000,105.74340820); //object(med_office_unit_5) (2)
	CreateDynamicObject(2167,2220.99951172,1678.59997559,945.29998779,0.00000000,-180.00000000,283.48892212); //object(med_office_unit_7) (3)
	CreateDynamicObject(9163,2220.29931641,1691.09997559,937.59997559,0.00000000,-270.00000000,372.73522949); //object(shop04_lvs) (5)
	CreateDynamicObject(2167,2219.59912109,1703.59997559,929.89996338,0.00000000,-360.00000000,461.98153687); //object(med_office_unit_7) (4)
	CreateDynamicObject(2167,2223.19970703,1650.59997559,960.70001221,0.00000000,0.00000000,104.99264526); //object(med_office_unit_7) (5)
	CreateDynamicObject(2167,2223.19970703,1650.59997559,960.70001221,0.00000000,0.00000000,104.99264526); //object(med_office_unit_7) (9)
	CreateDynamicObject(2167,2223.19970703,1650.59997559,960.70001221,0.00000000,0.00000000,104.99264526); //object(med_office_unit_7) (13)
	CreateDynamicObject(2167,2223.19970703,1650.59997559,960.70001221,0.00000000,0.00000000,104.99264526); //object(med_office_unit_7) (17)
	CreateDynamicObject(2167,2223.29980469,1650.50000000,960.70001221,0.00000000,0.00000000,107.24307251); //object(med_office_unit_7) (21)
	CreateDynamicObject(630,2221.89990234,1657.30004883,961.79998779,0.00000000,0.00000000,0.00000000); //object(veg_palmkb8) (1)
	CreateDynamicObject(630,2223.89941406,1649.79980469,961.79998779,0.00000000,0.00000000,0.00000000); //object(veg_palmkb8) (3)
	CreateDynamicObject(644,2221.50000000,1659.19995117,960.90002441,0.00000000,0.00000000,0.00000000); //object(pot_02) (2)
	CreateDynamicObject(644,2221.50000000,1658.00000000,960.90002441,0.00000000,0.00000000,0.00000000); //object(pot_02) (3)
	CreateDynamicObject(644,2225.89990234,1665.69995117,960.90002441,0.00000000,0.00000000,0.00000000); //object(pot_02) (4)
	CreateDynamicObject(2773,2224.89941406,1649.29980469,961.29998779,0.00000000,0.00000000,282.74963379); //object(cj_airprt_bar) (21)
	CreateDynamicObject(2773,2227.19995117,1649.80004883,961.29998779,0.00000000,0.00000000,282.74963379); //object(cj_airprt_bar) (23)
	CreateDynamicObject(2165,2227.50000000,1651.59960938,960.79998779,0.00000000,0.00000000,283.49670410); //object(med_office_desk_1) (1)
	CreateDynamicObject(2773,2227.10009766,1653.30004883,961.29998779,0.00000000,0.00000000,32.24890137); //object(cj_airprt_bar) (24)
	CreateDynamicObject(2008,2226.10009766,1655.80004883,960.79998779,0.00000000,0.00000000,279.00000000); //object(officedesk1) (1)
	CreateDynamicObject(2773,2226.19995117,1657.50000000,961.29998779,0.00000000,0.00000000,8.99487305); //object(cj_airprt_bar) (24)
	CreateDynamicObject(2773,2224.69995117,1658.19995117,961.29998779,0.00000000,0.00000000,102.73864746); //object(cj_airprt_bar) (24)
	CreateDynamicObject(2614,2222.69995117,1653.09997559,964.09997559,0.00000000,0.00000000,105.75000000); //object(cj_us_flag) (1)
	CreateDynamicObject(9163,2233.50000000,1616.30004883,968.40002441,0.00000000,90.00000000,94.49890137); //object(shop04_lvs) (3)
	CreateDynamicObject(9163,2248.69921875,1622.39941406,968.00000000,0.00000000,90.00000000,135.73608398); //object(shop04_lvs) (3)
	CreateDynamicObject(3475,2246.00000000,1632.50000000,961.70001221,0.00000000,0.00000000,285.00000000); //object(vgsn_fncelec_pst) (1)
	CreateDynamicObject(3475,2238.00000000,1631.50000000,961.70001221,0.00000000,0.00000000,267.74926758); //object(vgsn_fncelec_pst) (2)
	CreateDynamicObject(2634,2242.19995117,1631.80004883,964.79998779,0.00000000,0.00000000,189.74487305); //object(ab_vaultdoor) (3)
	CreateDynamicObject(1649,2245.30004883,1632.69995117,962.29998779,0.00000000,0.00000000,195.75000000); //object(wglasssmash) (10)
	CreateDynamicObject(1649,2245.30004883,1632.69995117,965.59997559,0.00000000,0.00000000,195.74926758); //object(wglasssmash) (11)
	CreateDynamicObject(1226,2246.30004883,1633.19995117,964.00000000,0.00000000,0.00000000,0.00000000); //object(lamppost3) (1)
	CreateDynamicObject(1649,2245.29980469,1632.69921875,962.29998779,0.00000000,0.00000000,195.74890137); //object(wglasssmash) (12)
	CreateDynamicObject(1649,2245.29980469,1632.69921875,962.29998779,0.00000000,0.00000000,195.74890137); //object(wglasssmash) (13)
	CreateDynamicObject(1649,2245.29980469,1632.69921875,965.59997559,0.00000000,0.00000000,195.74890137); //object(wglasssmash) (14)
	CreateDynamicObject(1649,2245.29980469,1632.69921875,965.59997559,0.00000000,0.00000000,195.74890137); //object(wglasssmash) (15)
	CreateDynamicObject(1649,2245.29980469,1632.69921875,965.59997559,0.00000000,0.00000000,195.74890137); //object(wglasssmash) (16)
	CreateDynamicObject(1649,2245.29980469,1632.69921875,962.29998779,0.00000000,0.00000000,195.74890137); //object(wglasssmash) (17)
	CreateDynamicObject(1649,2245.29980469,1632.69921875,965.59997559,0.00000000,0.00000000,195.74890137); //object(wglasssmash) (18)
	CreateDynamicObject(1649,2239.00000000,1631.90002441,962.29998779,0.00000000,0.00000000,176.99890137); //object(wglasssmash) (19)
	CreateDynamicObject(1649,2239.00000000,1631.90002441,965.59997559,0.00000000,0.00000000,176.99523926); //object(wglasssmash) (21)
	CreateDynamicObject(3475,2245.89990234,1632.40002441,962.20001221,0.00000000,0.00000000,284.99633789); //object(vgsn_fncelec_pst) (6)
	CreateDynamicObject(3475,2238.10009766,1631.50000000,962.20001221,0.00000000,0.00000000,267.74780273); //object(vgsn_fncelec_pst) (7)
	CreateDynamicObject(1649,2239.00000000,1631.89941406,962.29998779,0.00000000,0.00000000,176.99523926); //object(wglasssmash) (23)
	CreateDynamicObject(1649,2239.00000000,1631.89941406,962.29998779,0.00000000,0.00000000,176.99523926); //object(wglasssmash) (24)
	CreateDynamicObject(1649,2239.00000000,1631.89941406,962.29998779,0.00000000,0.00000000,176.99523926); //object(wglasssmash) (25)
	CreateDynamicObject(1649,2239.00000000,1631.89941406,965.59997559,0.00000000,0.00000000,176.99523926); //object(wglasssmash) (26)
	CreateDynamicObject(1649,2239.00000000,1631.89941406,965.59997559,0.00000000,0.00000000,176.99523926); //object(wglasssmash) (27)
	CreateDynamicObject(1649,2239.00000000,1631.89941406,965.59997559,0.00000000,0.00000000,176.99523926); //object(wglasssmash) (28)
	CreateDynamicObject(1649,2234.59960938,1631.89941406,962.29998779,0.00000000,0.00000000,182.99414062); //object(wglasssmash) (29)
	CreateDynamicObject(1649,2234.59960938,1631.89941406,965.59997559,0.00000000,0.00000000,182.99414062); //object(wglasssmash) (32)
	CreateDynamicObject(1649,2234.59960938,1631.89941406,962.29998779,0.00000000,0.00000000,182.99377441); //object(wglasssmash) (35)
	CreateDynamicObject(1649,2234.59960938,1631.89941406,962.29998779,0.00000000,0.00000000,182.99377441); //object(wglasssmash) (36)
	CreateDynamicObject(1649,2234.59960938,1631.89941406,962.29998779,0.00000000,0.00000000,182.99377441); //object(wglasssmash) (37)
	CreateDynamicObject(1649,2234.59960938,1631.89941406,965.59997559,0.00000000,0.00000000,182.99377441); //object(wglasssmash) (38)
	CreateDynamicObject(1649,2234.59960938,1631.89941406,965.59997559,0.00000000,0.00000000,182.99377441); //object(wglasssmash) (39)
	CreateDynamicObject(1649,2234.59960938,1631.89941406,965.59997559,0.00000000,0.00000000,182.99377441); //object(wglasssmash) (40)
	CreateDynamicObject(2009,2235.80004883,1632.40002441,960.79998779,0.00000000,0.00000000,355.50000000); //object(officedesk2l) (1)
	CreateDynamicObject(640,2224.00000000,1663.19995117,961.50000000,0.00000000,0.00000000,322.50000000); //object(kb_planter_bush2) (2)
	CreateDynamicObject(644,2221.89990234,1660.30004883,960.90002441,0.00000000,0.00000000,0.00000000); //object(pot_02) (3)
	CreateDynamicObject(2826,2235.69995117,1632.69995117,961.60998535,0.00000000,0.00000000,0.00000000); //object(gb_novels04) (2)
	CreateDynamicObject(2827,2236.00000000,1633.50000000,961.59997559,0.00000000,0.00000000,16.50000000); //object(gb_novels05) (1)
	CreateDynamicObject(1892,2235.80004883,1635.30004883,960.73779297,0.00000000,0.00000000,265.50000000); //object(security_gatsh) (2)
	CreateDynamicObject(1491,2238.78002930,1633.50000000,959.09997559,0.00000000,0.00000000,177.00000000); //object(gen_doorint01) (1)
	CreateDynamicObject(2773,2239.50000000,1632.80004883,961.20001221,0.00000000,0.00000000,48.00000000); //object(cj_airprt_bar) (10)
	CreateDynamicObject(2773,2237.10009766,1635.59997559,961.20001221,0.00000000,0.00000000,90.74926758); //object(cj_airprt_bar) (11)
	CreateDynamicObject(2773,2239.50000000,1635.69995117,961.20001221,0.00000000,0.00000000,94.49707031); //object(cj_airprt_bar) (12)
	CreateDynamicObject(2773,2240.19995117,1633.59997559,961.20001221,0.00000000,0.00000000,92.24340820); //object(cj_airprt_bar) (13)
	CreateDynamicObject(2773,2241.89990234,1636.00000000,961.20001221,0.00000000,0.00000000,99.74340820); //object(cj_airprt_bar) (14)
	CreateDynamicObject(2773,2244.30004883,1636.40002441,961.20001221,0.00000000,0.00000000,101.23937988); //object(cj_airprt_bar) (15)
	CreateDynamicObject(2773,2242.60009766,1634.00000000,961.20001221,0.00000000,0.00000000,104.24121094); //object(cj_airprt_bar) (16)
	CreateDynamicObject(2773,2245.00000000,1634.69995117,961.20001221,0.00000000,0.00000000,107.23825073); //object(cj_airprt_bar) (17)
	CreateDynamicObject(2773,2247.89990234,1635.19995117,961.20001221,0.00000000,0.00000000,22.48901367); //object(cj_airprt_bar) (18)
	CreateDynamicObject(2773,2246.39990234,1636.40002441,961.20001221,0.00000000,0.00000000,77.23901367); //object(cj_airprt_bar) (19)
	CreateDynamicObject(1892,2243.30004883,1633.59997559,960.73999023,0.00000000,0.00000000,277.49560547); //object(security_gatsh) (3)
	CreateDynamicObject(631,2235.10009766,1632.69995117,961.70001221,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (1)
	CreateDynamicObject(631,2235.19995117,1633.40002441,961.70001221,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (2)
	CreateDynamicObject(631,2235.19995117,1634.09997559,961.70001221,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (3)
	CreateDynamicObject(631,2239.60009766,1633.30004883,961.70001221,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (4)
	CreateDynamicObject(631,2240.60009766,1632.40002441,961.70001221,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (5)
	CreateDynamicObject(631,2248.80004883,1634.69995117,961.70001221,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (6)
	CreateDynamicObject(631,2248.39990234,1635.40002441,961.70001221,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (7)
	CreateDynamicObject(631,2248.10009766,1636.09997559,961.70001221,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (8)
	CreateDynamicObject(630,2238.39990234,1635.59997559,961.70001221,0.00000000,0.00000000,0.00000000); //object(veg_palmkb8) (4)
	CreateDynamicObject(630,2240.80004883,1635.80004883,961.70001221,0.00000000,0.00000000,0.00000000); //object(veg_palmkb8) (5)
	CreateDynamicObject(630,2243.19995117,1636.19995117,961.70001221,0.00000000,0.00000000,0.00000000); //object(veg_palmkb8) (6)
	CreateDynamicObject(630,2245.44995117,1636.59997559,961.70001221,0.00000000,0.00000000,0.00000000); //object(veg_palmkb8) (7)
	CreateDynamicObject(630,2247.50000000,1636.09997559,961.70001221,0.00000000,0.00000000,0.00000000); //object(veg_palmkb8) (8)
	CreateDynamicObject(14455,2258.60009766,1648.69995117,962.40002441,0.00000000,0.00000000,88.50000000); //object(gs_bookcase) (1)
	CreateDynamicObject(14455,2257.10009766,1643.30004883,962.40002441,0.00000000,0.00000000,72.00000000); //object(gs_bookcase) (2)
	CreateDynamicObject(1775,2257.39990234,1657.40002441,961.79998779,0.00000000,0.00000000,283.50000000); //object(cj_sprunk1) (1)
	CreateDynamicObject(1775,2257.69995117,1656.19995117,961.79998779,0.00000000,0.00000000,283.49670410); //object(cj_sprunk1) (2)
	CreateDynamicObject(1361,2256.80004883,1658.69995117,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2257.89990234,1654.69995117,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(626,2256.80004883,1659.69995117,962.79998779,0.00000000,0.00000000,0.00000000); //object(veg_palmkb2) (3)
	CreateDynamicObject(626,2258.69995117,1654.00000000,962.70001221,0.00000000,0.00000000,0.00000000); //object(veg_palmkb2) (4)
	CreateDynamicObject(2773,2256.39990234,1654.09997559,961.20001221,0.00000000,0.00000000,296.25000000); //object(cj_airprt_bar) (20)
	CreateDynamicObject(2773,2254.80004883,1652.59997559,961.20001221,0.00000000,0.00000000,328.49633789); //object(cj_airprt_bar) (22)
	CreateDynamicObject(2773,2254.10009766,1650.59997559,961.20001221,0.00000000,0.00000000,350.24121094); //object(cj_airprt_bar) (25)
	CreateDynamicObject(2773,2253.60009766,1647.19995117,961.20001221,0.00000000,0.00000000,350.23864746); //object(cj_airprt_bar) (26)
	CreateDynamicObject(2773,2253.89990234,1644.90002441,961.20001221,0.00000000,0.00000000,24.73864746); //object(cj_airprt_bar) (27)
	CreateDynamicObject(2773,2255.50000000,1643.30004883,961.20001221,0.00000000,0.00000000,60.73571777); //object(cj_airprt_bar) (28)
	CreateDynamicObject(1361,2256.19995117,1642.30004883,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(2172,2255.89990234,1645.30004883,960.79998779,0.00000000,0.00000000,70.50000000); //object(med_office2_desk_1) (1)
	CreateDynamicObject(2172,2255.30004883,1646.59997559,960.79998779,0.00000000,0.00000000,250.00000000); //object(med_office2_desk_1) (2)
	CreateDynamicObject(1892,2253.60009766,1649.40002441,960.59997559,0.00000000,0.00000000,264.75000000); //object(security_gatsh) (4)
	CreateDynamicObject(1432,2256.60009766,1652.59997559,960.79998779,0.00000000,0.00000000,0.00000000); //object(dyn_table_2) (1)
	CreateDynamicObject(1432,2255.69995117,1650.30004883,960.79998779,0.00000000,0.00000000,332.25000000); //object(dyn_table_2) (2)
	CreateDynamicObject(2827,2255.69995117,1650.59997559,961.40002441,0.00000000,0.00000000,0.00000000); //object(gb_novels05) (2)
	CreateDynamicObject(2827,2255.50000000,1650.19995117,961.40002441,0.00000000,0.00000000,33.75000000); //object(gb_novels05) (3)
	CreateDynamicObject(2827,2255.89990234,1650.09997559,961.50000000,0.00000000,0.00000000,52.50000000); //object(gb_novels05) (4)
	CreateDynamicObject(2826,2256.69995117,1652.80004883,961.40002441,0.00000000,0.00000000,0.00000000); //object(gb_novels04) (3)
	CreateDynamicObject(2826,2256.39990234,1652.59997559,961.40002441,0.00000000,0.00000000,351.00000000); //object(gb_novels04) (4)
	CreateDynamicObject(2827,2256.69995117,1652.30004883,961.40002441,0.00000000,0.00000000,9.00000000); //object(gb_novels05) (5)
	CreateDynamicObject(2827,2256.69995117,1652.80004883,961.40002441,0.00000000,0.00000000,344.24780273); //object(gb_novels05) (6)
	CreateDynamicObject(1361,2255.00000000,1640.59997559,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2253.39990234,1638.59997559,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2251.80004883,1637.19995117,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2250.00000000,1635.80004883,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(646,2255.30004883,1641.69995117,962.09997559,0.00000000,0.00000000,0.00000000); //object(veg_palmkb14) (1)
	CreateDynamicObject(646,2254.00000000,1639.90002441,962.09997559,0.00000000,0.00000000,0.00000000); //object(veg_palmkb14) (2)
	CreateDynamicObject(646,2252.50000000,1638.09997559,962.09997559,0.00000000,0.00000000,0.00000000); //object(veg_palmkb14) (3)
	CreateDynamicObject(646,2250.80004883,1636.59997559,962.09997559,0.00000000,0.00000000,0.00000000); //object(veg_palmkb14) (4)
	CreateDynamicObject(1663,2254.39990234,1646.30004883,961.20001221,0.00000000,0.00000000,98.25000000); //object(swivelchair_b) (1)
	CreateDynamicObject(1663,2257.10009766,1645.50000000,961.20001221,0.00000000,0.00000000,216.74523926); //object(swivelchair_b) (2)
	CreateDynamicObject(673,2225.60009766,1647.59997559,955.29998779,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (1)
	CreateDynamicObject(1361,2225.39990234,1645.19995117,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2226.10009766,1642.90002441,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2226.60009766,1640.90002441,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2227.10009766,1638.90002441,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2227.69995117,1637.00000000,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2228.69995117,1635.40002441,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2230.50000000,1634.30004883,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2232.30004883,1633.69995117,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,2234.10009766,1633.09997559,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(2332,2241.50000000,1619.90002441,961.20001221,0.00000000,0.00000000,184.50000000); //object(kev_safe) (1)
	CreateDynamicObject(2332,2241.50000000,1619.90002441,962.59997559,0.00000000,0.00000000,184.49890137); //object(kev_safe) (2)
	CreateDynamicObject(2332,2241.50000000,1619.90002441,963.90002441,0.00000000,0.00000000,184.49890137); //object(kev_safe) (3)
	CreateDynamicObject(2332,2240.19995117,1619.80004883,961.20001221,0.00000000,0.00000000,184.49890137); //object(kev_safe) (5)
	CreateDynamicObject(2332,2240.19995117,1619.80004883,962.59997559,0.00000000,0.00000000,184.49890137); //object(kev_safe) (6)
	CreateDynamicObject(2332,2240.19995117,1619.80004883,963.90002441,0.00000000,0.00000000,184.49890137); //object(kev_safe) (7)
	CreateDynamicObject(1829,2239.00000000,1620.19995117,961.20001221,0.00000000,0.00000000,183.00000000); //object(man_safenew) (1)
	CreateDynamicObject(1828,2241.10009766,1622.40002441,960.72998047,0.00000000,0.00000000,0.00000000); //object(man_sdr_rug) (1)
	CreateDynamicObject(2332,2239.00000000,1619.69995117,962.59997559,0.00000000,0.00000000,184.49890137); //object(kev_safe) (8)
	CreateDynamicObject(2332,2239.00000000,1619.69995117,963.90002441,0.00000000,0.00000000,184.49890137); //object(kev_safe) (10)
	CreateDynamicObject(2332,2237.80004883,1619.69995117,962.59997559,0.00000000,0.00000000,184.49890137); //object(kev_safe) (11)
	CreateDynamicObject(2332,2237.80004883,1619.69995117,961.20001221,0.00000000,0.00000000,184.49890137); //object(kev_safe) (12)
	CreateDynamicObject(2332,2237.80004883,1619.69995117,963.79998779,0.00000000,0.00000000,184.49890137); //object(kev_safe) (13)
	CreateDynamicObject(2332,2236.80004883,1622.00000000,961.20001221,0.00000000,0.00000000,95.99890137); //object(kev_safe) (14)
	CreateDynamicObject(2332,2236.80004883,1622.00000000,962.09997559,0.00000000,0.00000000,95.99853516); //object(kev_safe) (15)
	CreateDynamicObject(2332,2236.80004883,1622.00000000,963.00000000,0.00000000,0.00000000,95.99853516); //object(kev_safe) (16)
	CreateDynamicObject(2332,2236.80004883,1622.00000000,963.90002441,0.00000000,0.00000000,95.99853516); //object(kev_safe) (17)
	CreateDynamicObject(2332,2236.69995117,1623.00000000,961.09997559,0.00000000,0.00000000,95.99853516); //object(kev_safe) (18)
	CreateDynamicObject(2332,2236.69995117,1623.00000000,962.00000000,0.00000000,0.00000000,95.99853516); //object(kev_safe) (21)
	CreateDynamicObject(2332,2236.69995117,1623.00000000,962.90002441,0.00000000,0.00000000,95.99853516); //object(kev_safe) (22)
	CreateDynamicObject(2332,2236.60009766,1624.50000000,961.09997559,0.00000000,0.00000000,95.99853516); //object(kev_safe) (23)
	CreateDynamicObject(2332,2236.60009766,1624.50000000,962.00000000,0.00000000,0.00000000,95.99853516); //object(kev_safe) (24)
	CreateDynamicObject(2332,2236.60009766,1624.50000000,962.90002441,0.00000000,0.00000000,95.99853516); //object(kev_safe) (25)
	CreateDynamicObject(2332,2236.60009766,1624.50000000,963.79998779,0.00000000,0.00000000,95.99853516); //object(kev_safe) (26)
	CreateDynamicObject(2002,2240.80004883,1638.80004883,960.70001221,0.00000000,0.00000000,9.75000000); //object(water_coolnu) (1)
	CreateDynamicObject(2332,2236.60009766,1625.59997559,962.09997559,0.00000000,0.00000000,95.99853516); //object(kev_safe) (27)
	CreateDynamicObject(2332,2236.60009766,1625.59997559,963.00000000,0.00000000,0.00000000,95.99853516); //object(kev_safe) (28)
	CreateDynamicObject(2332,2236.60009766,1626.69995117,963.00000000,0.00000000,0.00000000,95.99853516); //object(kev_safe) (29)
	CreateDynamicObject(2332,2236.60009766,1626.69995117,962.09997559,0.00000000,0.00000000,95.99853516); //object(kev_safe) (30)
	CreateDynamicObject(2332,2236.50000000,1627.80004883,963.00000000,0.00000000,0.00000000,95.99853516); //object(kev_safe) (31)
	CreateDynamicObject(2332,2236.50000000,1627.80004883,962.09997559,0.00000000,0.00000000,95.99853516); //object(kev_safe) (32)
	CreateDynamicObject(2395,2248.30004883,1628.19995117,960.59997559,0.00000000,0.00000000,258.00000000); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,2247.50000000,1625.40002441,960.59997559,0.00000000,0.00000000,212.99707031); //object(cj_sports_wall) (2)
	CreateDynamicObject(2395,2245.30004883,1623.69995117,960.59997559,0.00000000,0.00000000,30.00000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,2244.60009766,1623.09997559,960.59997559,0.00000000,0.00000000,251.99194336); //object(cj_sports_wall) (4)
	CreateDynamicObject(2003,2246.69995117,1625.19995117,961.09997559,0.00000000,0.00000000,209.25000000); //object(cr_safe_body) (1)
	CreateDynamicObject(2003,2245.89990234,1624.69995117,961.09997559,0.00000000,0.00000000,209.24560547); //object(cr_safe_body) (2)
	CreateDynamicObject(1550,2248.00000000,1627.30004883,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (1)
	CreateDynamicObject(1550,2247.89990234,1627.00000000,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (2)
	CreateDynamicObject(1550,2247.89990234,1626.69995117,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (3)
	CreateDynamicObject(1550,2247.89990234,1626.30004883,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (4)
	CreateDynamicObject(1550,2247.80004883,1626.09997559,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (5)
	CreateDynamicObject(1550,2247.69995117,1625.80004883,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (6)
	CreateDynamicObject(1550,2247.50000000,1625.50000000,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (7)
	CreateDynamicObject(1550,2247.30004883,1625.30004883,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (8)
	CreateDynamicObject(1550,2247.39990234,1625.59997559,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (9)
	CreateDynamicObject(1550,2247.50000000,1625.90002441,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (10)
	CreateDynamicObject(1550,2247.69995117,1626.19995117,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (11)
	CreateDynamicObject(1550,2247.69995117,1626.59997559,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (12)
	CreateDynamicObject(1550,2247.60009766,1627.00000000,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (13)
	CreateDynamicObject(1550,2247.80004883,1627.30004883,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (14)
	CreateDynamicObject(1550,2248.19995117,1627.69995117,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (15)
	CreateDynamicObject(1550,2247.80004883,1627.59997559,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (16)
	CreateDynamicObject(1550,2247.30004883,1626.50000000,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (17)
	CreateDynamicObject(1550,2247.19995117,1626.19995117,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (18)
	CreateDynamicObject(1550,2247.10009766,1625.69995117,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (19)
	CreateDynamicObject(1550,2247.39990234,1626.69995117,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (20)
	CreateDynamicObject(1550,2247.50000000,1627.40002441,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (21)
	CreateDynamicObject(1550,2248.00000000,1627.19995117,961.40002441,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (22)
	CreateDynamicObject(1550,2247.89990234,1627.00000000,961.20001221,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (23)
	CreateDynamicObject(1550,2248.19995117,1626.69995117,961.20001221,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (24)
	CreateDynamicObject(1550,2247.89990234,1626.50000000,961.20001221,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (25)
	CreateDynamicObject(1550,2247.80004883,1626.19995117,961.40002441,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (26)
	CreateDynamicObject(1550,2247.89990234,1625.50000000,961.40002441,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (27)
	CreateDynamicObject(1550,2247.60009766,1625.30004883,961.40002441,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (28)
	CreateDynamicObject(1550,2247.69995117,1625.59997559,961.40002441,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (29)
	CreateDynamicObject(1550,2247.89990234,1625.69995117,961.40002441,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (30)
	CreateDynamicObject(1550,2248.10009766,1626.09997559,961.40002441,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (31)
	CreateDynamicObject(1550,2248.00000000,1626.40002441,961.40002441,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (32)
	CreateDynamicObject(1550,2248.19995117,1626.69995117,961.40002441,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (33)
	CreateDynamicObject(1550,2248.00000000,1627.00000000,961.40002441,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (34)
	CreateDynamicObject(1550,2248.19995117,1627.40002441,961.40002441,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (35)
	CreateDynamicObject(1550,2247.89990234,1626.69995117,961.40002441,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (36)
	CreateDynamicObject(1550,2247.69995117,1626.00000000,961.40002441,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (37)
	CreateDynamicObject(1550,2247.50000000,1625.90002441,961.40002441,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (38)
	CreateDynamicObject(1550,2247.50000000,1625.50000000,961.40002441,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (39)
	CreateDynamicObject(1550,2247.39990234,1625.19995117,961.40002441,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (40)
	CreateDynamicObject(1550,2247.69995117,1625.40002441,961.70001221,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (41)
	CreateDynamicObject(1550,2247.89990234,1625.69995117,961.70001221,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (42)
	CreateDynamicObject(1550,2247.69995117,1626.00000000,961.70001221,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (43)
	CreateDynamicObject(1550,2247.89990234,1626.19995117,961.70001221,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (44)
	CreateDynamicObject(1550,2247.60009766,1626.59997559,961.50000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (45)
	CreateDynamicObject(1550,2248.10009766,1626.69995117,961.70001221,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (46)
	CreateDynamicObject(1550,2248.10009766,1627.00000000,961.70001221,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (47)
	CreateDynamicObject(1550,2248.10009766,1627.40002441,961.20001221,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (48)
	CreateDynamicObject(1550,2247.80004883,1626.80004883,961.70001221,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (49)
	CreateDynamicObject(1550,2248.00000000,1627.00000000,961.70001221,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (50)
	CreateDynamicObject(1550,2248.00000000,1627.30004883,961.70001221,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (51)
	CreateDynamicObject(1550,2248.00000000,1626.19995117,961.70001221,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (52)
	CreateDynamicObject(1550,2247.80004883,1626.00000000,962.09997559,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (53)
	CreateDynamicObject(1550,2247.89990234,1626.50000000,961.90002441,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (54)
	CreateDynamicObject(1550,2247.89990234,1626.19995117,962.20001221,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (55)
	CreateDynamicObject(1550,2247.80004883,1625.69995117,962.29998779,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (56)
	CreateDynamicObject(1550,2247.50000000,1625.19995117,961.79998779,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (57)
	CreateDynamicObject(1550,2247.50000000,1625.30004883,962.20001221,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (58)
	CreateDynamicObject(1550,2246.80004883,1625.19995117,961.79998779,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (59)
	CreateDynamicObject(1550,2246.50000000,1624.90002441,961.79998779,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (60)
	CreateDynamicObject(1550,2246.10009766,1624.69995117,961.79998779,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (61)
	CreateDynamicObject(1550,2245.80004883,1624.50000000,961.79998779,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (62)
	CreateDynamicObject(1550,2245.50000000,1624.09997559,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (63)
	CreateDynamicObject(1550,2245.39990234,1624.40002441,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (64)
	CreateDynamicObject(1550,2245.19995117,1624.19995117,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (65)
	CreateDynamicObject(1550,2245.00000000,1623.90002441,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (66)
	CreateDynamicObject(1550,2244.80004883,1623.69995117,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (67)
	CreateDynamicObject(1550,2244.60009766,1623.30004883,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (68)
	CreateDynamicObject(1550,2244.39990234,1622.90002441,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (69)
	CreateDynamicObject(1550,2244.30004883,1622.40002441,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (70)
	CreateDynamicObject(1550,2244.10009766,1621.90002441,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (71)
	CreateDynamicObject(1550,2243.89990234,1622.30004883,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (72)
	CreateDynamicObject(1550,2244.00000000,1622.80004883,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (73)
	CreateDynamicObject(1550,2244.19995117,1623.00000000,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (74)
	CreateDynamicObject(1550,2244.39990234,1623.50000000,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (75)
	CreateDynamicObject(1550,2244.60009766,1623.69995117,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (76)
	CreateDynamicObject(1550,2244.69995117,1624.19995117,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (77)
	CreateDynamicObject(1550,2245.00000000,1624.50000000,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (78)
	CreateDynamicObject(1550,2244.50000000,1624.00000000,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (79)
	CreateDynamicObject(1550,2244.30004883,1623.59997559,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (80)
	CreateDynamicObject(1550,2244.19995117,1623.30004883,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (81)
	CreateDynamicObject(1550,2244.39990234,1623.09997559,961.29998779,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (82)
	CreateDynamicObject(1550,2244.60009766,1623.30004883,961.29998779,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (83)
	CreateDynamicObject(1550,2244.80004883,1623.50000000,961.29998779,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (84)
	CreateDynamicObject(1550,2245.10009766,1623.80004883,961.29998779,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (85)
	CreateDynamicObject(1550,2245.39990234,1624.09997559,961.29998779,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (86)
	CreateDynamicObject(1550,2245.00000000,1623.59997559,961.29998779,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (87)
	CreateDynamicObject(1550,2244.39990234,1622.69995117,961.29998779,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (88)
	CreateDynamicObject(1550,2244.19995117,1622.50000000,961.29998779,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (89)
	CreateDynamicObject(1550,2244.30004883,1622.90002441,961.29998779,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (90)
	CreateDynamicObject(1550,2244.60009766,1623.19995117,961.29998779,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (91)
	CreateDynamicObject(1550,2244.69995117,1623.30004883,961.29998779,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (92)
	CreateDynamicObject(1550,2244.60009766,1623.59997559,961.29998779,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (93)
	CreateDynamicObject(1550,2244.59960938,1623.59960938,961.29998779,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (94)
	CreateDynamicObject(1550,2244.89990234,1623.90002441,961.29998779,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (95)
	CreateDynamicObject(1550,2245.10009766,1624.09997559,961.29998779,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (96)
	CreateDynamicObject(1550,2244.39990234,1623.40002441,961.29998779,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (97)
	CreateDynamicObject(1550,2244.50000000,1622.90002441,961.70001221,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (98)
	CreateDynamicObject(1550,2244.69995117,1623.09997559,961.70001221,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (99)
	CreateDynamicObject(1550,2244.50000000,1623.30004883,961.70001221,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (100)
	CreateDynamicObject(1550,2244.80004883,1623.59997559,961.70001221,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (101)
	CreateDynamicObject(1550,2245.00000000,1623.80004883,961.70001221,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (102)
	CreateDynamicObject(1550,2245.19995117,1625.19995117,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (104)
	CreateDynamicObject(1550,2245.80004883,1625.40002441,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (105)
	CreateDynamicObject(1550,2245.60009766,1626.00000000,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (106)
	CreateDynamicObject(1550,2245.00000000,1625.80004883,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (107)
	CreateDynamicObject(1550,2246.30004883,1626.09997559,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (108)
	CreateDynamicObject(1550,2246.50000000,1626.69995117,961.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (109)
	CreateDynamicObject(2004,2248.00000000,1629.40002441,963.70001221,0.00000000,0.00000000,276.75000000); //object(cr_safe_door) (1)
	CreateDynamicObject(2004,2248.00000000,1629.40002441,962.70001221,0.00000000,0.00000000,276.74633789); //object(cr_safe_door) (2)
	CreateDynamicObject(2004,2248.00000000,1629.40002441,961.70001221,0.00000000,0.00000000,277.49633789); //object(cr_safe_door) (3)
	CreateDynamicObject(2004,2247.89990234,1630.50000000,961.70001221,0.00000000,0.00000000,273.74633789); //object(cr_safe_door) (4)
	CreateDynamicObject(2004,2247.89990234,1630.50000000,962.70001221,0.00000000,0.00000000,273.74633789); //object(cr_safe_door) (5)
	CreateDynamicObject(2004,2247.89990234,1630.50000000,963.70001221,0.00000000,0.00000000,273.74633789); //object(cr_safe_door) (6)
	CreateDynamicObject(2004,2247.69995117,1631.59997559,963.70001221,0.00000000,0.00000000,276.74633789); //object(cr_safe_door) (7)
	CreateDynamicObject(2004,2247.69995117,1631.59997559,962.70001221,0.00000000,0.00000000,276.74560547); //object(cr_safe_door) (8)
	CreateDynamicObject(2004,2247.69995117,1631.59997559,961.70001221,0.00000000,0.00000000,276.74560547); //object(cr_safe_door) (9)
	CreateDynamicObject(2004,2247.50000000,1632.59997559,963.70001221,0.00000000,0.00000000,276.74560547); //object(cr_safe_door) (10)
	CreateDynamicObject(2004,2247.50000000,1632.59997559,962.70001221,0.00000000,0.00000000,276.74560547); //object(cr_safe_door) (11)
	CreateDynamicObject(2004,2247.50000000,1632.59997559,961.70001221,0.00000000,0.00000000,276.74560547); //object(cr_safe_door) (12)
	CreateDynamicObject(1550,2245.19995117,1624.00000000,961.59997559,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (110)
	CreateDynamicObject(1550,2245.19995117,1624.00000000,962.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (111)
	CreateDynamicObject(1550,2245.10009766,1623.69995117,962.00000000,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (112)
	CreateDynamicObject(1550,2244.89990234,1623.59997559,962.29998779,0.00000000,0.00000000,0.00000000); //object(cj_money_bag) (113)
	CreateDynamicObject(2332,2236.50000000,1627.80004883,961.20001221,0.00000000,0.00000000,95.99853516); //object(kev_safe) (33)
	CreateDynamicObject(2332,2236.60009766,1626.69995117,961.20001221,0.00000000,0.00000000,95.99853516); //object(kev_safe) (34)
	CreateDynamicObject(2332,2236.60009766,1625.59997559,961.20001221,0.00000000,0.00000000,95.99853516); //object(kev_safe) (35)
	CreateDynamicObject(2332,2236.10009766,1628.59997559,961.20001221,0.00000000,0.00000000,134.24853516); //object(kev_safe) (36)
	CreateDynamicObject(2332,2236.10009766,1628.59997559,962.09997559,0.00000000,0.00000000,134.24743652); //object(kev_safe) (37)
	CreateDynamicObject(2332,2236.10009766,1628.59997559,963.00000000,0.00000000,0.00000000,134.24743652); //object(kev_safe) (38)
	CreateDynamicObject(2004,2235.69995117,1629.19995117,961.59997559,0.00000000,0.00000000,97.50000000); //object(cr_safe_door) (13)
	CreateDynamicObject(2004,2235.69995117,1629.19995117,962.59997559,0.00000000,0.00000000,97.49816895); //object(cr_safe_door) (14)
	CreateDynamicObject(2004,2235.69995117,1629.19995117,963.59997559,0.00000000,0.00000000,97.49816895); //object(cr_safe_door) (15)
	CreateDynamicObject(2004,2235.60009766,1630.19995117,963.59997559,0.00000000,0.00000000,97.49816895); //object(cr_safe_door) (16)
	CreateDynamicObject(2004,2235.60009766,1630.19995117,962.59997559,0.00000000,0.00000000,97.49816895); //object(cr_safe_door) (17)
	CreateDynamicObject(2004,2235.60009766,1630.19995117,961.59997559,0.00000000,0.00000000,97.49816895); //object(cr_safe_door) (18)
	CreateDynamicObject(1616,2242.89990234,1620.50000000,964.29998779,0.00000000,0.00000000,0.00000000); //object(nt_securecam1_01) (1)
	CreateDynamicObject(1616,2248.10009766,1628.00000000,964.50000000,0.00000000,0.00000000,0.00000000); //object(nt_securecam1_01) (2)
	CreateDynamicObject(1616,2251.69995117,1642.30004883,966.59997559,0.00000000,0.00000000,0.00000000); //object(nt_securecam1_01) (3)
	CreateDynamicObject(1616,2255.19995117,1652.90002441,966.29998779,0.00000000,0.00000000,0.00000000); //object(nt_securecam1_01) (4)
	CreateDynamicObject(1663,2226.39990234,1650.80004883,961.20001221,0.00000000,0.00000000,95.25000000); //object(swivelchair_b) (3)
	CreateDynamicObject(1663,2225.19995117,1654.80004883,961.20001221,0.00000000,0.00000000,95.24597168); //object(swivelchair_b) (4)

	// Prison
	CreateDynamicObject(14412,2489.89941406,-1248.79980469,1071.59997559,0.00000000,0.00000000,2.49389648); //object(carter_drugfloor) (1)
	CreateDynamicObject(14414,2469.00000000,-1243.50000000,1063.19995117,0.00000000,0.00000000,180.49987793); //object(carter-stairs05) (1)
	CreateDynamicObject(2909,2496.00000000,-1263.50000000,105.00000000,0.00000000,0.00000000,1.99951172); //object(kmb_frontgate) (13)
	CreateDynamicObject(2927,2507.50000000,-1256.00000000,1064.00000000,0.00000000,0.00000000,271.99951172); //object(a51_blastdoorr) (1)
	CreateDynamicObject(2921,2507.69995117,-1261.19995117,1071.09997559,0.00000000,0.00000000,0.00000000); //object(kmb_cam) (1)
	CreateDynamicObject(2921,2468.50000000,-1262.69995117,1070.80004883,0.00000000,0.00000000,256.00000000); //object(kmb_cam) (2)
	CreateDynamicObject(2921,2504.30004883,-1234.19995117,1071.19995117,0.00000000,0.00000000,75.99792480); //object(kmb_cam) (3)
	CreateDynamicObject(2921,2466.89941406,-1237.29980469,1070.80004883,0.00000000,0.00000000,155.99487305); //object(kmb_cam) (4)
	CreateDynamicObject(2921,2507.69995117,-1260.69995117,1065.30004883,0.00000000,0.00000000,0.00000000); //object(kmb_cam) (5)
	CreateDynamicObject(2921,2471.00000000,-1237.00000000,1065.00000000,0.00000000,0.00000000,170.00000000); //object(kmb_cam) (6)
	CreateDynamicObject(1499,2467.59960938,-1263.09960938,1066.40002441,0.00000000,0.00000000,91.49951172); //object(gen_doorint05) (1)
	CreateDynamicObject(1499,2467.50000000,-1260.05566406,1066.40002441,0.00000000,0.00000000,271.24450684); //object(gen_doorint05) (2)
	CreateDynamicObject(14459,2485.10009766,-1249.00000000,1069.30004883,0.00000000,0.00000000,2.25000000); //object(carter-cage) (1)
	CreateDynamicObject(983,2480.19995117,-1235.90002441,1062.90002441,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (1)
	CreateDynamicObject(983,2480.19995117,-1235.90002441,1064.19995117,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (2)
	CreateDynamicObject(983,2480.19995117,-1235.90002441,1065.50000000,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (3)
	CreateDynamicObject(983,2492.69995117,-1235.40002441,1062.90002441,0.00000000,0.00000000,5.25000000); //object(fenceshit3) (4)
	CreateDynamicObject(983,2492.69995117,-1235.40002441,1064.19995117,0.00000000,0.00000000,5.24597168); //object(fenceshit3) (5)
	CreateDynamicObject(983,2492.69995117,-1235.40002441,1065.50000000,0.00000000,0.00000000,5.24597168); //object(fenceshit3) (6)
	CreateDynamicObject(2909,2488.10009766,-1234.59997559,1062.09997559,0.00000000,0.00000000,0.75000000); //object(kmb_frontgate) (13)
	CreateDynamicObject(2909,2488.10009766,-1234.59997559,1064.69995117,0.00000000,0.00000000,0.74707031); //object(kmb_frontgate) (13)
	CreateDynamicObject(2909,2483.39990234,-1234.80004883,1062.09997559,0.00000000,0.00000000,0.75000000); //object(kmb_frontgate) (13)
	CreateDynamicObject(2909,2483.39990234,-1234.80004883,1064.69995117,0.00000000,0.00000000,0.74707031); //object(kmb_frontgate) (13)
	CreateDynamicObject(983,2495.00000000,-1262.00000000,1062.90002441,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (7)
	CreateDynamicObject(983,2482.30004883,-1262.50000000,1062.90002441,0.00000000,0.00000000,2.25000000); //object(fenceshit3) (8)
	CreateDynamicObject(983,2482.30004883,-1262.50000000,1064.19995117,0.00000000,0.00000000,2.24670410); //object(fenceshit3) (9)
	CreateDynamicObject(983,2482.30004883,-1262.50000000,1065.50000000,0.00000000,0.00000000,2.24670410); //object(fenceshit3) (10)
	CreateDynamicObject(983,2495.00000000,-1262.00000000,1064.19995117,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (11)
	CreateDynamicObject(983,2495.00000000,-1262.00000000,1065.50000000,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (12)
	CreateDynamicObject(2909,2490.39990234,-1263.19995117,1062.09997559,0.00000000,0.00000000,2.99707031); //object(kmb_frontgate) (13)
	CreateDynamicObject(2909,2490.39990234,-1263.19995117,1064.69995117,0.00000000,0.00000000,2.99377441); //object(kmb_frontgate) (13)
	CreateDynamicObject(2909,2485.60009766,-1263.40002441,1062.09997559,0.00000000,0.00000000,2.99377441); //object(kmb_frontgate) (13)
	CreateDynamicObject(2909,2485.60009766,-1263.40002441,1064.69995117,0.00000000,0.00000000,2.99377441); //object(kmb_frontgate) (13)
	CreateDynamicObject(1771,2492.00000000,-1236.09997559,1062.90002441,0.00000000,0.00000000,0.75000000); //object(cj_bunk_bed1) (9)
	CreateDynamicObject(2525,2490.50000000,-1235.30004883,1062.19995117,0.00000000,0.00000000,0.00000000); //object(cj_toilet4) (1)
	CreateDynamicObject(2524,2489.10009766,-1235.30004883,1062.19995117,0.00000000,0.00000000,0.00000000); //object(cj_b_sink4) (1)
	CreateDynamicObject(2824,2491.89990234,-1236.80004883,1063.09997559,0.00000000,0.00000000,343.50000000); //object(gb_novels02) (1)
	CreateDynamicObject(2674,2490.50000000,-1236.40002441,1062.30004883,0.00000000,0.00000000,29.25000000); //object(proc_rubbish_2) (1)
	CreateDynamicObject(2675,2489.00000000,-1236.69995117,1062.30004883,0.00000000,0.00000000,36.75000000); //object(proc_rubbish_6) (1)
	CreateDynamicObject(1544,2489.00000000,-1235.00000000,1061.80004883,0.00000000,0.00000000,0.00000000); //object(cj_beer_b_1) (1)
	CreateDynamicObject(1544,2489.89990234,-1235.09997559,1062.19995117,0.00000000,0.00000000,0.00000000); //object(cj_beer_b_1) (3)
	CreateDynamicObject(1544,2490.10009766,-1234.90002441,1062.19995117,0.00000000,0.00000000,0.00000000); //object(cj_beer_b_1) (4)
	CreateDynamicObject(1544,2490.19995117,-1235.09997559,1062.19995117,0.00000000,0.00000000,0.00000000); //object(cj_beer_b_1) (5)
	CreateDynamicObject(1544,2491.00000000,-1235.00000000,1062.19995117,0.00000000,0.00000000,0.00000000); //object(cj_beer_b_1) (6)
	CreateDynamicObject(1771,2487.30004883,-1236.30004883,1062.90002441,0.00000000,0.00000000,359.99707031); //object(cj_bunk_bed1) (12)
	CreateDynamicObject(2525,2485.60009766,-1235.40002441,1062.19995117,0.00000000,0.00000000,3.00000000); //object(cj_toilet4) (3)
	CreateDynamicObject(2524,2484.00000000,-1235.50000000,1062.19995117,0.00000000,0.00000000,0.00000000); //object(cj_b_sink4) (2)
	CreateDynamicObject(1549,2486.39990234,-1235.19995117,1061.90002441,0.00000000,0.00000000,0.00000000); //object(cj_ashtray_b) (1)
	CreateDynamicObject(2673,2484.60009766,-1236.19995117,1062.30004883,0.00000000,0.00000000,354.00000000); //object(proc_rubbish_5) (1)
	CreateDynamicObject(2673,2485.89990234,-1236.30004883,1062.40002441,0.00000000,0.00000000,23.24597168); //object(proc_rubbish_5) (2)
	CreateDynamicObject(2672,2486.50000000,-1236.80004883,1062.50000000,0.00000000,0.00000000,339.75000000); //object(proc_rubbish_4) (1)
	CreateDynamicObject(2859,2484.00000000,-1235.59997559,1062.19995117,0.00000000,0.00000000,348.00000000); //object(gb_kitchtakeway04) (1)
	CreateDynamicObject(1520,2484.80004883,-1235.30004883,1062.30004883,0.00000000,0.00000000,345.00000000); //object(dyn_wine_bounce) (1)
	CreateDynamicObject(1520,2485.00000000,-1235.19995117,1062.30004883,0.00000000,0.00000000,351.74816895); //object(dyn_wine_bounce) (2)
	CreateDynamicObject(1771,2482.60009766,-1236.50000000,1062.90002441,0.00000000,0.00000000,0.74450684); //object(cj_bunk_bed1) (13)
	CreateDynamicObject(2524,2480.00000000,-1235.69995117,1062.19995117,0.00000000,0.00000000,0.75000000); //object(cj_b_sink4) (3)
	CreateDynamicObject(2525,2481.10009766,-1235.50000000,1062.19995117,0.00000000,0.00000000,2.99926758); //object(cj_toilet4) (4)
	CreateDynamicObject(2673,2481.80004883,-1236.19995117,1062.30004883,0.00000000,0.00000000,353.99597168); //object(proc_rubbish_5) (3)
	CreateDynamicObject(2826,2482.50000000,-1236.80004883,1063.09997559,0.00000000,0.00000000,6.75000000); //object(gb_novels04) (1)
	CreateDynamicObject(1771,2494.19921875,-1260.79980469,1062.90002441,0.00000000,0.00000000,359.99450684); //object(cj_bunk_bed1) (14)
	CreateDynamicObject(2524,2492.30004883,-1261.69995117,1062.19995117,0.00000000,0.00000000,183.74633789); //object(cj_b_sink4) (4)
	CreateDynamicObject(2525,2492.79980469,-1261.69921875,1062.19995117,0.00000000,0.00000000,185.24597168); //object(cj_toilet4) (5)
	CreateDynamicObject(2524,2489.60009766,-1261.90002441,1062.19995117,0.00000000,0.00000000,181.49633789); //object(cj_b_sink4) (5)
	CreateDynamicObject(2525,2488.30004883,-1261.90002441,1062.19995117,0.00000000,0.00000000,179.99597168); //object(cj_toilet4) (6)
	CreateDynamicObject(1771,2486.30004883,-1261.09997559,1062.90002441,0.00000000,0.00000000,2.24450684); //object(cj_bunk_bed1) (15)
	CreateDynamicObject(1771,2483.00000000,-1261.19995117,1062.90002441,0.00000000,0.00000000,0.74121094); //object(cj_bunk_bed1) (16)
	CreateDynamicObject(2524,2485.39990234,-1262.00000000,1062.19995117,0.00000000,0.00000000,181.49414062); //object(cj_b_sink4) (6)
	CreateDynamicObject(2525,2484.30004883,-1262.09997559,1062.19995117,0.00000000,0.00000000,179.99450684); //object(cj_toilet4) (7)
	CreateDynamicObject(2891,2494.19995117,-1261.50000000,1062.30004883,0.00000000,0.00000000,315.75000000); //object(kmb_packet) (1)
	CreateDynamicObject(2891,2494.30004883,-1260.90002441,1062.30004883,0.00000000,0.00000000,270.74707031); //object(kmb_packet) (2)
	CreateDynamicObject(2676,2492.30004883,-1260.40002441,1062.36999512,0.00000000,0.00000000,343.40002441); //object(proc_rubbish_8) (1)
	CreateDynamicObject(2676,2488.19995117,-1260.59997559,1062.40002441,0.00000000,0.00000000,357.64965820); //object(proc_rubbish_8) (2)
	CreateDynamicObject(2676,2483.30004883,-1260.69995117,1062.40002441,0.00000000,0.00000000,11.14892578); //object(proc_rubbish_8) (3)
	CreateDynamicObject(2827,2489.19995117,-1261.09997559,1062.30004883,0.00000000,0.00000000,0.00000000); //object(gb_novels05) (1)
	CreateDynamicObject(2827,2488.00000000,-1261.40002441,1062.30004883,0.00000000,0.00000000,347.25000000); //object(gb_novels05) (2)
	CreateDynamicObject(2827,2488.39990234,-1260.69995117,1062.30004883,0.00000000,0.00000000,347.24487305); //object(gb_novels05) (3)
	CreateDynamicObject(944,2494.10009766,-1235.40002441,1063.09997559,0.00000000,0.00000000,3.75000000); //object(packing_carates04) (1)
	CreateDynamicObject(942,2498.39990234,-1235.50000000,1064.69995117,0.00000000,0.00000000,2.25000000); //object(cj_df_unit_2) (1)
	CreateDynamicObject(939,2503.50000000,-1235.40002441,1063.00000000,0.00000000,0.00000000,0.75000000); //object(cj_df_unit) (1)
	CreateDynamicObject(3066,2505.69995117,-1242.09997559,1063.30004883,0.00000000,0.00000000,0.00000000); //object(ammotrn_obj) (1)
	CreateDynamicObject(3046,2503.30004883,-1238.19995117,1062.59997559,0.00000000,0.00000000,0.00000000); //object(kb_barrel) (1)
	CreateDynamicObject(3046,2502.30004883,-1238.30004883,1062.59997559,0.00000000,0.00000000,0.00000000); //object(kb_barrel) (2)
	CreateDynamicObject(3046,2501.19995117,-1238.30004883,1062.59997559,0.00000000,0.00000000,0.00000000); //object(kb_barrel) (3)
	CreateDynamicObject(3046,2500.10009766,-1238.30004883,1062.59997559,0.00000000,0.00000000,0.00000000); //object(kb_barrel) (4)
	CreateDynamicObject(18257,2468.19995117,-1263.50000000,1062.19995117,0.00000000,0.00000000,270.75000000); //object(crates) (1)
	CreateDynamicObject(925,2502.10009766,-1240.19995117,1063.30004883,0.00000000,0.00000000,0.00000000); //object(rack2) (1)
	CreateDynamicObject(925,2502.10009766,-1242.40002441,1063.30004883,0.00000000,0.00000000,0.00000000); //object(rack2) (2)
	CreateDynamicObject(925,2498.89990234,-1242.40002441,1063.30004883,0.00000000,0.00000000,0.00000000); //object(rack2) (3)
	CreateDynamicObject(925,2498.89990234,-1240.09997559,1063.30004883,0.00000000,0.00000000,0.00000000); //object(rack2) (4)
	CreateDynamicObject(1362,2493.60009766,-1237.19995117,1062.90002441,0.00000000,0.00000000,0.00000000); //object(cj_firebin) (1)
	CreateDynamicObject(1362,2494.50000000,-1237.19995117,1062.90002441,0.00000000,0.00000000,0.00000000); //object(cj_firebin) (2)
	CreateDynamicObject(1362,2496.69995117,-1237.30004883,1062.90002441,0.00000000,0.00000000,0.00000000); //object(cj_firebin) (3)
	CreateDynamicObject(1362,2497.50000000,-1237.30004883,1062.90002441,0.00000000,0.00000000,0.00000000); //object(cj_firebin) (4)
	CreateDynamicObject(1362,2498.50000000,-1240.30004883,1065.00000000,0.00000000,0.00000000,0.00000000); //object(cj_firebin) (5)
	CreateDynamicObject(1431,2476.60009766,-1262.59997559,1062.80004883,0.00000000,0.00000000,0.00000000); //object(dyn_box_pile) (1)
	CreateDynamicObject(1431,2474.39990234,-1262.59997559,1062.80004883,0.00000000,0.00000000,0.00000000); //object(dyn_box_pile) (2)
	CreateDynamicObject(1431,2475.19995117,-1262.80004883,1063.80004883,0.00000000,0.00000000,0.00000000); //object(dyn_box_pile) (3)
	CreateDynamicObject(1685,2470.39990234,-1260.19995117,1062.90002441,0.00000000,0.00000000,359.25000000); //object(blockpallet) (1)
	CreateDynamicObject(2567,2497.69995117,-1261.00000000,1064.19995117,0.00000000,0.00000000,1.50000000); //object(ab_warehouseshelf) (1)
	CreateDynamicObject(2567,2502.80004883,-1260.90002441,1064.19995117,0.00000000,0.00000000,1.49963379); //object(ab_warehouseshelf) (2)
	CreateDynamicObject(2567,2500.19995117,-1245.30004883,1064.19995117,0.00000000,0.00000000,1.49963379); //object(ab_warehouseshelf) (3)
	CreateDynamicObject(2567,2500.19995117,-1248.30004883,1064.19995117,0.00000000,0.00000000,1.49963379); //object(ab_warehouseshelf) (4)
	CreateDynamicObject(1998,2471.89990234,-1246.90002441,1062.30004883,0.00000000,0.00000000,273.75000000); //object(officedesk1l) (1)
	CreateDynamicObject(1671,2471.80004883,-1247.80004883,1062.69995117,0.00000000,0.00000000,84.00000000); //object(swivelchair_a) (1)
	CreateDynamicObject(2567,2476.59960938,-1236.50000000,1062.50000000,0.00000000,0.00000000,3.74633789); //object(ab_warehouseshelf) (5)
	CreateDynamicObject(9819,2459.50000000,-1240.50000000,1067.30004883,0.00000000,0.00000000,181.50000000); //object(shpbridge_sfw02) (1)
	CreateDynamicObject(9822,2460.00000000,-1240.09997559,1067.09997559,0.00000000,0.00000000,180.00000000); //object(shpbridge_sfw08) (1)
	CreateDynamicObject(1775,2459.69995117,-1244.80004883,1067.09997559,0.00000000,270.00000000,181.50000000); //object(cj_sprunk1) (1)
	CreateDynamicObject(1775,2459.69995117,-1244.80004883,1065.90002441,0.00000000,270.00000000,181.49963379); //object(cj_sprunk1) (6)
	CreateDynamicObject(1775,2457.50000000,-1244.86010742,1067.09997559,0.00000000,270.00000000,181.49963379); //object(cj_sprunk1) (7)
	CreateDynamicObject(1775,2457.50000000,-1244.90002441,1065.90002441,0.00000000,270.00000000,181.49963379); //object(cj_sprunk1) (9)
	CreateDynamicObject(3388,2465.69995117,-1239.90002441,1066.40002441,0.00000000,0.00000000,3.00000000); //object(a51_srack4_) (1)
	CreateDynamicObject(3388,2465.80004883,-1241.09997559,1066.40002441,0.00000000,0.00000000,3.75000000); //object(a51_srack4_) (2)
	CreateDynamicObject(3388,2464.60009766,-1236.30004883,1066.40002441,0.00000000,0.00000000,93.00000000); //object(a51_srack4_) (3)
	CreateDynamicObject(3389,2463.30004883,-1236.40002441,1066.40002441,0.00000000,0.00000000,93.00000000); //object(a51_srack1_) (1)
	CreateDynamicObject(2773,2461.80004883,-1245.19995117,1066.90002441,0.00000000,0.00000000,270.00000000); //object(cj_airprt_bar) (1)
	CreateDynamicObject(1892,2463.10009766,-1245.00000000,1066.30004883,0.00000000,0.00000000,2.25000000); //object(security_gatsh) (2)
	CreateDynamicObject(2773,2465.39990234,-1245.09997559,1066.90002441,0.00000000,0.00000000,270.00000000); //object(cj_airprt_bar) (2)
	CreateDynamicObject(1999,2461.30004883,-1236.50000000,1066.40002441,0.00000000,0.00000000,2.25000000); //object(officedesk2) (1)
	CreateDynamicObject(1671,2462.19995117,-1237.09997559,1066.90002441,0.00000000,0.00000000,180.00000000); //object(swivelchair_a) (2)
	CreateDynamicObject(2596,2460.60009766,-1236.09997559,1069.09997559,0.00000000,0.00000000,0.00000000); //object(cj_sex_tv) (1)
	CreateDynamicObject(2596,2461.39990234,-1236.09997559,1069.09997559,0.00000000,0.00000000,0.00000000); //object(cj_sex_tv) (2)
	CreateDynamicObject(2596,2462.19995117,-1236.09997559,1069.09997559,0.00000000,0.00000000,0.00000000); //object(cj_sex_tv) (3)
	CreateDynamicObject(2596,2460.60009766,-1236.09997559,1068.30004883,0.00000000,0.00000000,0.00000000); //object(cj_sex_tv) (4)
	CreateDynamicObject(2596,2461.39990234,-1236.09997559,1068.30004883,0.00000000,0.00000000,0.00000000); //object(cj_sex_tv) (5)
	CreateDynamicObject(2596,2462.19995117,-1236.09997559,1068.30004883,0.00000000,0.00000000,0.00000000); //object(cj_sex_tv) (6)
	CreateDynamicObject(14532,2465.80004883,-1242.59997559,1067.40002441,0.00000000,0.00000000,73.50000000); //object(tv_stand_driv) (1)
	CreateDynamicObject(14532,2465.80004883,-1243.80004883,1067.40002441,0.00000000,0.00000000,106.49853516); //object(tv_stand_driv) (2)
	CreateDynamicObject(2606,2458.30004883,-1243.00000000,1069.30004883,20.00000000,0.00000000,92.25000000); //object(cj_police_counter2) (1)
	CreateDynamicObject(2606,2458.30004883,-1243.00000000,1068.80004883,19.99511719,0.00000000,92.24670410); //object(cj_police_counter2) (2)
	CreateDynamicObject(2606,2458.19995117,-1240.59997559,1068.69995117,19.99511719,0.00000000,92.24670410); //object(cj_police_counter2) (3)
	CreateDynamicObject(2606,2458.19995117,-1240.59997559,1069.19995117,19.99511719,0.00000000,92.24670410); //object(cj_police_counter2) (4)
	CreateDynamicObject(16782,2458.30004883,-1238.00000000,1069.40002441,0.00000000,0.00000000,2.25000000); //object(a51_radar_scan) (1)
	CreateDynamicObject(630,2458.80004883,-1245.80004883,1067.40002441,0.00000000,0.00000000,0.00000000); //object(veg_palmkb8) (1)
	CreateDynamicObject(630,2460.80004883,-1245.59997559,1067.40002441,0.00000000,0.00000000,0.00000000); //object(veg_palmkb8) (2)
	CreateDynamicObject(630,2462.69995117,-1245.50000000,1067.40002441,0.00000000,0.00000000,0.00000000); //object(veg_palmkb8) (3)
	CreateDynamicObject(630,2464.80004883,-1245.40002441,1067.40002441,0.00000000,0.00000000,0.00000000); //object(veg_palmkb8) (4)
	CreateDynamicObject(630,2466.30004883,-1245.40002441,1067.40002441,0.00000000,0.00000000,0.00000000); //object(veg_palmkb8) (5)
	CreateDynamicObject(2614,2458.34008789,-1242.22998047,1070.69995117,0.00000000,0.00000000,92.25000000); //object(cj_us_flag) (1)
	CreateDynamicObject(2172,2459.10009766,-1248.19995117,1066.40002441,0.00000000,0.00000000,92.25000000); //object(med_office2_desk_1) (1)
	CreateDynamicObject(2172,2459.19995117,-1250.59997559,1066.40002441,0.00000000,0.00000000,92.24670410); //object(med_office2_desk_1) (2)
	CreateDynamicObject(2172,2459.30004883,-1253.00000000,1066.40002441,0.00000000,0.00000000,92.24670410); //object(med_office2_desk_1) (3)
	CreateDynamicObject(2172,2461.19995117,-1251.90002441,1066.40002441,0.00000000,0.00000000,272.50000000); //object(med_office2_desk_1) (4)
	CreateDynamicObject(2172,2461.19995117,-1249.50000000,1066.40002441,0.00000000,0.00000000,272.49682617); //object(med_office2_desk_1) (5)
	CreateDynamicObject(2172,2461.10009766,-1247.00000000,1066.40002441,0.00000000,0.00000000,272.49682617); //object(med_office2_desk_1) (6)
	CreateDynamicObject(630,2461.00000000,-1248.80004883,1067.40002441,0.00000000,0.00000000,0.00000000); //object(veg_palmkb8) (6)
	CreateDynamicObject(630,2459.50000000,-1248.90002441,1067.40002441,0.00000000,0.00000000,0.00000000); //object(veg_palmkb8) (7)
	CreateDynamicObject(630,2459.50000000,-1251.30004883,1067.40002441,0.00000000,0.00000000,0.00000000); //object(veg_palmkb8) (8)
	CreateDynamicObject(630,2461.00000000,-1251.30004883,1067.40002441,0.00000000,0.00000000,0.00000000); //object(veg_palmkb8) (9)
	CreateDynamicObject(1671,2459.60009766,-1252.30004883,1066.90002441,0.00000000,0.00000000,279.75000000); //object(swivelchair_a) (3)
	CreateDynamicObject(1671,2460.80004883,-1252.30004883,1066.90002441,0.00000000,0.00000000,96.75000000); //object(swivelchair_a) (4)
	CreateDynamicObject(1671,2460.89990234,-1250.50000000,1066.90002441,0.00000000,0.00000000,92.99560547); //object(swivelchair_a) (5)
	CreateDynamicObject(1671,2460.69995117,-1247.69995117,1066.90002441,0.00000000,0.00000000,112.49377441); //object(swivelchair_a) (6)
	CreateDynamicObject(1671,2459.69995117,-1250.00000000,1066.90002441,0.00000000,0.00000000,260.24487305); //object(swivelchair_a) (7)
	CreateDynamicObject(1671,2459.50000000,-1247.50000000,1066.90002441,0.00000000,0.00000000,285.74414062); //object(swivelchair_a) (8)
	CreateDynamicObject(1557,2458.89990234,-1256.66979980,1066.41003418,0.00000000,0.00000000,273.00000000); //object(gen_doorext19) (1)
	CreateDynamicObject(1557,2459.00000000,-1259.69995117,1066.41003418,0.00000000,0.00000000,90.75000000); //object(gen_doorext19) (3)
	CreateDynamicObject(627,2459.60009766,-1260.09997559,1068.19995117,0.00000000,0.00000000,0.00000000); //object(veg_palmkb3) (1)
	CreateDynamicObject(627,2459.50000000,-1256.40002441,1068.19995117,0.00000000,0.00000000,0.00000000); //object(veg_palmkb3) (2)
	CreateDynamicObject(1431,2460.50000000,-1263.19995117,1067.09997559,0.00000000,0.00000000,0.00000000); //object(dyn_box_pile) (4)
	CreateDynamicObject(1431,2462.80004883,-1263.19995117,1067.09997559,0.00000000,0.00000000,0.00000000); //object(dyn_box_pile) (5)
	CreateDynamicObject(1432,2462.89990234,-1240.40002441,1066.40002441,0.00000000,0.00000000,31.50000000); //object(dyn_table_2) (1)
	print("Static objects loaded.");
	return 1;
}

stock LoadPickups()
{
    Create3DTextLabel(".", COLOR_RED, 1031.6764,-1442.6636,13.5546, 15, 0, 1);
	// Fixing pickups, 1st one doesn't show for some reason
	new string[128];
    CreatePickup(1239, 1, 1677.3772,2340.2471,9.8980); // Trucker Job
    Create3DTextLabel("Trucker Job\n{FFFF00}/join to get the job", COLOR_RED, 1677.3772,2340.2471,9.8980, 30, 0, 1);
    CreatePickup(1239, 1, 1727.3557,2309.9985,10.8203); // Trucker Pickup
    Create3DTextLabel("Packages Pickup\n{FFFF00}/loadpackages to get crates", COLOR_RED, 1727.3557,2309.9985,10.8203, 30, 0, 1);
    CreatePickup(1239, 1, 2222.5107,-2682.7368,13.5409); // Trucker Dropoff
	format(string, sizeof(string), "Packages Dropoff\n{FFFF00}/deliverpackages to deliver crates\nAvailable Products: %d/10000", Products);
    ProductsText = CreateDynamic3DTextLabel(string, COLOR_RED, 2222.5107,-2682.7368,13.5409, 30);
    CreatePickup(330, 1, 1154.1257,-1180.9600,32.8187); // Telecom Company
    Create3DTextLabel("Telecom Company\n{FFFF00}/buysim to buy a sim card\n/internet to enable/disable internet", COLOR_RED, 1154.1257,-1180.9600,32.8187, 15, 0, 1);
	CreatePickup(1239, 1, 2165.2358,-2271.5012,13.3413);// Weapons Dealer Job
	Create3DTextLabel("Weapons Dealer Job\n{FFFF00}/join to get the job", COLOR_RED, 2165.2358,-2271.5012,13.3413, 15, 0, 1);
	CreatePickup(1239, 1, 1415.4907,-1301.0790,13.5449); // Weapons Smuggler Job
    Create3DTextLabel("Weapons Smuggler Job\n{FFFF00}/join to get the job", COLOR_RED, 1415.4907,-1301.0790,13.5449, 15, 0, 1);
	CreatePickup(348, 1, 1423.6010,-1317.9398,13.5547); // Materials Pickup
    Create3DTextLabel("Materials Pickup\n{FFFF00}/getmats to get packages", COLOR_RED, 1423.6010,-1317.9398,13.5547, 15, 0, 1);
    CreatePickup(1279, 1, 2172.5471,-2264.2207,13.3416); // Materials Dropoff
    Create3DTextLabel("Materials Dropoff\n{FFFF00}/dropmats to get materials", COLOR_RED, 2172.5471,-2264.2207,13.3416, 15, 0, 1);
    CreatePickup(1239, 1, 2330.0693,-2315.4709,13.5469); // Mechanic Job
    Create3DTextLabel("Mechanic Job\n{FFFF00}/join to get the job", COLOR_RED, 2330.0693,-2315.4709,13.5469, 15, 0, 1);
    CreatePickup(1239, 1, 1380.8300,-1088.7698,27.3844); // Lawyer Job
    Create3DTextLabel("Lawyer Job\n{FFFF00}/join to get the job", COLOR_RED, 1380.8300,-1088.7698,27.3844, 15, 0, 1);
    CreatePickup(1239, 1, 2178.5518,-1660.4418,14.9644); // Drugs Dealer Job
    Create3DTextLabel("Drugs Dealer Job\n{FFFF00}/join to get the job\n/dropweed to deliver weed", COLOR_RED, 2178.5518,-1660.4418,14.9644, 15, 0, 1);
    CreatePickup(1239, 1, 2354.7354,-1170.1056,28.0475); // Drugs Smuggler Job
    Create3DTextLabel("Drugs Smuggler Job\n{FFFF00}/join to get the job\n/dropcrack to deliver crack", COLOR_RED, 2354.7354,-1170.1056,28.0475, 15, 0, 1);
    CreatePickup(1239, 1, 2941.2471,-2053.3892,3.5480); // Weed Packages Pickup
    Create3DTextLabel("Weed Packages Pickup\n{FFFF00}/getweed to get packages", COLOR_RED, 2941.2471,-2053.3892,3.5480, 15, 0, 1);
    CreatePickup(1239, 1, 2941.2471,-2050.1772,3.5480); // Crack Packages Pickup
    Create3DTextLabel("Crack Packages Pickup\n{FFFF00}/getcrack to get packages", COLOR_RED, 2941.2471,-2050.1772,3.5480, 15, 0, 1);
    CreatePickup(1279, 1, 323.0012,1118.5720,1083.8828); // Actual Weed Pickup
    format(string, sizeof(string), "Weed Pickup\n{FFFF00}/buyweed to get weed\nAvailable Stock: %d/2000", Weed);
    WeedText = CreateDynamic3DTextLabel(string, COLOR_RED, 323.0012,1118.5720,1083.8828, 15);
    CreatePickup(1279, 1, 2345.3992,-1185.6423,1027.9766); // Actual Crack Pickup
    format(string, sizeof(string), "Crack Pickup\n{FFFF00}/buycrack to get crack\nAvailable Stock: %d/2000", Crack);
    CrackText = CreateDynamic3DTextLabel(string, COLOR_RED, 2345.3992,-1185.6423,1027.9766, 15);
    CreatePickup(1239, 1, 2227.9976,-1718.2604,13.5321); // Bodyguard Job
    Create3DTextLabel("Bodyguard Job\n{FFFF00}/join to get the job", COLOR_RED, 2227.9976,-1718.2604,13.5321, 15, 0, 1);
    CreatePickup(1239, 1, 545.6661,-1292.2437,17.2422); // Dealership
    Create3DTextLabel("Vehicles Dealership\n{FFFF00}/buycar to buy a vehicle", COLOR_RED, 545.6661,-1292.2437,17.2422, 15, 0, 1);
    CreatePickup(1239, 1, 1490.2968,1305.7004,1093.2964); // DMV Inside
    Create3DTextLabel("Department of Motor Vehicles\n{FFFF00}/getlic to start your drivers license test", COLOR_RED, 1490.2968,1305.7004,1093.2964, 15, 0, 1);
    Create3DTextLabel("Door\n{FFFF00}/exit to get out", COLOR_RED, 1494.4541,1303.5806,1093.2891, 15, 0, 1);
    Create3DTextLabel("VIP Armor Spot\n{FFFF00}/buyarmor to get full armor", COLOR_RED, 287.2132,-177.3140,999.6060, 15, 0, 1);
    Create3DTextLabel("VIP Health Spot\n{FFFF00}/buyhealth to get full health", COLOR_RED, 285.0209,-177.3140,999.6060, 15, 0, 1);
	Create3DTextLabel("VIP Weapons Shop\n{FFFF00}/buygun to buy a VIP weapon", COLOR_RED, 278.4188,-180.5654,999.6060, 15, 0, 1);
	Create3DTextLabel("VIP Toys Shop\n{FFFF00}/buyviptoys to buy a VIP toy", COLOR_RED, 278.4188,-175.9247,999.6060, 15, 0, 1);
	CreatePickup(1239, 1, 352.1964,173.3516,1025.7891); // Government Lockers
    Create3DTextLabel("Government Lockers\n{FFFF00}/locker to grab your weapons", COLOR_RED, 352.1964,173.3516,1025.7891, 15, 0, 1);
    // Refilling spots
    Create3DTextLabel("Gas Station\n{FFFF00}/fuel to refill your vehicle", COLOR_RED, 1941.7532,-1776.3621,13.6406, 15, 0, 1);
    Create3DTextLabel("Gas Station\n{FFFF00}/fuel to refill your vehicle", COLOR_RED, 1941.7532,-1769.2583,13.6406, 15, 0, 1);
    Create3DTextLabel("Gas Station\n{FFFF00}/fuel to refill your vehicle", COLOR_RED, 1000.4276,-937.2377,42.3281, 15, 0, 1);
    Create3DTextLabel("Gas Station\n{FFFF00}/fuel to refill your vehicle", COLOR_RED, 1007.4702,-936.3239,42.3281, 15, 0, 1);
    //
    CreatePickup(1239, 1, 765.9518,15.2308,1000.6991, 1); // Boxer Job
    Create3DTextLabel("Boxer Job\n{FFFF00}/join to get the job", COLOR_RED, 765.9518,15.2308,1000.6991, 15, 1, 1);
    CreatePickup(1239, 1, 756.3295,5.6053,1000.6988, 1); // Gym /train
    Create3DTextLabel("Fighting Styles\n{FFFF00}/train to change your fighting style", COLOR_RED, 756.3295,5.6053,1000.6988, 15, 1, 1);
    Create3DTextLabel("Boxer 1\n{FFFF00}/bid 1 to place a bid on this boxer", COLOR_RED, 763.1202,2.4917,1001.5942, 25, 1, 0);
    Create3DTextLabel("Boxer 2\n{FFFF00}/bid 2 to place a bid on this boxer", COLOR_RED, 758.5969,-1.9768,1001.5942, 25, 1, 0);
    Parachute = CreatePickup(371, 1, 1544.0267,-1353.1768,329.4745); // Parachute
    // Bank Robbery // INT:83, VW:8473
    Create3DTextLabel("Bank Vault\n{FFFF00}/startrobbery to open the vault door", COLOR_RED, 2242.0234,1632.7185,961.7531, 25, 8473, 0);
    // News Vault
    Create3DTextLabel("News Agency Vault\n{FFFF00}/newsvault to check the money inside\n/vaultwithdraw to withdraw money", COLOR_RED, 1202.8289,-762.5840,1073.1819, 15, 0, 1);
    /*
    403.8016,-2088.7976,7.8359 ; Fish1
	398.7358,-2088.7939,7.8359 ; Fish2
	396.1771,-2088.7976,7.8359 ; Fish3
	391.0683,-2088.7974,7.8359 ; Fish4
	383.4282,-2088.7969,7.8359 ; Fish5
	374.9623,-2088.7974,7.8359 ; Fish6
	369.8990,-2088.7976,7.8359 ; Fish7
	367.3003,-2088.7981,7.8359 ; Fish8
	362.1855,-2088.7974,7.8359 ; Fish9
	354.5370,-2088.7983,7.8359 ; Fish10
	*/
    print("Static pickups loaded.");
	return 1;
}

stock ShowStats(playerid, playerb)
{
	new string[128], gender[8], Float:H, Float:A;
	// Gender
	if(PlayerInfo[playerb][pGender] == 1) format(gender, sizeof(gender), "Male");
	else if(PlayerInfo[playerb][pGender] == 2) format(gender, sizeof(gender), "Female");
	// Health and Armor
	GetPlayerHealth(playerb, H); GetPlayerArmour(playerb, A);
	// Total Wealth
	new idx = PlayerInfo[playerb][pHouse];
	new idx2 = PlayerInfo[playerb][pBiz];
	new TotalWealth = PlayerInfo[playerb][pMoney]+PlayerInfo[playerb][pBank]+HouseInfo[idx][hMoney]+BizInfo[idx2][bMoney];
	// Loyal
	new loyal[4];
	if(!PlayerInfo[playerb][pLoyal]) format(loyal, sizeof(loyal), "Yes");
	if(PlayerInfo[playerb][pLoyal]) format(loyal, sizeof(loyal), "No");
	// Oldskool
	new oldskool[4];
	if(PlayerInfo[playerid][pHours] >= 248) format(oldskool, sizeof(oldskool), "Yes");
	else if(PlayerInfo[playerid][pHours] < 248) format(oldskool, sizeof(oldskool), "No");

	// Stats
	/*SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	format(string, sizeof(string), "Stats of %s", RPN(playerb));
	SendClientMessage(playerid, COLOR_ORANGE, string);
	format(string, sizeof(string), "Level:[%d] Respect:[%d] Gender:[%s] Age:[%d] Phone:[%s] Money:[$%d] Bank:[$%d] TotalWealth:[$%d]", PlayerInfo[playerb][pLevel], PlayerInfo[playerb][pHours], gender, PlayerInfo[playerb][pAge], RPPNO(playerb), PlayerInfo[playerb][pMoney], PlayerInfo[playerb][pBank], TotalWealth);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "WTC:[%d] PlayingMinutes:[%d] WantedLevel:[%d] CrimesCommitted:[%d] Arrested:[%dx] Job:[%s] Packages:[%s]", PlayerInfo[playerid][pWTC], PlayerInfo[playerb][pMinutes], PlayerInfo[playerb][pWanted], PlayerInfo[playerb][pCrimes], PlayerInfo[playerb][pArrested], RPJN(playerb), RPPN(playerb));
	SendClientMessage(playerid, COLOR_FADE2, string);
	format(string, sizeof(string), "Materials:[%d] Cigar:[%d] Sprunk:[%d] Spray:[%d] Ropes:[%d] Blindfolds:[%d] GasCans:[%d] Scopes:[%d]", PlayerInfo[playerb][pMaterials], PlayerInfo[playerid][pCigar], PlayerInfo[playerid][pSprunk], PlayerInfo[playerid][pSpray], PlayerInfo[playerid][pRope], PlayerInfo[playerid][pBlindfold], PlayerInfo[playerid][pGas], PlayerInfo[playerid][pScope]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Business:[%s] Key:[%s] Level:[%s] Status:[%s] Products:[%s] Vault:[%s] Weed:[%d] Crack:[%d]", RBT(PlayerInfo[playerb][pBiz]), RPBK(playerb), RPBL(playerb),status, RPBP(playerb), RPBM(playerb), PlayerInfo[playerb][pWeed], PlayerInfo[playerb][pCrack]);
	SendClientMessage(playerid, COLOR_FADE2, string);
	format(string, sizeof(string), "Faction:[%s] Rank:[%s (%d)] Leader:[%s] Division:[%s] Leader:[%s] Health:[%0.1f] Armor[%0.1f]", RPFNEx(playerb), RPFRN(playerb), PlayerInfo[playerb][pFacRank], RPFL(playerb), RPFDN(playerb), RPFDL(playerb), H, A);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Family:[%s] Rank:[%s (%d)] HouseKey:[%s] Level:[%s] Vehicle:[%s (%d)]", RPFaN(playerb), RPFaRN(playerb), PlayerInfo[playerb][pFamRank], RPHK(playerb), RPHL(playerb), RVN(GetVehicleModel(PlayerInfo[playerb][pVeh])), PlayerInfo[playerb][pVeh]);
	SendClientMessage(playerid, COLOR_FADE2, string);
	format(string, sizeof(string), "VIP:[%s] vJob:[%s] vHouse:[%s] vLevel:[%s] vVeh:[%s (%d)]", RPVIPN(playerb), RPVJN(playerb), RPVIPHK(playerb), RPVIPHL(playerb), RVN(GetVehicleModel(PlayerInfo[playerb][pVVeh])), PlayerInfo[playerb][pVVeh]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "vBusiness:[%s] vKey:[%s] vLevel:[%s] vStatus:[%s] vProducts:[%s] vVault:[%s]", RBT(PlayerInfo[playerb][pVBiz]), RPVIPBK(playerb), RPVIPBL(playerb),status2, RPVIPBP(playerb), RPVIPBM(playerb));
	SendClientMessage(playerid, COLOR_FADE2, string);
	if(PlayerInfo[playerid][pAdmin] || PlayerInfo[playerid][pHelper]){
	format(string, sizeof(string), "Skin:[%d] Int:[%d] VW:[%d] IP:[%s] Admin:[%d] Helper:[%d] RefPoints:[%d]", PlayerInfo[playerb][pModel], GetPlayerInterior(playerb), GetPlayerVirtualWorld(playerb), PlayerInfo[playerb][pIP], PlayerInfo[playerb][pAdmin], PlayerInfo[playerb][pHelper], PlayerInfo[playerb][pRefPoints]);
	SendClientMessage(playerid, COLOR_WHITE, string);}*/
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "_____________________________________________________");
	format(string, sizeof(string), "%s | Level: %d | %s | Age: %d | Respect: %d | Money: $%d | Bank: $%d | Total Wealth: $%d | Warnings: %d", RPN(playerb), PlayerInfo[playerb][pLevel], gender, PlayerInfo[playerb][pAge], PlayerInfo[playerb][pHours], PlayerInfo[playerb][pMoney], PlayerInfo[playerb][pBank], TotalWealth, PlayerInfo[playerb][pWarns]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Phone: %d | WTC: %d | Wanted: %d | Crimes: %d | Arrested: %d | Job 1: %s | Job 2: %s | Health: %0.1f | Armor: %0.1f", RPPNO(playerb), PlayerInfo[playerb][pWTC], PlayerInfo[playerb][pWanted], PlayerInfo[playerb][pCrimes], PlayerInfo[playerb][pArrested], RPJN(playerb), RPVJN(playerb), H, A);
	SendClientMessage(playerid, COLOR_FADE2, string);
	format(string, sizeof(string), "Packages: %s | Materials: %d | Weed: %d | Crack: %d | Cigar: %d | Sprunk: %d | Spray: %d | Ropes: %d | Blindfolds: %d", RPPN(playerb), PlayerInfo[playerb][pMaterials], PlayerInfo[playerb][pWeed], PlayerInfo[playerb][pCrack], PlayerInfo[playerb][pCigar], PlayerInfo[playerb][pSprunk], PlayerInfo[playerb][pSpray], PlayerInfo[playerb][pRope], PlayerInfo[playerb][pBlindfold]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Gas Can: %d | Scopes: %d | Referral Points: %d | Loyalty Points: %d | VIP Bonus Points: %d | Skin: %d | Int: %d | VW: %d", PlayerInfo[playerb][pGas], PlayerInfo[playerb][pScope], PlayerInfo[playerb][pRefPoints], PlayerInfo[playerb][pLPoints], PlayerInfo[playerb][pReward], PlayerInfo[playerb][pModel], GetPlayerInterior(playerb), GetPlayerVirtualWorld(playerb));
	SendClientMessage(playerid, COLOR_FADE2, string);
	format(string, sizeof(string), "Faction: %s | Rank: %d | Division: %s | Family: %s | Rank: %d | House 1: %s | House 2: %s", RPFNEx(playerb), PlayerInfo[playerb][pFacRank], RPFDN(playerb), RPFaN(playerb), PlayerInfo[playerb][pFamRank], RPHK(playerb), RPVIPHK(playerb));
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Business 1: %s (ID: %s) | Business 2: %s (ID: %s) | Vehicle 1: %s (ID: %d) | Vehicle 2: %s (ID: %d)", RBT(PlayerInfo[playerb][pBiz]), RPBK(playerb), RBT(PlayerInfo[playerb][pVBiz]), RPVIPBK(playerb), RVN(GetVehicleModel(PlayerInfo[playerb][pVeh])), PlayerInfo[playerb][pVeh], RVN(GetVehicleModel(PlayerInfo[playerb][pVVeh])), PlayerInfo[playerb][pVVeh]);
	SendClientMessage(playerid, COLOR_FADE2, string);
	format(string, sizeof(string), "Gate 1: %d | Gate 2: %d | Gate 3: %d | Loyal: %s | Oldskool: %s | VIP: %s | Helper Level: %d | Admin Level: %d", PlayerInfo[playerb][pGate][0], PlayerInfo[playerb][pGate][1], PlayerInfo[playerb][pGate][2], loyal, oldskool, RPVIPN(playerb), PlayerInfo[playerb][pHelper], PlayerInfo[playerb][pAdmin]);
 	SendClientMessage(playerid, COLOR_WHITE, string);
	SendClientMessage(playerid, COLOR_REPORT, " Type /bizstats for detailed information about your businesses.");
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "_____________________________________________________");
	return 1;
}



stock RWN(weaponid)
{
	new name[32];
	GetWeaponName(weaponid, name, sizeof(name));
	if(weaponid == 0) format(name, sizeof(name), "None");
	return name;
}

stock RPIP(playerid)
{
	new ip[16];
	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

stock RPVIPN(playerid)
{
	new name[32];
	if(PlayerInfo[playerid][pVIP] == 0) format(name, sizeof(name), "None");
	else if(PlayerInfo[playerid][pVIP] == 1) format(name, sizeof(name), "Bronze");
	else if(PlayerInfo[playerid][pVIP] == 2) format(name, sizeof(name), "Silver");
	else if(PlayerInfo[playerid][pVIP] == 3) format(name, sizeof(name), "Gold");
	else if(PlayerInfo[playerid][pVIP] == 4) format(name, sizeof(name), "Platinum");
	return name;
}

stock RPALN(playerid)
{
	new name[32];
	if(PlayerInfo[playerid][pAdmin] == 1) format(name, sizeof(name), "Trial Admin");
	else if(PlayerInfo[playerid][pAdmin] == 2) format(name, sizeof(name), "Junior Admin");
	else if(PlayerInfo[playerid][pAdmin] == 3) format(name, sizeof(name), "General Admin");
	else if(PlayerInfo[playerid][pAdmin] == 4) format(name, sizeof(name), "Senior Admin");
	else if(PlayerInfo[playerid][pAdmin] == 5) format(name, sizeof(name), "Head Admin");
	else if(PlayerInfo[playerid][pAdmin] >= 6) format(name, sizeof(name), "Executive Admin");
	return name;
}

stock RPHLN(playerid)
{
	new name[32];
	if(PlayerInfo[playerid][pHelper] == 1) format(name, sizeof(name), "Junior Helper");
	else if(PlayerInfo[playerid][pHelper] == 2) format(name, sizeof(name), "General Helper");
	else if(PlayerInfo[playerid][pHelper] == 3) format(name, sizeof(name), "Senior Helper");
	else if(PlayerInfo[playerid][pHelper] == 4) format(name, sizeof(name), "Asst. Head Helper");
	else if(PlayerInfo[playerid][pHelper] == 5) format(name, sizeof(name), "Head Helper");
	return name;
}

stock IsPlayerLoggedIn(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pLoggedIn])
	    {
	        return 1;
	    }
	}
	return 0;
}

stock SendNearbyMessage(playerid, Float:radius, string[], col1, col2, col3, col4, col5)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	new Float:ix, Float:iy, Float:iz;
	new Float:cx, Float:cy, Float:cz;
	foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i))
	    {
	        if(GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
	        {
				GetPlayerPos(i, ix, iy, iz);
				cx = (x - ix);
				cy = (y - iy);
				cz = (z - iz);
				if(((cx < radius/16) && (cx > -radius/16)) && ((cy < radius/16) && (cy > -radius/16)) && ((cz < radius/16) && (cz > -radius/16)))
				{
				    SendClientMessage(i, col1, string);
				}
				else if(((cx < radius/8) && (cx > -radius/8)) && ((cy < radius/8) && (cy > -radius/8)) && ((cz < radius/8) && (cz > -radius/8)))
				{
				    SendClientMessage(i, col2, string);
				}
				else if(((cx < radius/4) && (cx > -radius/4)) && ((cy < radius/4) && (cy > -radius/4)) && ((cz < radius/4) && (cz > -radius/4)))
				{
				    SendClientMessage(i, col3, string);
				}
				else if(((cx < radius/2) && (cx > -radius/2)) && ((cy < radius/2) && (cy > -radius/2)) && ((cz < radius/2) && (cz > -radius/2)))
				{
				    SendClientMessage(i, col4, string);
				}
				else if(((cx < radius) && (cx > -radius)) && ((cy < radius) && (cy > -radius)) && ((cz < radius) && (cz > -radius)))
				{
				    SendClientMessage(i, col5, string);
				}
			}
	    }
	}
	return 1;
}

stock IsPlayerNearPlayer(playerid, targetid, Float:radius)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(targetid, x, y, z);
	if(IsPlayerInRangeOfPoint(playerid, radius ,x, y, z))
	{
	    return 1;
	}
	return 0;
}

stock IsPlayerNearVehicle(playerid, vehicleid, Float:radius)
{
	new Float:x, Float:y, Float:z;
	GetVehiclePos(vehicleid, x, y, z);
	if(IsPlayerInRangeOfPoint(playerid, radius ,x, y, z))
	{
	    return 1;
	}
	return 0;
}

stock ShowDialog(playerid, dialogid)
{
    new string[256];
	switch(dialogid)
	{
	    case 0: // Tutorial Dialog
		{
			ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Do you wish to see the tutorial?","It is highly recommended that you see the tutorial as it explains the script itself, no RP tests.", "Yes", "No");
		}
		case 1: // Register
		{
		    ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, "Register", "Welcome to zGaming RolePlay.\n\nPlease register your account by typing your desired password below.", "Register", "Quit");
		}
		case 2: // Login
		{
		    ShowPlayerDialog(playerid, 2, DIALOG_STYLE_PASSWORD, "Login","Welcome to zGaming RolePlay.\n\nThat name is registered. please enter your password below.", "Login", "Quit");
		}
		case 3: // Male/Female
		{
		    ShowPlayerDialog(playerid, 3, DIALOG_STYLE_LIST, "Choose your character's gender", "Male\nFemale", "Choose", "Cancel");
		}
		case 4: // Age
		{
		    ShowPlayerDialog(playerid, 4, DIALOG_STYLE_INPUT, "Character's age","Choose your character's age (25-80)", "Choose", "Cancel");
		}
		case 5: // SAPD Lockers
		{
		    ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "SAPD Lockers", "Duty\nArmory\nClothes", "Choose", "Cancel");
		}
		case 6: // SAPD Armory
		{
		    ShowPlayerDialog(playerid, 6, DIALOG_STYLE_LIST, "SAPD Lockers", "Nightstick ($50)\nMace ($100)\nDesert Eagle ($200)\nShotgun ($100)\nMP5 ($600)\nM4 ($1000)\nCombat Shotgun ($1500)\nSniper Rifle ($2500)\nPainkiller ($100)\nVest ($200)", "Choose", "Cancel");
		}
		case 7: // Clothes Dialog
		{
		    ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Clothes","Choose your clothes (( Skin ID ))", "Choose", "Cancel");
		}
		case 8: // Smartphone Browse 1
		{
		    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "Smartphone Web Browser > www.emp3world.com","Downloading a song costs $50\n\n1) Champaigne Showers - LMFAO      2) Club can't Handle Me - David Guetta", "Next", "Close");
		}
		case 9: // Mechanic
		{
		    ShowPlayerDialog(playerid, 9, DIALOG_STYLE_LIST, "Mechanic Tools", "Repair Vehicle\nAdd/Remove Nitros\nAdd/Remove Hydraulics", "Choose", "Cancel");
		}
		case 10: // Dealership Main
		{
		    ShowPlayerDialog(playerid, 10, DIALOG_STYLE_LIST, "Choose a category", "Bikes\nNormal Vehicles\nLowriders\nOff-Road Vehicles\nSport Vehicles", "Choose", "Cancel");
		}
        case 11: // Bikes
		{
		    ShowPlayerDialog(playerid, 11, DIALOG_STYLE_LIST, "Bikes", "BMX ($600)\nFaggio ($4,000)\nFreeway ($6,000)\nSanchez ($4,000)\nQuad ($6,000)\nPCJ-600 ($20,000)\nFCR-900 ($25,000)", "Choose", "Cancel");
		}
		case 12: // Normal Vehicles
		{
		    ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Normal Vehicles", "Comet ($30,000)\nFeltzer ($26,000)\nStallion ($26,000)\nWindsor ($28,000)\nSentinel ($24,000)\nManana ($22,000)", "Choose", "Cancel");
		}
		case 13: // Off-Road Vehicles
		{
		    ShowPlayerDialog(playerid, 13, DIALOG_STYLE_LIST, "Off-Road Vehicles", "Huntley ($22,000)\nLandstalker ($24,000)\nSandking ($30,000)", "Choose", "Cancel");
		}
		case 14: // Sport Vehicles
		{
		    ShowPlayerDialog(playerid, 14, DIALOG_STYLE_LIST, "Sport Vehicles", "Sultan ($60,000)\nBanshee ($65,000)\nBuffalo ($70,000)\nBullet ($90,000)\nCheetah ($80,000)\nJester ($70,000)\nTurismo ($110,000)", "Choose", "Cancel");
		}
		case 15: // Smartphone advertise
		{
		    ShowPlayerDialog(playerid, 15, DIALOG_STYLE_INPUT, "Smartphone","Type in the advertisement you wish to create", "Choose", "Cancel");
		}
		case 16: // VIP Dialog
		{
		    ShowPlayerDialog(playerid, 16, DIALOG_STYLE_LIST, "Choose a vehicle type", "VIP Color (Bronze VIP)\nVIP Tag Above Head (Silver VIP)\nTune Vehicle (Silver VIP)\nCreate Advertisement (Silver VIP)\nChange Skin (Gold VIP)\nChange Age (Gold VIP)\nChange Gender (Gold VIP)\nChange Name (Platinum VIP)", "Choose", "Cancel");
		}
		case 17: // Changing Skin
		{
		    ShowPlayerDialog(playerid, 17, DIALOG_STYLE_INPUT, "VIP Skin Change","Choose a skin between 0 and 299", "Choose", "Cancel");
		}
		case 18: // Change name
		{
		    ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "VIP Name Change","Type in your new name (Admins will approve/disapprove ASAP)", "Submit", "Cancel");
		}
		case 19: // Weapons Shop
		{
			ShowPlayerDialog(playerid, 19, DIALOG_STYLE_LIST, "VIP Weapons Shop", "Knife ($10000)\n5 Grenades ($20000)\n5 Molotov Cocktails ($20000)", "Choose", "Cancel");
		}
		case 20: // VIP advertise
		{
		    ShowPlayerDialog(playerid, 20, DIALOG_STYLE_INPUT, "VIP Advertisement","Type in the advertisement you wish to create", "Choose", "Cancel");
		}
		case 21: // Lowriders
		{
		    ShowPlayerDialog(playerid, 21, DIALOG_STYLE_LIST, "Lowriders", "Blade($25,000)\nBroadway ($35,000)\nRemington ($30,000)\nSavanna ($25,000)\nSlamvan ($27,000)\nTornado ($24,000)\nVoodo ($30,000)", "Choose", "Cancel");
		}
		case 22: // Fighting Styles
		{
		    ShowPlayerDialog(playerid, 22, DIALOG_STYLE_LIST, "Choose a style", "Normal ($3,000)\nBoxing ($3,000)\nKung-Fu ($3,000)\nKnee-Head ($3,000)\nGrab-Kick ($3,000)\nElbow ($3,000)", "Choose", "Cancel");
		}
		case 23: // Toys
		{
			// 1 Glasses, 2 watches, 3 bandana, 4 hats

		    format(string, sizeof(string), "Slot 0 (%s)\nSlot 1 (%s)\nSlot 2 (%s)\nSlot 3 (%s)\nSlot 4 (%s)\nSlot 5 (%s)\nSlot 6 (%s)\nSlot 7 (%s)\nSlot 8 (%s)\nSlot 9 (%s)", RPTN(playerid, 0), RPTN(playerid, 1), RPTN(playerid, 2), RPTN(playerid, 3), RPTN(playerid, 4), RPTN(playerid, 5), RPTN(playerid, 6), RPTN(playerid, 7), RPTN(playerid, 8), RPTN(playerid, 9));
			ShowPlayerDialog(playerid, 23, DIALOG_STYLE_LIST, "Your toys", string, "Choose", "Cancel");
		}
		case 24: // Toy Add/Remove/Edit
		{
		    new info[16], type[16];
		    if(!IsPlayerAttachedObjectSlotUsed(playerid, toyslot[playerid])) format(info, sizeof(info), "Show Toy");
		    else format(info, sizeof(info), "Hide Toy");
		    format(string, sizeof(string), "%s\nEdit Toy", info);
		    format(type, sizeof(type), "Toy Slot %d", toyslot[playerid]);
		    ShowPlayerDialog(playerid, 24, DIALOG_STYLE_LIST, type, string, "Choose", "Back");
		}
		case 25: // Toy adding bones
		{
	    	 /*
             1) Spine | 2) Head | 3) Left upper arm | 4) Right upper arm | 5) Left hand | 6) Right hand | 7) Left thigh
			 8) Right thigh | 9) Left foot | 10) Right foot | 11) Right calf | 12) Left calf | 13) Left forearm
			 14) Right forearm | 15) Left clavicle | 16) Right clavicle | 17) Neck | 18) Jaw
			*/
		    ShowPlayerDialog(playerid, 25, DIALOG_STYLE_LIST, "Choose a bone", "Spine\nHead\nLeft upper arm\nRight upper arm\nLeft hand\nRight hand\nLeft thigh\nRight thigh\nLeft foot\nRight foot\nRight calf\nLeft calf\nLeft forearmRight forearm\nLeft clavicle\nRight clavicle\nNeck\nJaw", "Choose", "Back");
		}
		case 26: // Loyal Points
		{
		    format(string, sizeof(string), "You have %d loyalty points.", PlayerInfo[playerid][pLPoints]);
		    ShowPlayerDialog(playerid, 26, DIALOG_STYLE_LIST, string, "Refill Everybody's Health (2 Points)\nRepair All Vehicles (4 Points)\nRefill All Vehicles (6 Points)", "Confirm", "Cancel");
		}
		case 27: // NA Lockers
		{
		    ShowPlayerDialog(playerid, 27, DIALOG_STYLE_LIST, "NA Lockers", "Camera\nClothes", "Choose", "Cancel");
		}
	}
	return 1;
}

stock GiveZaiatMoney(playerid, amount)
{
	new string[128];
	if(amount < 0) format(string, sizeof(string), "~r~-$%d", amount*-1);
	else if(amount > 0) format(string, sizeof(string), "~g~+$%d", amount);
	GameTextForPlayer(playerid, string, 3000, 1);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	PlayerInfo[playerid][pMoney] += amount;
	return 1;
}

stock SetZaiatMoney(playerid, amount)
{
    PlayerInfo[playerid][pMoney] = amount;
	return 1;
}

stock split(const strsrc[], strdest[][], delimiter)
{
    new i, li;
    new aNum;
    new len;
    while(i <= strlen(strsrc))
    {
        if(strsrc[i] == delimiter || i == strlen(strsrc))
        {
            len = strmid(strdest[aNum], strsrc, li, i, 128);
            strdest[aNum][len] = 0;
            li = i+1;
            aNum++;
        }
        i++;
    }
    return 1;
}
stock SendPlayerFamMessage(playerid, color, string[])
{
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i) && PlayerInfo[i][pFam] == PlayerInfo[playerid][pFam])
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}

stock SendCopMessage(color, string[])
{
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i) && PlayerInfo[i][pFac] == 1)
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock SendHitmanMessage(color, string[])
{
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i) && PlayerInfo[i][pFac] == 3)
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock SendTesterMessage(color, string[])
{
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i) && PlayerInfo[i][pTester])
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock SendAdminMessage(color, admlvl, string[])
{
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i) && PlayerInfo[i][pAdmin] >= admlvl)
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock SendVIPMessage(color, string[])
{
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i) && PlayerInfo[i][pVIP] && !VIPOff[i])
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}

stock SendHelperMessage(color, admlvl, string[])
{
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i) && PlayerInfo[i][pHelper] >= admlvl)
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}

stock SendPlayerFactionMessage(playerid, rank, color, string[])
{
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i) && PlayerInfo[i][pFac] == PlayerInfo[playerid][pFac] && PlayerInfo[i][pFacRank] >= rank)
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}

stock Log(sz_fileName[], sz_input[]) {

	new	sz_logEntry[156], i_dateTime[2][3], File: fileHandle = fopen(sz_fileName, io_append);
	gettime(i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2]);
	getdate(i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2]);
	format(sz_logEntry, sizeof(sz_logEntry), "[%i/%i/%i - %i:%i:%i] %s\r\n", i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2], i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2], sz_input);
	fwrite(fileHandle, sz_logEntry);
	return fclose(fileHandle);
}

stock AddBan(playerid)
{
 	new string[24];
	new File:ban = fopen("ban.cfg", io_append);
	format(string, sizeof(string), "%s\r\n", RPIP(playerid));
	fwrite(ban, string);
	fclose(ban);
}

stock AddRangeBan(IP[])
{
 	new string[24];
	new File:ban = fopen("ban.cfg", io_append);
	format(string, sizeof(string), "%s\r\n", IP);
	fwrite(ban, string);
	fclose(ban);
}

stock CheckBan(ip[])
{
	new string[20];
    new File: file = fopen("ban.cfg", io_read);
	while(fread(file, string))
	{
	    if (strcmp(ip, string, true, strlen(ip)) == 0)
	    {
	        fclose(file);
	        return 1;
	    }
	}
	fclose(file);
	return 0;
}



fdeleteline(filename[], line)
{
  new count, string[256], File:file, File:temp;

  file= fopen(filename, io_read);
  temp = fopen("tmpfile.tmp", io_write);

  while (fread(file, string))
    if (++count != line)
      fwrite(temp, string);

  fclose(file);
  fclose(temp);

  file= fopen(filename, io_write);
  temp = fopen("tmpfile.tmp", io_read);

  while (fread(temp, string))
    fwrite(file, string);

  fclose(file);
  fclose(temp);
  fremove("tmpfile.tmp");
}

stock IsValidIP(ip[])
{
    new a;
	for (new i = 0; i < strlen(ip); i++)
	{
		if (ip[i] == '.')
		{
		    a++;
		}
	}
	if (a != 3)
	{
	    return 1;
	}
	return 0;
}

stock SpawnChar(playerid)
{
    if(IsPlayerLoggedIn(playerid))
	{
	    // Legit Loyalty
	    if(!PlayerInfo[playerid][pLoyal] && PlayerInfo[playerid][pHours] < 24) {PlayerInfo[playerid][pLoyal] = 1;}
	    // Safe Admin
		if(PlayerInfo[playerid][pAdmin] && !PlayerInfo[playerid][pSafeAdmin] && !aDuty[playerid])
		{
		    new string[128];
		    format(string, sizeof(string), "%s (%s) has been flagged as an unsafe admin.", RPN(playerid), RPIP(playerid));
		    Log("logs/safeadmin.log", string);
		    Kick(playerid);
		}
	    // Tutorial
	    if(!PlayerInfo[playerid][pTutorial])
	    {
	        SetZaiatMoney(playerid, 0);
            GiveZaiatMoney(playerid, 3000);
            SetPlayerPos(playerid, 1499.8129,1308.9163,1093.2891);
	        SetPlayerFacingAngle(playerid, 93.3274);
	        SetCameraBehindPlayer(playerid);
	        SetPlayerInterior(playerid, 3);
	        SetPlayerVirtualWorld(playerid, 98489165189612);
            ShowDialog(playerid, 0);
	        return 1;
	    }
	    TogglePlayerControllable(playerid, 1);
	    // Family Strikes
	    if(PlayerInfo[playerid][pFam])
	    {
	        new idx = PlayerInfo[playerid][pFam];
			if(FamInfo[idx][fStrikes] >= 3)
			{
			    PlayerInfo[playerid][pFam] = 0;
				PlayerInfo[playerid][pFamRank] = 0;
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Your family has been disbanded due to having 3 strikes, you have been autokicked from the family.");
			}
	    }
	    // Website
	    TextDrawShowForPlayer(playerid, WebTD);
	    // Time
	    TextDrawShowForPlayer(playerid, TimeTD);
	    // Name Color & Level & Wanted Level
		SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
	    SetPlayerColor(playerid, TRANSPARENT_WHITE);
	    SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWanted]);
	    // Download bar
		Download[playerid] = CreateProgressBar(499.00, 103.00, 107.50, 3.20, -16776961, 100.0);
		SetProgressBarMaxValue(Download[playerid], 100);
		SetProgressBarColor(Download[playerid], COLOR_GREEN);
		// Custom Int
		if(PlayerInfo[playerid][pSpawnFreeze])
		{
		    SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
		}
	    // Business, House and Gates Checking
	    if(PlayerInfo[playerid][pBiz] != 0 && strcmp(RPNU(playerid), BizInfo[PlayerInfo[playerid][pBiz]][bOwner]) || PlayerInfo[playerid][pBiz] != 0 && !strlen(BizInfo[PlayerInfo[playerid][pBiz]][bOwner]))
	    {
			PlayerInfo[playerid][pBiz] = 0;
			SendClientMessage(playerid, COLOR_WHITE, " An administrator has sold your business while you were offline.");
	    }
	    if(PlayerInfo[playerid][pHouse] != 0 && strcmp(RPNU(playerid),  HouseInfo[PlayerInfo[playerid][pHouse]][hOwner]) || PlayerInfo[playerid][pHouse] != 0 && !strlen(HouseInfo[PlayerInfo[playerid][pHouse]][hOwner]))
	    {
			PlayerInfo[playerid][pHouse] = 0;
			SendClientMessage(playerid, COLOR_WHITE, " An administrator has sold your house while you were offline.");
	    }
	    new idx; idx = PlayerInfo[playerid][pGate][0]; // Gate slot 1
	    if(idx && !GateInfo[idx][gModel])
	    {
	        PlayerInfo[playerid][pGate][0] = 0;
	        SendClientMessage(playerid, COLOR_WHITE, " An administrator has deleted your gate in slot 1 while you were offline.");
	    }
	    idx = PlayerInfo[playerid][pGate][1]; // Gate slot 2
	    if(idx && !GateInfo[idx][gModel])
	    {
	        PlayerInfo[playerid][pGate][1] = 0;
	        SendClientMessage(playerid, COLOR_WHITE, " An administrator has deleted your gate in slot 2 while you were offline.");
	    }
	    idx = PlayerInfo[playerid][pGate][2]; // Gate slot 3
	    if(idx && !GateInfo[idx][gModel])
	    {
	        PlayerInfo[playerid][pGate][2] = 0;
	        SendClientMessage(playerid, COLOR_WHITE, " An administrator has deleted your gate in slot 3 while you were offline.");
	    }
	    // Spawning
	    if(PlayerInfo[playerid][pX] == 0 && PlayerInfo[playerid][pY] == 0 && PlayerInfo[playerid][pZ] == 0)
	    {
	        SetPlayerPos(playerid, 1499.8129,1308.9163,1093.2891);
	        SetPlayerFacingAngle(playerid, 93.3274);
	        SetCameraBehindPlayer(playerid);
	        SetPlayerInterior(playerid, 3);
	        SetPlayerVirtualWorld(playerid, 0);
	        SendClientMessage(playerid, COLOR_RED, "If you wish to have a stats refund, please visit www.zGaming.org and fill your request there.");
	    }
	    else
	    {
		    SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pVW]);
		    SetPlayerInterior(playerid, PlayerInfo[playerid][pInt]);
		    SetCameraBehindPlayer(playerid);
		    SetPlayerPos(playerid, PlayerInfo[playerid][pX], PlayerInfo[playerid][pY], PlayerInfo[playerid][pZ]);
		    // HP and Armor
			if(PlayerInfo[playerid][pHealth] <= 0) PlayerInfo[playerid][pHealth] = 1;
			SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
			SetPlayerArmour(playerid, PlayerInfo[playerid][pArmor]);
	    }
	    // Skin
	    SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
	    // Guns
		for(new i = 0; i < 13; i++)
		{
		    if(PlayerInfo[playerid][pWeapon][i]) GiveZaiatWeapon(playerid, PlayerInfo[playerid][pWeapon][i], PlayerInfo[playerid][pWeaponAmmo][i]);
		}
		// Hospital
		if(!PlayerInfo[playerid][pPrison])
		{
			if(PlayerInfo[playerid][pHospital])
			{
				Hospital[playerid] = random(2);
				if(Hospital[playerid] == 0) // AllSaints
				{

				    SetPlayerPos(playerid, 1177.5485,-1323.5773,11.0761);
				    SetPlayerCameraPos(playerid,1223.2250,-1289.4913,31.9257);
				    SetPlayerCameraLookAt(playerid,1177.5485,-1323.5773,14.0761);
				}
				else if(Hospital[playerid] == 1) // County General
				{
				    SetPlayerPos(playerid, 2034.0833,-1404.6536,14.2539);
				    SetPlayerCameraPos(playerid,1997.1254,-1457.8685,34.8850);
				    SetPlayerCameraLookAt(playerid,2034.0833,-1404.6536,17.2539);
				}
				ResetZaiatWeapons(playerid);
				PlayerInfo[playerid][pFacDuty] = 0;
				SetPlayerInterior(playerid, 0);
			 	SetPlayerVirtualWorld(playerid, 0);
			    TogglePlayerControllable(playerid, 0);
				HospitalTime[playerid] = 30;
				if(PlayerInfo[playerid][pVIP] >= 2) HospitalTime[playerid] = 1;
				HospitalCountDown[playerid] = SetTimerEx("HospitalTimer", 1000, false, "d", playerid);
			}
		}
		// SAPD Duty
        if(PlayerInfo[playerid][pFacDuty] && PlayerInfo[playerid][pFac] == 1)
        {
	    	SetPlayerColor(playerid, TRANSPARENT_BLUE);
		}
		// SAPD-Prison
		if(PlayerInfo[playerid][pPrison] == 1)
		{
		    ResetZaiatWeapons(playerid);
		    SetPlayerColor(playerid, TRANSPARENT_PURPLE);
			SetPlayerInterior(playerid, 1);
			new RandomCell = random(sizeof(RandomPrison));
			SetPlayerFacingAngle(playerid, RandomPrison[RandomCell][3]);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
			SetPlayerPos(playerid, RandomPrison[RandomCell][0], RandomPrison[RandomCell][1], RandomPrison[RandomCell][2]);
			SetCameraBehindPlayer(playerid);
		}
		// Admin-Prison
		if(PlayerInfo[playerid][pPrison] == 2)
		{
			ResetZaiatWeapons(playerid);
		    SetPlayerColor(playerid, TRANSPARENT_ORANGE);
			SetPlayerInterior(playerid, 2);
			SetPlayerVirtualWorld(playerid, 1);
			new RandomCell = random(sizeof(RandomPrison));
			SetPlayerFacingAngle(playerid, RandomPrison[RandomCell][3]);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
			SetPlayerPos(playerid, RandomPrison[RandomCell][0], RandomPrison[RandomCell][1], RandomPrison[RandomCell][2]);
			SetCameraBehindPlayer(playerid);
		}
		// Bank Robbery
		if(PlayerInfo[playerid][pFac] == 1 && RobberyStarted)
	    {
	        TextDrawShowForPlayer(playerid, Textdraw0);
			TextDrawShowForPlayer(playerid, Textdraw1);
	    	if(BankRobbersCount == 2) {TextDrawShowForPlayer(playerid, Textdraw2);}
			else if(BankRobbersCount == 3) {TextDrawShowForPlayer(playerid, Textdraw3);}
			else if(BankRobbersCount == 4) {TextDrawShowForPlayer(playerid, Textdraw4);}
			else if(BankRobbersCount == 5) {TextDrawShowForPlayer(playerid, Textdraw5);}
	    }
	}
	return 1;
}

stock fcreate(filename[])
{
	if (fexist(filename)) return false;
	new File:fhnd;
	fhnd=fopen(filename,io_write);
	if (fhnd) {
		fclose(fhnd);
		return true;
	}
	return false;
}

stock IsAReporter(playerid)
{
	if(PlayerInfo[playerid][pFac] == 4) return 1;
	return 0;
}

stock IsACop(playerid)
{
	if(PlayerInfo[playerid][pFac] == 1) return 1;
	return 0;
}

stock IsAGov(playerid)
{
	if(PlayerInfo[playerid][pFac] == 2) return 1;
	return 0;
}

stock IsAHitman(playerid)
{
	if(PlayerInfo[playerid][pFac] == 3) return 1;
	return 0;
}

stock RemoveZaiatWeapon(playerid, weaponid)
{
    GunsBeingRemoved[playerid] = 1;
    ResetPlayerWeapons(playerid);
    GunsBeingRemoved[playerid] = 1;
    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	for(new w = 0; w < 13; w++)
	{
	    GetPlayerWeaponData(playerid, w, TempGuns[w], TempGunsAmmo[w]);
	    if(PlayerInfo[playerid][pWeapon][w] == weaponid)
		{
			PlayerInfo[playerid][pWeapon][w] = 0;
			TempGuns[w] = 0;
			TempGunsAmmo[w] = 0;
		}
	    PlayerInfo[playerid][pWeapon][w] = 0;
	}
	for(new w = 0; w < 13; w++)
	{
	    GiveZaiatWeapon(playerid, TempGuns[w], TempGunsAmmo[w]);
	}
	return 1;
}

stock SaveZaiatAmmo(playerid)
{
	for(new i = 0; i < 13; i++)
	{
	    new Guns[2][13];
	    GetPlayerWeaponData(playerid, i, Guns[0][i], Guns[1][i]);
		if(PlayerInfo[playerid][pWeapon][i] == Guns[0][i])
		{
		    PlayerInfo[playerid][pWeaponAmmo][i] = Guns[1][i];
		}
	}
	return 1;
}

stock ResetZaiatWeapons(playerid)
{
    GunsBeingRemoved[playerid] = 1;
    ResetPlayerWeapons(playerid);
    GunsBeingRemoved[playerid] = 1;
    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	for(new i = 0; i < 13; i++)
	{
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][i] = 0;
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeaponAmmo][i] = 0;
	    GunsBeingRemoved[playerid] = 1;
	}
	GunsBeingRemoved[playerid] = 1;
	return 1;
}

stock GiveZaiatWeapon(playerid, weaponid, ammo)
{
	GunsBeingRemoved[playerid] = 1;
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	if(weaponid == 0 || weaponid == 1)
	{ // Slot 0
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][0] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 2 || weaponid == 3 || weaponid == 4 || weaponid == 5 || weaponid == 6 || weaponid == 7 || weaponid == 8 || weaponid == 9)
	{ // Slot 1
		GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][1] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 22 || weaponid == 23 || weaponid == 24)
	{ // Slot 2
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][2] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 25 || weaponid == 26 || weaponid == 27)
	{ // Slot 3
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][3] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 28 || weaponid == 29 || weaponid == 32)
	{ // Slot 4
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][4] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 30 || weaponid == 31)
	{ // Slot 5
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][5] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 33 || weaponid == 34)
	{ // Slot 6
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][6] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 35 || weaponid == 36 || weaponid == 37 || weaponid == 38)
	{ // Slot 7
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][7] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 16 || weaponid == 17 || weaponid == 18 || weaponid == 39)
	{ // Slot 8
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][8] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 41 || weaponid == 42 || weaponid == 43)
	{ // Slot 9
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][9] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 10 || weaponid == 11 || weaponid == 12 || weaponid == 13 || weaponid == 14 || weaponid == 15)
	{ // Slot 10
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][10] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 44 || weaponid == 45 || weaponid == 46)
	{ // Slot 11
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][11] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 40)
	{ // Slot 12
	    GunsBeingRemoved[playerid] = 1;
	    PlayerInfo[playerid][pWeapon][12] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	GivePlayerWeapon(playerid, weaponid, ammo);
	return 1;
}

stock RPFN(playerid)
{
	new facname[32];
	if(PlayerInfo[playerid][pFac] == 0) format(facname, sizeof(facname), "CIV");
	else if(PlayerInfo[playerid][pFac] == 1) format(facname, sizeof(facname), "SAPD");
	else if(PlayerInfo[playerid][pFac] == 2) format(facname, sizeof(facname), "GOV");
	else if(PlayerInfo[playerid][pFac] == 3) format(facname, sizeof(facname), "HA");
	else if(PlayerInfo[playerid][pFac] == 4) format(facname, sizeof(facname), "News");
	return facname;
}

stock RPFNEx(playerid)
{
	new facname[32];
	if(PlayerInfo[playerid][pFac] == 0) format(facname, sizeof(facname), "Civilian");
	else if(PlayerInfo[playerid][pFac] == 1) format(facname, sizeof(facname), "San Andreas Police Department");
	else if(PlayerInfo[playerid][pFac] == 2) format(facname, sizeof(facname), "Government");
	else if(PlayerInfo[playerid][pFac] == 3) format(facname, sizeof(facname), "Hitman Agency");
	else if(PlayerInfo[playerid][pFac] == 4) format(facname, sizeof(facname), "News Agency");
	return facname;
}

stock RPFaRN(playerid)
{
	new rankname[32];
	if(PlayerInfo[playerid][pFamRank] == 0 && PlayerInfo[playerid][pFam] == 0) format(rankname, sizeof(rankname), "None");
	else if(PlayerInfo[playerid][pFam])
	{
		if(PlayerInfo[playerid][pFamRank] == 1) format(rankname, sizeof(rankname), "%s", FamInfo[PlayerInfo[playerid][pFam]][fRank1]);
		else if(PlayerInfo[playerid][pFamRank] == 2) format(rankname, sizeof(rankname), "%s", FamInfo[PlayerInfo[playerid][pFam]][fRank2]);
		else if(PlayerInfo[playerid][pFamRank] == 3) format(rankname, sizeof(rankname), "%s", FamInfo[PlayerInfo[playerid][pFam]][fRank3]);
		else if(PlayerInfo[playerid][pFamRank] == 4) format(rankname, sizeof(rankname), "%s", FamInfo[PlayerInfo[playerid][pFam]][fRank4]);
		else if(PlayerInfo[playerid][pFamRank] == 5) format(rankname, sizeof(rankname), "%s", FamInfo[PlayerInfo[playerid][pFam]][fRank5]);
		else if(PlayerInfo[playerid][pFamRank] == 6) format(rankname, sizeof(rankname), "%s", FamInfo[PlayerInfo[playerid][pFam]][fRank6]);
	}
	return rankname;
}

stock RPFaN(playerid)
{
    new famname[32];
    if(!PlayerInfo[playerid][pFam]) format(famname, sizeof(famname), "None");
    else format(famname, sizeof(famname), "%s", FamInfo[PlayerInfo[playerid][pFam]][fName]);
    return famname;
}

stock RFaN(idx)
{
    new famname[32];
    if(!idx) format(famname, sizeof(famname), "None");
    else format(famname, sizeof(famname), "%s", FamInfo[idx][fName]);
    return famname;
}

stock RPFRN(playerid)
{
	new rankname[32];
	if(PlayerInfo[playerid][pFacRank] == 0 && PlayerInfo[playerid][pFac] == 0) format(rankname, sizeof(rankname), "Civilian");
	else if(PlayerInfo[playerid][pFac])
	{
		if(PlayerInfo[playerid][pFacRank] == 0) format(rankname, sizeof(rankname), "%s", FacInfo[PlayerInfo[playerid][pFac]][fRank0]);
		else if(PlayerInfo[playerid][pFacRank] == 1) format(rankname, sizeof(rankname), "%s", FacInfo[PlayerInfo[playerid][pFac]][fRank1]);
		else if(PlayerInfo[playerid][pFacRank] == 2) format(rankname, sizeof(rankname), "%s", FacInfo[PlayerInfo[playerid][pFac]][fRank2]);
		else if(PlayerInfo[playerid][pFacRank] == 3) format(rankname, sizeof(rankname), "%s", FacInfo[PlayerInfo[playerid][pFac]][fRank3]);
		else if(PlayerInfo[playerid][pFacRank] == 4) format(rankname, sizeof(rankname), "%s", FacInfo[PlayerInfo[playerid][pFac]][fRank4]);
		else if(PlayerInfo[playerid][pFacRank] == 5) format(rankname, sizeof(rankname), "%s", FacInfo[PlayerInfo[playerid][pFac]][fRank5]);
		else if(PlayerInfo[playerid][pFacRank] == 6) format(rankname, sizeof(rankname), "%s", FacInfo[PlayerInfo[playerid][pFac]][fRank6]);
	}
	return rankname;
}

stock RPFL(playerid)
{
	new leader[4];
	if(PlayerInfo[playerid][pFacLeader] == 0) format(leader, sizeof(leader), "No");
	else if(PlayerInfo[playerid][pFacLeader] == 1) format(leader, sizeof(leader), "Yes");
	return leader;
}

stock RPFDN(playerid)
{
	new divname[8];
	if(PlayerInfo[playerid][pFac] == 1)
	{
		if(PlayerInfo[playerid][pFacDiv] == 1) format(divname, sizeof(divname), "%s", FacInfo[1][fDiv1]);
		else if(PlayerInfo[playerid][pFacDiv] == 2) format(divname, sizeof(divname), "%s", FacInfo[1][fDiv2]);
		else if(PlayerInfo[playerid][pFacDiv] == 3) format(divname, sizeof(divname), "%s", FacInfo[1][fDiv3]);
		else if(PlayerInfo[playerid][pFacDiv] == 4) format(divname, sizeof(divname), "%s", FacInfo[1][fDiv4]);
	}
	if(PlayerInfo[playerid][pFacDiv] == 0) format(divname, sizeof(divname), "None");
	return divname;
}



stock RPFDL(playerid)
{
	new leader[4];
	if(PlayerInfo[playerid][pFacDivLeader] == 0) format(leader, sizeof(leader), "No");
	else format(leader, sizeof(leader), "Yes");
	return leader;
}


stock IsHoldingFirearm(playerid)
{
	if(GetPlayerWeapon(playerid) < 16) return 0;
	if(GetPlayerWeapon(playerid) > 40) return 0;
	return 1;
}



stock TogglePlayerTazed(playerid, status)
{
	Tazed[playerid] = status;
	return 1;
}
stock IsPlayerTazed(playerid)
{
	if(!Tazed[playerid]) return 0;
	if(Tazed[playerid]) return 1;
	return 1;
}

stock TogglePlayerTied(playerid, status)
{
	Tied[playerid] = status;
	return 1;
}
stock IsPlayerTied(playerid)
{
	if(!Tied[playerid]) return 0;
	if(Tied[playerid]) return 1;
	return 1;
}

stock TogglePlayerCuffed(playerid, status)
{
	Cuffed[playerid] = status;
	return 1;
}
stock IsPlayerCuffed(playerid)
{
	if(!Cuffed[playerid]) return 0;
	if(Cuffed[playerid]) return 1;
	return 1;
}

// TIMERS
forward LoyalFeatures();
public LoyalFeatures()
{
	if(LHealth) LHealth --;
	if(LFix) LFix --;
	if(LRefill) LRefill --;
	return 1;
}

forward FishingTime(playerid);
public FishingTime(playerid)
{
    FishTime[playerid] --;
    if(FishTime[playerid] < 0)
    {
        FishTime[playerid] = 0;
    }
	if(FishTime[playerid] > 0)
	{
		SetTimerEx("FishingTime", 1000, false, "i", playerid);
	}

	return 1;
}

forward BankVaultTimer();
public BankVaultTimer()
{
	CreateExplosion(2242.0234,1632.7185,961.7531, 11, 5);
	DestroyDynamicObject(BankC4);
	MoveDynamicObject(BankVault, 2241.946044, 1629.377319, 960.893493, 100, 89.799987, -18.700002, 10.300001);
	SendRobberyMessage(COLOR_LIGHTRED, "** The bank vault has been exploded, money will be loaded in 5 minutes **");
	SendRobberyMessage(COLOR_LIGHTRED, "** If you exit the bank before the money is loaded you will fail the robbery **");
	SendRobberyMessage(COLOR_LIGHTRED, "** You will be informed when the money is fully loaded and ready to be delivered **");
	SendCopMessage(COLOR_BLUE, "LS Bank: Robbers have loaded money and are on their way out of the bank, stop them!");
	SetTimer("BankVaultLoaded", 300000, false);
	return 1;
}

forward BankVaultLoaded();
public BankVaultLoaded()
{
    SendRobberyMessage(COLOR_LIGHTRED, "** The money is loaded successfully, go and deliver it to the checkpoint **");
	foreach(Player, playerid)
	{
	    if(BankRobber[playerid])
	    {
	        DeliverMoney[playerid] = 1;
	        SetPlayerCheckpoint(playerid, -2227.4868,2327.0056,7.5469, 10);
	    }
	}
	BankBlock = 0;
	MoveDynamicObject(BankVault, 2242.202148, 1631.861694, 961.833129, 100, 0.000000, 0.000000, 9.799999);
	return 1;
}
forward FalseBanFix(playerid);
public FalseBanFix(playerid)
{
    FalseBan[playerid] = 1;
	return 1;
}

forward RefillTimer(playerid);
public RefillTimer(playerid)
{
    new engine, lights, alarm, doors, bonnet, boot, objective, string[128];
	GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER || engine)
	{
	    GiveZaiatMoney(playerid, -(Refill[playerid]*2));
	    format(string, sizeof(string), "* %s has stopped refilling their vehicle.", RPN(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    format(string, sizeof(string), " You have refilled your vehicle for $%d.", (Refill[playerid]*2));
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    if(PointInfo[5][pOwner])
	    {
			new idx = PointInfo[5][pOwner];
			FamInfo[idx][fMoney] += Refill[playerid]*2;
			PointInfo[5][pProfit] += Refill[playerid]*2;
	    }
	    Refill[playerid] = 0;
	    return 1;
	}
	new veh = GetPlayerVehicleID(playerid);
	Refill[playerid] ++;
	Fuel[veh] ++;
	if(Fuel[veh] >= 100 || PlayerInfo[playerid][pMoney]-2 <= (Refill[playerid]*2))
	{
	    GiveZaiatMoney(playerid, -(Refill[playerid]*2));
	    format(string, sizeof(string), "* %s has stopped refilling their vehicle.", RPN(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    format(string, sizeof(string), " You have refilled your vehicle for $%d.", (Refill[playerid]*2));
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    	if(PointInfo[5][pOwner])
	    {
			new idx = PointInfo[5][pOwner];
			FamInfo[idx][fMoney] += Refill[playerid]*2;
			PointInfo[5][pProfit] += Refill[playerid]*2;
	    }
	    Refill[playerid] = 0;
	    return 1;
	}
	if(Fuel[veh] < 100)
	{
	    SetTimerEx("RefillTimer", 1000, false, "i", playerid);
	}
	return 1;
}

forward FuelTimer();
public FuelTimer()
{
	for(new vehid=0; vehid < MAX_VEHICLES; vehid++)
	{
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehid, engine, lights, alarm, doors, bonnet, boot, objective);
		if(engine && Fuel[vehid])
		{
		    FuelVar[vehid] ++;
		    if(GetVehicleSpeed(vehid, 0) != 0 && FuelVar[vehid] >= 72/2)
		    {
		        FuelVar[vehid] = 0;
				Fuel[vehid] --;
			}
			else if(GetVehicleSpeed(vehid, 0) == 0 && FuelVar[vehid] >= 108/2)
		    {
		        FuelVar[vehid] = 0;
				Fuel[vehid] --;
			}
		}
	}
	return 1;
}

new BusTime[MAX_PLAYERS];
forward BusTimer(playerid);
public BusTimer(playerid)
{
	new string[128];
	if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER && GetPlayerVehicleID(playerid) == NPCBus)
	{
	    BusTime[playerid]++;
	    if(!GetVehicleSpeed(NPCBus, 0) && BusTime[playerid] > 15)
	    {
	        BusTime[playerid] = 0;
	        GiveZaiatMoney(playerid, -2);
	        format(string, sizeof(string), "* %s takes out $2 and hands them to the bus driver.", RPN(playerid));
 			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    }
	    SetTimerEx("BusTimer", 1000, false, "i", playerid);
	}
	else
	{
		BusTime[playerid] = 0;
	}
	return 1;
}

forward AltTabTimer();
public AltTabTimer()
{
    foreach(Player, i)
    {
        if(IsPlayerLoggedIn(i))
		{
		    // AFK Detection
			GetPlayerPos(i, NewPos[i][0], NewPos[i][1], NewPos[i][2]);
			if(IsPlayerInRangeOfPoint(i, 3, OldPos[i][0], OldPos[i][1], OldPos[i][2])) {AFK[i] ++;} else {AFK[i] = 0;}
			GetPlayerPos(i, OldPos[i][0], OldPos[i][1], OldPos[i][2]);
			if(AFK[i] >= 600)
			{
			    if(!IsAFK[i])
			    {
					IsAFK[i] = 1;
					SendClientMessage(i, COLOR_LIGHTBLUE, " You have been standing in the same area for 10 minutes, you have been marked as AFK.");
                    /*AFKText[i] = Create3DTextLabel("AFK", COLOR_CYAN, 0, 0, -20, 25, -1, 1);
			    	Attach3DTextLabelToPlayer(AFKText[i], i, 0, 0, 0.35);*/
			    	AFKText[i] = CreateDynamic3DTextLabel("AFK", COLOR_CYAN, 0, 0, -20, 25, i);
			    	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL,AFKText[i] , E_STREAMER_ATTACH_OFFSET_Z, 0.35);
				}
			}
			else if(AFK[i] == 0)
			{
				if(IsAFK[i])
				{
					IsAFK[i] = 0;
					SendClientMessage(i, COLOR_LIGHTBLUE, " You have moved from your AFK area, you are not marked as AFK anymore.");
                    //Delete3DTextLabel(AFKText[i]);
                    if(IsValidDynamic3DTextLabel(AFKText[i])) DestroyDynamic3DTextLabel(AFKText[i]);
				}
			}
		    // Alt-Tab Detection
		    AltTabbed[i] ++;
		    if(AltTabbed[i] < 2)
			{
				if(HasText[i])
				{
				    HasText[i] = 0;
					//Delete3DTextLabel(AltTabText[i]);
					if(IsValidDynamic3DTextLabel(AltTabText[i])) DestroyDynamic3DTextLabel(AltTabText[i]);
				}
			}
		    if(AltTabbed[i] > 2) {Tabbed[i] = 1;}
		    else Tabbed[i] = 0;
			if(Tabbed[i])
			{
			    if(!HasText[i])
			    {
			    	HasText[i] = 1;
			    	/*AltTabText[i] = Create3DTextLabel("Alt Tabbed", COLOR_RED, 0, 0, -20, 25, -1, 1);
			    	Attach3DTextLabelToPlayer(AltTabText[i], i, 0, 0, 0.3);*/
			    	AltTabText[i] = CreateDynamic3DTextLabel("Alt Tabbed", COLOR_RED, 0, 0, -20, 25, i);
			    	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, AltTabText[i] , E_STREAMER_ATTACH_OFFSET_Z, 0.25);
			    }
				if(Event[i])
				{
				    new string[128];
					format(string, sizeof(string), "AdmWarn: %s is alt-tabbed inside the event.", RPN(i));
				    SendAdminMessage(COLOR_DARKRED, 1, string);
			    }
			}
		}
	}
	return 1;
}
forward AntiTPHacks(playerid);
public AntiTPHacks(playerid)
{
	AntiTP[playerid] = 0;
	return 1;
}
forward CapturePoint(playerid, idx);
public CapturePoint(playerid, idx)
{
	new Float:Cap[3], string[128];
	GetPlayerPos(playerid, Cap[0], Cap[1], Cap[2]);
	if(Cap[0] == Capture[0] && Cap[1] == Capture[1] && Cap[2] == Capture[2])
	{
	    format(string, sizeof(string), "%s has attempted to capture the %s for %s, it will be theirs in 10 minutes.", RPN(playerid), PointInfo[idx][pName], RPFaN(playerid));
	    SendClientMessageToAll(COLOR_YELLOW, string);
	    Capturing = 0;
	    PointInfo[idx][pOwner] = 0;
	    KillTimer(PointTimer);
	    Capturer = playerid;
	    CapturerFam = idx;
	    PointTimer = SetTimerEx("FinalCapture", 600000, false, "dd", Capturer, CapturerFam);
	}
	else
	{
		Capturing = 0;
		SendClientMessage(playerid, COLOR_GREY, "You have moved from your position and failed to capture the point.");
	}
	return 1;
}

forward FinalCapture(playerid, idx);
public FinalCapture(playerid, idx)
{
	new string[128];
	format(string, sizeof(string), "%s has successfully captured the %s for %s.", RPN(playerid), PointInfo[idx][pName], RPFaN(playerid));
	SendClientMessageToAll(COLOR_YELLOW, string);
	Capturer = -1;
 	CapturerFam = -1;
	PointInfo[idx][pTime] = 24;
	PointInfo[idx][pOwner] = PlayerInfo[playerid][pFam];
	DestroyDynamicPickup(PointInfo[idx][pPickup]);
	DestroyDynamic3DTextLabel(PointInfo[idx][pText]);
	SavePoints();
	return 1;
}

forward PayCheckDone();
public PayCheckDone()
{
    PayChecks = 0;
	return 1;
}
forward HealthHackCheck(playerid, giveplayerid);
public HealthHackCheck(playerid, giveplayerid)
{
	new string[128];
 	if(giveplayerid == INVALID_PLAYER_ID)
    {
        SendClientMessage(playerid, COLOR_GREY, "Player has logged off, causing the health hacks check to be cancelled.");
        HHcheckUsed = 0;
        return 1;
    }
    if(!IsPlayerInRangeOfPoint(giveplayerid,20,-1400.994873, 106.899650, 1032.273437))
    {
        SendClientMessage(playerid, COLOR_GREY, "Player is either desynced, lagging or using NOP SetPlayerPos hacks, the health hacks check has been cancelled.");

		SetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
		SetPlayerArmour(giveplayerid, HHcheckFloats[giveplayerid][1]);
		SetPlayerPos(giveplayerid, HHcheckFloats[giveplayerid][2], HHcheckFloats[giveplayerid][3], HHcheckFloats[giveplayerid][4]);
		SetPlayerFacingAngle(giveplayerid, HHcheckFloats[giveplayerid][5]);
		SetCameraBehindPlayer(giveplayerid);
		SetPlayerVirtualWorld(giveplayerid, HHcheckVW[giveplayerid]);
 		SetPlayerInterior(giveplayerid, HHcheckInt[giveplayerid]);

  		for(new i = 0; i < 6; i++)
		{
			HHcheckFloats[giveplayerid][i] = 0;
		}
		HHcheckVW[giveplayerid] = 0;
		HHcheckInt[giveplayerid] = 0;

        HHcheckUsed = 0;
		return 1;
    }

    new Float:health;
    GetPlayerHealth(giveplayerid, health);
    if(health == 100)
	{
	    format(string, sizeof(string), "HealthHackWarn: (POSITIVE) %s may be health hacking.", RPN(giveplayerid));
	    SendAdminMessage(COLOR_DARKRED, 1, string);
    }
    else
	{
		format(string, sizeof(string), "HealthHackWarn: (NEGATIVE) %s is not health hacking.", RPN(giveplayerid));
	    SendAdminMessage(COLOR_DARKRED, 1, string);
    }

	SetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
	SetPlayerArmour(giveplayerid, HHcheckFloats[giveplayerid][1]);
	SetPlayerPos(giveplayerid, HHcheckFloats[giveplayerid][2], HHcheckFloats[giveplayerid][3], HHcheckFloats[giveplayerid][4]);
	SetPlayerFacingAngle(giveplayerid, HHcheckFloats[giveplayerid][5]);
	SetCameraBehindPlayer(giveplayerid);
	SetPlayerVirtualWorld(giveplayerid, HHcheckVW[giveplayerid]);
 	SetPlayerInterior(giveplayerid, HHcheckInt[giveplayerid]);

  	for(new i = 0; i < 6; i++)
	{
		HHcheckFloats[giveplayerid][i] = 0;
	}
	HHcheckVW[giveplayerid] = 0;
	HHcheckInt[giveplayerid] = 0;

    HHcheckUsed = 0;
    return 1;
}

forward WeaponCheat();
public WeaponCheat()
{
	foreach(Player, playerid)
	{
		// Weapon Anticheat
	    if(IsPlayerLoggedIn(playerid) && !GunsBeingRemoved[playerid] && FalseBan[playerid])
	    {
		    if(GetPlayerWeapon(playerid) != PlayerInfo[playerid][pWeapon][0] && GetPlayerWeapon(playerid) != PlayerInfo[playerid][pWeapon][1] && GetPlayerWeapon(playerid) != PlayerInfo[playerid][pWeapon][2] && GetPlayerWeapon(playerid) != PlayerInfo[playerid][pWeapon][3] &&
			GetPlayerWeapon(playerid) != PlayerInfo[playerid][pWeapon][4] && GetPlayerWeapon(playerid) != PlayerInfo[playerid][pWeapon][5] && GetPlayerWeapon(playerid) != PlayerInfo[playerid][pWeapon][6] && GetPlayerWeapon(playerid) != PlayerInfo[playerid][pWeapon][7] &&
			GetPlayerWeapon(playerid) != PlayerInfo[playerid][pWeapon][8] && GetPlayerWeapon(playerid) != PlayerInfo[playerid][pWeapon][9] && GetPlayerWeapon(playerid) != PlayerInfo[playerid][pWeapon][10] && GetPlayerWeapon(playerid) != PlayerInfo[playerid][pWeapon][11] && GetPlayerWeapon(playerid) != PlayerInfo[playerid][pWeapon][12] &&
			GetPlayerWeapon(playerid) != EventWep[0] && GetPlayerWeapon(playerid) != EventWep[1] && GetPlayerWeapon(playerid) != EventWep[2])
		    {
		        if(GetPlayerState(playerid) != PLAYER_STATE_EXIT_VEHICLE || GetPlayerState(playerid) != PLAYER_STATE_ENTER_VEHICLE_DRIVER || GetPlayerState(playerid) != PLAYER_STATE_ENTER_VEHICLE_PASSENGER)
		        {
		            if(GetPlayerWeapon(playerid) != 46)
		            {
				        new string[128];
						format(string, sizeof(string), "AdmCmd: %s has been autokicked, reason: Weapon Hacks (%s)", RPN(playerid), RWN(GetPlayerWeapon(playerid)));
		                SendClientMessageToAll(COLOR_LIGHTRED, string);
		                /*Log("logs/ban.log", string);
						// Banreason
						new file[32];
						format(file, sizeof(file), "users/%s.ini", RPNU(playerid));
						format(string, sizeof(string), "Weapon Hacks (%s)", RWN(GetPlayerWeapon(playerid)));
						dini_Set(file, "BanReason", string);
						dini_Set(file, "BannedBy", "AutoBan");
						PlayerInfo[playerid][pBanned] = 1;
						AddBan(playerid);*/
						Kick(playerid);
					}
				}
		    }
	    }
	    if(GunsBeingRemoved[playerid]) GunsBeingRemoved[playerid] = 0;
	}
	return 1;
}
forward SaveServer();
public SaveServer()
{
	foreach(Player, i)
	{
		if(IsPlayerLoggedIn(i))
		{
		    SaveChar(i);
		}
	}
	SaveFactions();
	SaveFamilies();
	SavePoints();
	SaveBiz();
	SaveHouses();
	SaveDoors();
	SaveGates();
	SaveMapIcons();
	SaveArrestPoint();
	SaveDrugs();
	SaveMOTDS();
	return 1;
}
forward DrugTimer(playerid);
public DrugTimer(playerid)
{
	DrugTimeout[playerid] = 0;
	return 1;
}
forward Stoned(playerid);
public Stoned(playerid)
{
	SetPlayerWeather(playerid, 1);
	PlayerInfo[playerid][pStoned] = 0;
}
forward Tut1(playerid);
public Tut1(playerid)
{
	TextDrawShowForPlayer(playerid, TutorialTD);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 94375);
    TogglePlayerControllable(playerid, 0);
    SetPlayerCameraPos(playerid, 1668.9432,-1458.1198,120.6119);
    SetPlayerCameraLookAt(playerid,1586.5640,-1281.9943,120.6119);
    SetPlayerPos(playerid,1582.0026,-1274.0721,119.7132);
	SendClientMessage(playerid, COLOR_LIME, "_____| zGaming Roleplay Tutorial |_____");
	SendClientMessage(playerid, COLOR_WHITE, "Welcome to zG:RP, as this is your first time here you'll have to go through our tutorial");
	SendClientMessage(playerid, COLOR_WHITE, "to get known to important things we currently have on our server.");
	SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, COLOR_RED, "Please concentrate because the tutorial will have lots of information about the gameplay.");
	SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, COLOR_WHITE, "This server is owned by iRage and Zack, the script was created from scratch by iRage.");
	SendClientMessage(playerid, COLOR_WHITE, "zGaming was previously known as Modern Santos Roleplay but Terry (MS-RP Founder) decided to leave so it was renamed.");
	SendClientMessage(playerid, COLOR_WHITE, "");
	Tut[playerid] = SetTimerEx("Tut2", 12000, false, "i", playerid);
	return 1;
}
forward Tut2(playerid);
public Tut2(playerid)
{
    InterpolateCameraPos(playerid, 1668.9432,-1458.1198,120.6119, 1506.6499,-1675.8396,41.2007, 3000, CAMERA_MOVE);
    InterpolateCameraLookAt(playerid, 1586.5640,-1281.9943,120.6119, 1554.6344,-1675.5366,16.1953, 3000, CAMERA_MOVE);
	/*SetPlayerCameraPos(playerid,1506.6499,-1675.8396,41.2007);
	SetPlayerCameraLookAt(playerid, 1554.6344,-1675.5366,16.1953);*/
	SetPlayerPos(playerid,1554.6344,-1675.5366,16.1953-3);
    SendClientMessage(playerid, COLOR_LIME, "_____| Tutorial: Part 1 - Factions |_____");
    SendClientMessage(playerid, COLOR_WHITE, "In zG:RP we have some factions, we will only speak about two of them:");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_LIME, "- San Andreas Police Department [SAPD]");
    SendClientMessage(playerid, COLOR_WHITE, " The SAPD is the only Law Enforcement Faction on zG:RP.");
    SendClientMessage(playerid, COLOR_WHITE, " This means it takes care of everything related to law and crimes.");
    SendClientMessage(playerid, COLOR_WHITE, " If you get arrested you will be transported to the prison which is also being guarded by the SAPD");
	SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, COLOR_WHITE, "If you wish to be come an officer you can apply on www.zGaming.org");
	SendClientMessage(playerid, COLOR_WHITE, "");
	Tut[playerid] = SetTimerEx("Tut3", 16000, false, "i", playerid);
	return 1;
}
forward Tut3(playerid);
public Tut3(playerid)
{
    InterpolateCameraPos(playerid, 1506.6499,-1675.8396,41.2007, 1444.9666,-1709.8527,42.3163, 3000, CAMERA_MOVE);
    InterpolateCameraLookAt(playerid, 1554.6344,-1675.5366,16.1953, 1483.7808,-1762.6996,18.7958, 3000, CAMERA_MOVE);
	/*SetPlayerCameraPos(playerid,1444.9666,-1709.8527,42.3163);
	SetPlayerCameraLookAt(playerid, 1483.7808,-1762.6996,18.7958);*/
	SetPlayerPos(playerid,1483.7808,-1762.6996,18.7958-3);
    SendClientMessage(playerid, COLOR_LIME, "- San Andreas Government [GOV]");
    SendClientMessage(playerid, COLOR_WHITE, " The GOV is a political faction, which means they don't get weapons from the state, etc.");
    SendClientMessage(playerid, COLOR_WHITE, " The GOV basically consists of the president and their staff who are elected by civilians.");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, " The government's role is to make laws for the SAPD to follow, set taxes on civilians");
    SendClientMessage(playerid, COLOR_WHITE, " and finally to pay SAPD their paychecks.");
    SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, COLOR_WHITE, " If you wish to be a part of the government you can apply on www.zGaming.org");
	SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, COLOR_WHITE, "");
	Tut[playerid] = SetTimerEx("Tut4", 16000, false, "i", playerid);
	return 1;
}
forward Tut4(playerid);
public Tut4(playerid)
{
    InterpolateCameraPos(playerid, 1444.9666,-1709.8527,42.3163, 2441.1738,-1698.3149,31.4247, 3000, CAMERA_MOVE);
    InterpolateCameraLookAt(playerid, 1483.7808,-1762.6996,18.7958, 2507.3250,-1648.5522,13.8510, 3000, CAMERA_MOVE);
	/*SetPlayerCameraPos(playerid,2441.1738,-1698.3149,31.4247);
	SetPlayerCameraLookAt(playerid, 2507.3250,-1648.5522,13.8510);*/
	SetPlayerPos(playerid,2507.3250,-1648.5522,13.8510-3);
    SendClientMessage(playerid, COLOR_LIME, "_____| Tutorial: Part 2 - Families |_____");
    SendClientMessage(playerid, COLOR_WHITE, "There are 10 family slots in zG:RP.");
    SendClientMessage(playerid, COLOR_WHITE, "This means the maximum official families around is 10, this is to keep order on the server.");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "You may still create your own unofficial family and roleplay your way with it.");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, COLOR_WHITE, "If you wish to join a family you should contact family leaders ICly about it, found on /families.");
	SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, COLOR_WHITE, "If you wish to create your own family, a spot can be applied for on www.zGaming.org");
	Tut[playerid] = SetTimerEx("Tut5", 16000, false, "i", playerid);
	return 1;
}
forward Tut5(playerid);
public Tut5(playerid)
{
    InterpolateCameraPos(playerid, 2441.1738,-1698.3149,31.4247, 1733.3695,2300.4736,28.1169, 3000, CAMERA_MOVE);
    InterpolateCameraLookAt(playerid,2507.3250,-1648.5522,13.8510, 1677.3669,2340.1497,9.8972, 3000, CAMERA_MOVE);
	/*SetPlayerCameraPos(playerid,1733.3695,2300.4736,28.1169);
	SetPlayerCameraLookAt(playerid, 1677.3669,2340.1497,9.8972);*/
	SetPlayerPos(playerid,1677.3669,2340.1497,9.8972-3);
    SendClientMessage(playerid, COLOR_LIME, "_____| Tutorial: Part 3 - Businesses |_____");
    SendClientMessage(playerid, COLOR_WHITE, "zG:RP has 6 different types of businesses any player can own.");
    SendClientMessage(playerid, COLOR_WHITE, "24/7 Market - Clothes Shop - Ammunation - Advertisement Agency - Club - Fast Food");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "24/7 Market: Sells general things any player would need like a cellphone and sprunks.");
    SendClientMessage(playerid, COLOR_WHITE, "Clothes Shop: This is where you can change your skin. (( RPly Clothes ))");
    SendClientMessage(playerid, COLOR_WHITE, "Ammunation: You can buy ammo for your weapons from an ammunation.");
	SendClientMessage(playerid, COLOR_WHITE, "Advertisement Agency: You can place advertisements for everybody to see there.");
	SendClientMessage(playerid, COLOR_WHITE, "Club: A place for partying, you can get drunk in there too.");
	SendClientMessage(playerid, COLOR_WHITE, "Fast Food: You can get meals to recover health from a fast food.");
	Tut[playerid] = SetTimerEx("Tut6", 18000, false, "i", playerid);
	return 1;
}
forward Tut6(playerid);
public Tut6(playerid)
{
    InterpolateCameraPos(playerid, 1733.3695,2300.4736,28.1169, 979.7817,-1468.0079,41.3712, 3000, CAMERA_MOVE);
    InterpolateCameraLookAt(playerid, 1677.3669,2340.1497,9.8972, 1030.9037,-1441.5906,13.5546, 3000, CAMERA_MOVE);
	/*SetPlayerCameraPos(playerid,979.7817,-1468.0079,41.3712);
	SetPlayerCameraLookAt(playerid, 1030.9037,-1441.5906,13.5546);*/
	SetPlayerPos(playerid,1030.9037,-1441.5906,13.5546-3);
    SendClientMessage(playerid, COLOR_LIME, "_____| Tutorial: Part 4 - Jobs |_____");
    SendClientMessage(playerid, COLOR_WHITE, "zG:RP has different types of jobs any player can have, only 7 of them are listed below.");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "Mechanic: Can repair, add modifications like nitros and hydraulics to vehicles.");
    SendClientMessage(playerid, COLOR_WHITE, "Lawyer: Can reduce prison sentence or even remove someone's crime if he hasn't been arrested yet.");
	SendClientMessage(playerid, COLOR_WHITE, "Trucker: Can deliver products to the packages dropoff so business buy products off it and operate.");
    SendClientMessage(playerid, COLOR_WHITE, "Weapons Dealer: Can create/sell weapons using materials, or even sell materials.");
    SendClientMessage(playerid, COLOR_WHITE, "Weapons Smuggler: Can smuggle materials then sell them to anybody.");
	SendClientMessage(playerid, COLOR_WHITE, "Drugs Dealer: Can get Weed/Crack from the Drugs House or Crack Lab and use/sell them.");
	SendClientMessage(playerid, COLOR_WHITE, "Drugs Smuggler: Smuggles drugs to Drugs House or Crack Lab for dealers to be able to sell.");
	Tut[playerid] = SetTimerEx("Tut7", 25000, false, "i", playerid);
	return 1;
}
forward Tut7(playerid);
public Tut7(playerid)
{
    InterpolateCameraPos(playerid, 979.7817,-1468.0079,41.3712, 1111.8488,-1202.7986,52.5143, 3000, CAMERA_MOVE);
    InterpolateCameraLookAt(playerid, 1030.9037,-1441.5906,13.5546, 1153.9945,-1180.8960,32.8187, 3000, CAMERA_MOVE);
	/*SetPlayerCameraPos(playerid,1111.8488,-1202.7986,52.5143);
	SetPlayerCameraLookAt(playerid, 1153.9945,-1180.8960,32.8187);*/
	SetPlayerPos(playerid,1153.9945,-1180.8960,32.8187-3);
    SendClientMessage(playerid, COLOR_LIME, "_____| Tutorial: Part 5 - Telecom Company |_____");
    SendClientMessage(playerid, COLOR_WHITE, "The telecom company will be where you buy a sim card (Phone number) or activate");
	SendClientMessage(playerid, COLOR_WHITE, "the Internet service which requires smartphone.");
	SendClientMessage(playerid, COLOR_WHITE, "Internet service allows you to download music and play them on your smartphone. It also allows you to place");
	SendClientMessage(playerid, COLOR_WHITE, "advertisements from anywhere with double the price any Advertisement Agency would cost you.");
	SendClientMessage(playerid, COLOR_WHITE, "Money taken from the Telecom Company will go to the state's tax vault.");
	SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, COLOR_WHITE, "");
	Tut[playerid] = SetTimerEx("TutFinal", 15000, false, "i", playerid);
	return 1;
}
forward TutFinal(playerid);
public TutFinal(playerid)
{
    SendClientMessage(playerid, COLOR_LIME, "_____| Tutorial: Part 6 - The End |_____");
    SendClientMessage(playerid, COLOR_WHITE, "That was the end of our tutorial. If you have questions about anything feel free to");
	SendClientMessage(playerid, COLOR_WHITE, "ask over /newbie chat or /report.");
	SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, COLOR_WHITE, "If you wish to make money you should try either trucker or drugs smuggler job, both on /search.");
	SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "If you wish to have a stats refund, visit www.zGaming.org for more information.");
	SendClientMessage(playerid, COLOR_WHITE, "");
	PlayerInfo[playerid][pTutorial] = 1;
	SpawnChar(playerid);
	TogglePlayerControllable(playerid, 1);
	SetPlayerVirtualWorld(playerid, 0);
	TextDrawHideForPlayer(playerid, TutorialTD);
	// Starter Package
	PlayerInfo[playerid][pNew] = 1;
	PlayerInfo[playerid][pModel] = 299;
	SetPlayerSkin(playerid, 299);
	PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_NORMAL;
	return 1;
}

forward FreeTimer(playerid);
public FreeTimer(playerid)
{
	FreeTimeout[playerid] --;
	if(FreeTimeout[playerid] > 0)
	{
	    SetTimerEx("FreeTimer", 1000, false, "i", playerid);
	}
	return 1;
}

forward DefendTimer(playerid);
public DefendTimer(playerid)
{
	DefendTimeout[playerid] --;
	if(DefendTimeout[playerid] > 0)
	{
	    SetTimerEx("DefendTimer", 1000, false, "i", playerid);
	}
	return 1;
}

forward NOPSetPlayerPos();
public NOPSetPlayerPos()
{
    // NOP Vehicle Cheat
    foreach(Player, playerid)
    {
	    if(GetPlayerState(playerid) != PLAYER_STATE_PASSENGER)
		{
		    if(IsLeoVehicle(GetPlayerVehicleID(playerid)) && PlayerInfo[playerid][pFac] != 1 || IsTruckerVehicle(GetPlayerVehicleID(playerid)) && PlayerInfo[playerid][pJob] != JOB_TRUCKER)
		    {
			    new string[128];
			    format(string, sizeof(string), "AdmWarn: %s is either desynced or using NOP hacks. (Driving Restricted Vehicle)", RPN(playerid));
			    SendAdminMessage(COLOR_DARKRED, 1, string);
			    RemovePlayerFromVehicle(playerid);
		    }
		}
	}
	return 1;
}

forward ADTimer();
public ADTimer()
{
	if(!LastAd)
	{
		for(new i=0; i<MAX_ADS; i++)
		{
		    if(strlen(AD[i]) > 0 && !LastAd)
			{
			    new string[128];
				SendClientMessageToAll(COLOR_GREEN, AD[i]);
				if(iAD[i] == 2) SendClientMessageToAll(COLOR_GREEN, "This advertisement was created using a VIP service.");
				else if(iAD[i] == 1) SendClientMessageToAll(COLOR_GREEN, "This advertisement was created using an internet service.");
				else if(!iAD[i]) {format(string, sizeof(string), "This advertisement was created using %s's Advertisement Agency.", iAdName[i]); SendClientMessageToAll(COLOR_GREEN, string);}
				if(AdQueue > 0) AdQueue --;
		    	LastAd = TIMER_AD;
		    	// LastAds
		    	new File: file = fopen("logs/advertisements.log", io_append);
                if(!dini_Exists("logs/advertisements.log")) dini_Create("logs/advertisements.log");
				format(string, sizeof(string), "%s\r\n", AD[i]);
				fwrite(file, string);
				fclose(file);
		    	// End of LastAds
		    	foreach(Player, p)
		    	{
		    		if(strfind(AD[i], RPN(p)) != -1)
		    		{
		    		    HasAD[p] = 0;
		    		    SendClientMessage(p, COLOR_LIGHTBLUE, " You can now submit another advertisement.");
		    		}
		    	}
		    	format(AD[i], 128, "");
			}
		}
	}
	if(LastAd > 0) LastAd--;
	return 1;
}

forward Clock();
public Clock()
{
    new string[128];
	gettime(thour, tmin, tsec);
	new Day, Month, Year;
	getdate(Year, Month, Day);
	format(string, sizeof(string), "~b~~h~~h~Game Time: ~w~%d:%d:%d", thour, tmin, tsec);
	TextDrawSetString(TimeTD, string);
	foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i))
	    {
	        if(!IsAFK[i] && !BusTime[i])
	        {
				Seconds[i] ++;
				if(Seconds[i] == 60)
				{
				    Seconds[i] = 0;
				    PlayerInfo[i][pMinutes] ++;
				    if(PlayerInfo[i][pVIPTemp])
				    {
				    	PlayerInfo[i][pVIPTemp] --;
				    	if(PlayerInfo[i][pVIPTemp] <= 0)
				    	{
				    	    PlayerInfo[i][pVIP] = 0;
				    	    PlayerInfo[i][pVIPDay] = 0;
				    	    PlayerInfo[i][pVIPMonth] = 0;
				    	    PlayerInfo[i][pVIPHour] = 0;
				    	    PlayerInfo[i][pVIPTemp] = 0;
							format(string, sizeof(string), "AdmWarn: %s's temporary Bronze VIP package has expired.", RPN(i));
							SendAdminMessage(COLOR_DARKRED, 1, string);
							Log("logs/makevip.log", string);
							SendClientMessage(i, COLOR_LIGHTBLUE, " Your temporary Bronze VIP packag has expired.");
				    	}
					}
				}
				if(PlayerInfo[i][pVIP])
			    {
			        if(Day >= PlayerInfo[i][pVIPDay] && Month >= PlayerInfo[i][pVIPMonth] && !PlayerInfo[i][pVIPTemp])
			        {
						format(string, sizeof(string), "AdmWarn: %s's %s VIP package has expired.", RPN(i), RPVIPN(i));
						SendAdminMessage(COLOR_DARKRED, 1, string);
						Log("logs/makevip.log", string);
						format(string, sizeof(string), " Your %s VIP package has expired.", RPVIPN(i));
						SendClientMessage(i, COLOR_LIGHTBLUE, string);
						PlayerInfo[i][pVIP] = 0;
			    	    PlayerInfo[i][pVIPDay] = 0;
			    	    PlayerInfo[i][pVIPMonth] = 0;
			    	    PlayerInfo[i][pVIPHour] = 0;
			    	    PlayerInfo[i][pVIPTemp] = 0;
			        }
			    }
			}
	    }
	}
	// Paycheck
	if(tmin == 0 && tsec <= 4 && PayChecks == 0)
	{
	    SetWorldTime(thour);
		Paycheck();
		// Points
		for(new idx = 0; idx<MAX_POINTS; idx++)
	    {
	    	PointBC[idx] = 0;
	    }
		for(new idx = 0; idx < MAX_POINTS; idx++)
		{
			if(PointInfo[idx][pTime]) PointInfo[idx][pTime] --;
			if(!PointInfo[idx][pTime] && !PointBC[idx])
			{
			    PointInfo[idx][pOwner] = 0;
			    PointInfo[idx][pProfit] = 0;
			    format(string, sizeof(string), "The %s is available to be captured.", PointInfo[idx][pName]);
			    SendClientMessageToAll(COLOR_YELLOW, string);
			    DestroyDynamicPickup(PointInfo[idx][pPickup]);
			    DestroyDynamic3DTextLabel(PointInfo[idx][pText]);
			    PointInfo[idx][pPickup] = CreateDynamicPickup(1239, 1, PointInfo[idx][pX], PointInfo[idx][pY], PointInfo[idx][pZ]);
		    	PointInfo[idx][pText] = CreateDynamic3DTextLabel("Point\n/capture", COLOR_WHITE, PointInfo[idx][pX], PointInfo[idx][pY], PointInfo[idx][pZ]+0.3, 15);

			}
	    }
	}
	return 1;
}

forward EnterExitTimer(playerid);
public EnterExitTimer(playerid)
{
	TogglePlayerControllable(playerid, 1);
	return 1;
}

forward HospitalTimer(playerid);
public HospitalTimer(playerid)
{
	if(IsPlayerLoggedIn(playerid))
	{
		new string[128];
		if(HospitalTime[playerid] > 0)
		{
			format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Hospital Time Left: ~w~%d ~r~seconds", HospitalTime[playerid]);
			GameTextForPlayer(playerid, string,1500, 3);
			HospitalTime[playerid] --;
			HospitalCountDown[playerid] = SetTimerEx("HospitalTimer", 1000, false, "d", playerid);
		}
		else if(HospitalTime[playerid] <= 0)
		{
		    if(Hospital[playerid] == 0)
		    {
			    SetPlayerPos(playerid, 1177.5485,-1323.5773,14.0761);
			    SetPlayerFacingAngle(playerid, 269.4692);
		    }
		    else if(Hospital[playerid] == 1)
		    {
	            SetPlayerPos(playerid, 2034.0833,-1404.6536,17.2539);
			    SetPlayerFacingAngle(playerid, 178.1200);
		    }
		    PlayerInfo[playerid][pHospital] = 0;
		    SetCameraBehindPlayer(playerid);
		    TogglePlayerControllable(playerid, 1);
		    PlayerInfo[playerid][pArmor] = 0;
		    SetPlayerHealth(playerid, 40);
		    SetPlayerArmour(playerid, 0);
		    SendClientMessage(playerid, COLOR_MEDIC, "(( You have lost 30 minutes of your IC memory, you don't remember the situation you died in ))");
			KillTimer(HospitalCountDown[playerid]);
			if(PlayerInfo[playerid][pVIP])
			{
				SetPlayerHealth(playerid, 100);
				SendClientMessage(playerid, COLOR_VIP, "Bronze VIP: You have spawned with 100 health points.");
			}
			if(PlayerInfo[playerid][pVIP] >= 2) SendClientMessage(playerid, COLOR_VIP, "Silver VIP: You have recovered quickly from the hospital.");
			if(PlayerInfo[playerid][pVIP] >= 3)
			{
				SetPlayerArmour(playerid, 50);
				SendClientMessage(playerid, COLOR_VIP, "Gold VIP: You have spawned with 50 armor points.");
			}
			if(PlayerInfo[playerid][pVIP] >= 4)
			{
				SetPlayerArmour(playerid, 100);
				SendClientMessage(playerid, COLOR_VIP, "Platinum VIP: You have spawned with 100 armor points.");
			}
		}
	}
	return 1;
}

new BugMessage;
forward Bug();
public Bug()
{
	if(!BugMessage)
	{
		SendClientMessageToAll(COLOR_LIME, "Found a bug? Report it using /reportbug and scripters will check it once possible.");
		BugMessage = 1;
	}
	else if(BugMessage == 1)
	{
		SendClientMessageToAll(COLOR_ORANGE, "Can't find the place you're looking for? /search has some useful locations.");
        BugMessage = 2;
	}
	else if(BugMessage == 2)
	{
		SendClientMessageToAll(COLOR_YELLOW, "You can request help from our community helpers using /helpme.");
		BugMessage = 3;
	}
	else if(BugMessage == 3)
	{
		SendClientMessageToAll(COLOR_RED, "Want to get free VIP packages? /refhelp.");
		BugMessage = 4;
	}
	else if(BugMessage == 4)
	{
		SendClientMessageToAll(COLOR_RED, "If you wish to have a stats refund, please visit www.zGaming.org and fill your request there.");
		BugMessage = 0;
	}
	return 1;
}

forward SprunkTimer(playerid);
public SprunkTimer(playerid)
{
	if(IsPlayerLoggedIn(playerid))
	{
		NoSprunk[playerid] = 0;
	}
	return 1;
}

forward NewbieTimer(playerid);
public NewbieTimer(playerid)
{
	if(IsPlayerLoggedIn(playerid))
	{
		NewbieTime[playerid]--;
		if(NewbieTime[playerid] > 0)
		{
		    SetTimerEx("NewbieTimer", 1000, false, "i", playerid);
		}
	}
	return 1;
}

forward ReportTimer(playerid);
public ReportTimer(playerid)
{
	if(IsPlayerLoggedIn(playerid))
	{
		ReportTime[playerid]--;
		if(ReportTime[playerid] > 0)
		{
		    SetTimerEx("ReportTimer", 1000, false, "i", playerid);
		}
	}
	return 1;
}

forward HelpTimer(playerid);
public HelpTimer(playerid)
{
	if(IsPlayerLoggedIn(playerid))
	{
		HelpTime[playerid]--;
		if(HelpTime[playerid] > 0)
		{
		    SetTimerEx("HelpTimer", 1000, false, "i", playerid);
		}
	}
	return 1;
}

forward TazeTimer(playerid);
public TazeTimer(playerid)
{
    if(IsPlayerLoggedIn(playerid))
	{
	    new string[128];
		if (TazeTimeout[playerid] > 0)
	   	{
	   		format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Tazer effect fading in ~w~%d ~r~seconds", TazeTimeout[playerid]);
			GameTextForPlayer(playerid, string,1500, 3);
			TazeTimeout[playerid] -= 1;
			ApplyAnimation(playerid,"CRACK","crckdeth2",4.1,0,1,1,1,1,1);
	   	}
	   	if(TazeTimeout[playerid] <= 0)
	   	{
	   	    KillTimer(TazeCountDown[playerid]);
	   	    TogglePlayerControllable(playerid, 1);
	   	    TogglePlayerTazed(playerid, 0);
	   	    ClearAnimations(playerid);
	   	    format(string, sizeof(string), "* %s recovers from the tazer effect and stands up.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	   	}
   	}
	return 1;
}


forward CuffTimer(playerid);
public CuffTimer(playerid)
{
    if(IsPlayerLoggedIn(playerid))
	{
	    new string[128];
		if (CuffTimeout[playerid] > 0)
	   	{
	   		//format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Cuffs open in ~w~%d ~r~seconds", CuffTimeout[playerid]);
			//GameTextForPlayer(playerid, string,1500, 3);
			CuffTimeout[playerid] -= 1;
	   	}
	   	if(CuffTimeout[playerid] <= 0)
	   	{
	   	    KillTimer(CuffCountDown[playerid]);
	   	    TogglePlayerControllable(playerid, 1);
	   	    TogglePlayerCuffed(playerid, 0);
	   	    TogglePlayerTazed(playerid, 0);
	   	    if(!Uncuffed[playerid])
	   	    {
		   	    format(string, sizeof(string), "* %s manages to get their hands out of the cuffs.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			Uncuffed[playerid] = 0;
			KillTimer(CuffCountDown[playerid]);
			RemovePlayerAttachedObject(playerid, 0);
			ClearAnimations(playerid);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	   	}
   	}
	return 1;
}

forward PhoneCall(playerid);
public PhoneCall(playerid)
{
    if(IsPlayerLoggedIn(playerid))
	{
		new string[128];
		if(Calling[playerid])
		{
		    CallTime[playerid] ++;
		    format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Call timer: ~w~%d ~r~seconds", CallTime[playerid]);
			GameTextForPlayer(playerid, string,1500, 3);
		    SetTimerEx("PhoneCall", 1000, false, "d", playerid);
		}
	}
	return 1;
}

forward PrisonTimer();
public PrisonTimer()
{
	foreach(Player, playerid)
	{
		new string[128];
	    if(PlayerInfo[playerid][pPrisonTime] <=0)
	    {
	        if(PlayerInfo[playerid][pPrison] == 1) // SAPD Prison
			{
			    PlayerInfo[playerid][pPrison] = 0;
				PlayerInfo[playerid][pPrisonTime] = 0;
				SetPlayerInterior(playerid, 0);
				SetPlayerFacingAngle(playerid, 88.5042);
				SetPlayerColor(playerid, TRANSPARENT_WHITE);
				SetPlayerPos(playerid, 1548.8394,-1669.6111,13.5656);
				SetCameraBehindPlayer(playerid);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have served your prison time, try to be a better citizen.");
				format(string, sizeof(string), "SAPD: %s has been released as they served their prison time.", RPN(playerid));
				foreach(Player, i)
				{
				    if(IsACop(i))
				    {
				        SendClientMessage(i, COLOR_BLUE, string);
				    }
				}
			}
	        else if(PlayerInfo[playerid][pPrison] == 2) // Admin Prison
			{
			    PlayerInfo[playerid][pPrison] = 0;
				PlayerInfo[playerid][pPrisonTime] = 0;
				format(PlayerInfo[playerid][pPrisonReason], 64, "");
				format(PlayerInfo[playerid][pPrisonBy], 32, "");
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerFacingAngle(playerid, 88.5042);
				SetPlayerColor(playerid, TRANSPARENT_WHITE);
				SetPlayerPos(playerid, 1548.8394,-1669.6111,13.5656);
				SetCameraBehindPlayer(playerid);
				format(string, sizeof(string), "AdmCmd: %s has been released, reason: Prison time over", RPN(playerid));
				SendClientMessageToAll(COLOR_LIGHTRED, string);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have served your prison time, try to be a better player.");
			}
	    }
	    else
	    {
	    	PlayerInfo[playerid][pPrisonTime] --;
	    	format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Prison Time Left: ~w~%d ~r~seconds", PlayerInfo[playerid][pPrisonTime]);
			GameTextForPlayer(playerid, string,1500, 3);
		}
	}
	return 1;
}

// Stocks
stock RPNU(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	return name;
}

stock RPN(playerid)
{
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid,name,sizeof(name));
    for(new i = 0; i < MAX_PLAYER_NAME; i++)
    {
        if(name[i] == '_') name[i] = ' ';
    }
    return name;
}

stock IsGovVehicle(vehicleid)
{
	for(new i=0; i<2; i++)
	{
	    if(vehicleid == FacInfo[2][fCars][i]) return 1;
	}
	return 0;
}

stock IsDMVCar(vehicleid)
{
    for(new i=0; i<5; i++)
    {
        if(vehicleid == DMVCar[i]) return 1;
    }
    return 0;
}

stock IsNewsVehicle(vehicleid)
{
	for(new i=0; i<8; i++)
	{
	    if(vehicleid == FacInfo[4][fCars][i]) return 1;
	}
	return 0;
}

stock IsLeoVehicle(vehicleid)
{
	for(new i=0; i<26; i++)
	{
	    if(vehicleid == FacInfo[1][fCars][i]) return 1;
	}
	return 0;
}

stock IsFamVehicle(vehicleid)
{
	for(new idx=1; idx<MAX_FAMILIES; idx++)
	{
	    for(new v=0; v<5; v++)
	    {
			if(vehicleid == FamInfo[idx][fVeh][v]) return 1;
		}
	}
	return 0;
}

stock GFVS(vehicleid)
{
	new slot;
	for(new idx=1; idx<MAX_FAMILIES; idx++)
	{
	    for(new v=0; v<5; v++)
	    {
			if(vehicleid == FamInfo[idx][fVeh][v]) {slot = v;}
		}
	}
	return slot;
}

stock RVF(vehicleid)
{
	new fam;

	return fam;
}

stock IsTruckerVehicle(vehicleid)
{
	for(new i=0; i<10; i++)
	{
	    if(vehicleid == JobInfo[JOB_TRUCKER][jCars][i]) return 1;
	}
	return 0;
}

stock IsCruiser(vehicleid)
{
	for(new i=0; i<6; i++)
	{
	    if(vehicleid == FacInfo[1][fCars][i]) return 1;
	}
	return 0;
}

forward SAPDLobbyTimer();
public SAPDLobbyTimer()
{
	if(SAPDLobbyStatus == 1)
    {
    	MoveDynamicObject(SAPDLobby[0], 246.4050, 72.3000, 1003.6700, 1.50);
    	MoveDynamicObject(SAPDLobby[1], 246.4050, 72.5750, 1003.6650, 1.50);
    	MoveDynamicObject(SAPDLobby[2], 246.9850, 72.4500, 1003.7000, 1.50);
    	MoveDynamicObject(SAPDLobby[3], 245.8330, 72.4500, 1003.7000, 1.50);
    	SAPDLobbyStatus = 0;
    	foreach(Player, i)
    	{
			if(IsPlayerInRangeOfPoint(i, 15, 246.381317,72.578338,1003.706604) || IsPlayerInRangeOfPoint(i, 3, 246.381317,72.292190,1003.706604))
			{
				SendClientMessage(i, COLOR_PURPLE, "* The lobby door automatically closes. (( SAPD Lobby ))");
			}
		}
    }
	return 1;
}

forward SAPDCellsTimer();
public SAPDCellsTimer()
{
	if(SAPDCellsStatus == 1)
    {
    	MoveDynamicObject(SAPDCells[0], 259.105194,90.812126,1002.584350, 1.50);
    	MoveDynamicObject(SAPDCells[1], 258.843353,90.840599,1002.584350, 1.50);
    	MoveDynamicObject(SAPDCells[2], 258.949157,91.412040,1002.528625, 1.50);
    	MoveDynamicObject(SAPDCells[3], 258.949157,90.292076,1002.528625, 1.50);
    	SAPDCellsStatus = 0;
    	foreach(Player, i)
    	{
			if(IsPlayerInRangeOfPoint(i, 3, 259.105194,90.812126,1002.584350) || IsPlayerInRangeOfPoint(i, 3, 258.843353,90.840599,1002.584350))
			{
				SendClientMessage(i, COLOR_PURPLE, "* The cells door automatically closes. (( SAPD Cells ))");
			}
		}
    }
	return 1;
}

// Animations Defines

stock LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	if (gPlayerUsingLoopingAnim[playerid] == 1) TextDrawHideForPlayer(playerid,txtAnimHelper);
	gPlayerUsingLoopingAnim[playerid] = 1;
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
	TextDrawShowForPlayer(playerid,txtAnimHelper);
	animation[playerid]++;
}

stock OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	if (gPlayerUsingLoopingAnim[playerid] == 1) TextDrawHideForPlayer(playerid,txtAnimHelper);
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
	animation[playerid]++;
}

stock StopLoopingAnim(playerid)
{
	gPlayerUsingLoopingAnim[playerid] = 0;
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

stock PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}

// End of animations defines

stock IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key)) return 1;
	return 0;
}

stock RBT(bizid)
{
	new string[24];
	if(!BizInfo[bizid][bType]) format(string, sizeof(string), "None");
    else if(BizInfo[bizid][bType] == 1) format(string, sizeof(string), "24/7 Market");
    else if(BizInfo[bizid][bType] == 2) format(string, sizeof(string), "Clothes Shop");
    else if(BizInfo[bizid][bType] == 3) format(string, sizeof(string), "Ammunation");
    else if(BizInfo[bizid][bType] == 4) format(string, sizeof(string), "Club");
    else if(BizInfo[bizid][bType] == 5) format(string, sizeof(string), "Advertisement Agency");
    else if(BizInfo[bizid][bType] == 6) format(string, sizeof(string), "Fast Food");
	return string;
}

stock RHS(bizid)
{
	new string[16];
	if(!HouseInfo[bizid][hStatus]) format(string, sizeof(string), "Closed");
    else if(HouseInfo[bizid][hStatus]) format(string, sizeof(string), "Open");
	return string;
}

stock RBS(bizid)
{
	new string[16];
	if(!BizInfo[bizid][bStatus]) format(string, sizeof(string), "Closed");
    else if(BizInfo[bizid][bStatus]) format(string, sizeof(string), "Open");
	return string;
}

stock RPBP(playerid)
{
	new string[32];
	if(!PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "%d", BizInfo[PlayerInfo[playerid][pBiz]][bProducts]);
	return string;
}

stock RPVIPBP(playerid)
{
	new string[32];
	if(!PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "%d", BizInfo[PlayerInfo[playerid][pVBiz]][bProducts]);
	return string;
}

stock RPPNO(playerid)
{
	new string[32];
	if(!PlayerInfo[playerid][pCellphone]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pCellphone]) format(string, sizeof(string), "%d", PlayerInfo[playerid][pCellphone]);
	return string;
}

stock RPBM(playerid)
{
	new string[32];
	if(!PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "$%d", BizInfo[PlayerInfo[playerid][pBiz]][bMoney]);
	return string;
}
stock RPBK(playerid)
{
	new string[8];
	if(!PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "0");
	else if(PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "%d", PlayerInfo[playerid][pBiz]);
	return string;
}

stock RPBS(playerid)
{
	new idx = PlayerInfo[playerid][pBiz];
	return BizInfo[idx][bSold];
}

stock RPBL(playerid)
{
	new string[32], idx = PlayerInfo[playerid][pBiz];
	if(!PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "%d", BizInfo[idx][bLevel]);
	return string;
}

// VIP
stock RPVIPBM(playerid)
{
	new string[32];
	if(!PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "$%d", BizInfo[PlayerInfo[playerid][pVBiz]][bMoney]);
	return string;
}
stock RPVIPBK(playerid)
{
	new string[8];
	if(!PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "0");
	else if(PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "%d", PlayerInfo[playerid][pVBiz]);
	return string;
}

stock RPVIPBS(playerid)
{
	new idx = PlayerInfo[playerid][pVBiz];
	return BizInfo[idx][bSold];
}

stock RPVIPBL(playerid)
{
	new string[32], idx = PlayerInfo[playerid][pVBiz];
	if(!PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "%d", BizInfo[idx][bLevel]);
	return string;
}
//

stock RPHL(playerid)
{
	new string[32], idx = PlayerInfo[playerid][pHouse];
	if(!PlayerInfo[playerid][pHouse]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pHouse]) format(string, sizeof(string), "%d", HouseInfo[idx][hLevel]);
	return string;
}

stock RPVIPHL(playerid)
{
	new string[32], idx = PlayerInfo[playerid][pVHouse];
	if(!PlayerInfo[playerid][pVHouse]) format(string, sizeof(string), "0");
	else if(PlayerInfo[playerid][pVHouse]) format(string, sizeof(string), "%d", HouseInfo[idx][hLevel]);
	return string;
}

stock RPHK(playerid)
{
	new string[8];
	if(!PlayerInfo[playerid][pHouse]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pHouse]) format(string, sizeof(string), "%d", PlayerInfo[playerid][pHouse]);
	return string;
}

stock RPVIPHK(playerid)
{
	new string[8];
	if(!PlayerInfo[playerid][pVHouse]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pVHouse]) format(string, sizeof(string), "%d", PlayerInfo[playerid][pVHouse]);
	return string;
}

stock RPJN(playerid)
{
	new string[32];
	if(PlayerInfo[playerid][pJob] == JOB_NONE) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pJob] == JOB_MECHANIC) format(string, sizeof(string), "Mechanic");
	else if(PlayerInfo[playerid][pJob] == JOB_LAWYER) format(string, sizeof(string), "Lawyer");
	else if(PlayerInfo[playerid][pJob] == JOB_TRUCKER) format(string, sizeof(string), "Trucker");
	else if(PlayerInfo[playerid][pJob] == JOB_WDEALER) format(string, sizeof(string), "Weapons Dealer");
	else if(PlayerInfo[playerid][pJob] == JOB_WSMUGGLER) format(string, sizeof(string), "Weapons Smuggler");
	else if(PlayerInfo[playerid][pJob] == JOB_DDEALER) format(string, sizeof(string), "Drugs Dealer");
	else if(PlayerInfo[playerid][pJob] == JOB_DSMUGGLER) format(string, sizeof(string), "Drugs Smuggler");
	else if(PlayerInfo[playerid][pJob] == JOB_BODYGUARD) format(string, sizeof(string), "Bodyguard");
	else if(PlayerInfo[playerid][pJob] == JOB_BOXER) format(string, sizeof(string), "Boxer");
	return string;
}

stock RPVJN(playerid)
{
	new string[32];
	if(PlayerInfo[playerid][pVIPJob] == JOB_NONE) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pVIPJob] == JOB_MECHANIC) format(string, sizeof(string), "Mechanic");
	else if(PlayerInfo[playerid][pVIPJob] == JOB_LAWYER) format(string, sizeof(string), "Lawyer");
	else if(PlayerInfo[playerid][pVIPJob] == JOB_TRUCKER) format(string, sizeof(string), "Trucker");
	else if(PlayerInfo[playerid][pVIPJob] == JOB_WDEALER) format(string, sizeof(string), "Weapons Dealer");
	else if(PlayerInfo[playerid][pVIPJob] == JOB_WSMUGGLER) format(string, sizeof(string), "Weapons Smuggler");
	else if(PlayerInfo[playerid][pVIPJob] == JOB_DDEALER) format(string, sizeof(string), "Drugs Dealer");
	else if(PlayerInfo[playerid][pVIPJob] == JOB_DSMUGGLER) format(string, sizeof(string), "Drugs Smuggler");
	else if(PlayerInfo[playerid][pVIPJob] == JOB_BODYGUARD) format(string, sizeof(string), "Bodyguard");
	else if(PlayerInfo[playerid][pVIPJob] == JOB_BOXER) format(string, sizeof(string), "Boxer");
	return string;
}

stock RPJL(playerid, skillid)
{
    // Legal Jobs: 1) Mechanic | 2) Lawyer | 3) Trucker | 4) Fisher
	// Illegal Jobs: 5) Weapons Dealer | 6) Weapons Smuggler | 7) Drugs Dealer | 8) Drugs Smuggler | 9) Car Jacker
	// L1: 0 | L2: 100 | L3: 300 | L4: 700 | L5: 1200
	new string[4], skill, level;
	skill = PlayerInfo[playerid][pJobSkill][skillid];
	if(skill < 100) level = 1;
	else if(skill < 300) level = 2;
	else if(skill < 700) level = 3;
	else if(skill < 1200) level = 4;
	else if(skill >= 1200) level = 5;
	format(string, sizeof(string), "%d", level);
	return string;
}

stock RPJS(playerid, jobid)
{
	return PlayerInfo[playerid][pJobSkill][jobid];
}


stock RPPN(playerid)
{
	new string[16];
	format(string, sizeof(string), "None");
	if(PlayerInfo[playerid][pJob] == JOB_TRUCKER)
	{
		if(PlayerInfo[playerid][pTPackages] == 1) format(string, sizeof(string), "Products");
	}
	else if(PlayerInfo[playerid][pJob] == JOB_WSMUGGLER)
	{
        if(PlayerInfo[playerid][pMPackages]) format(string, sizeof(string), "Materials");
	}
	else if(PlayerInfo[playerid][pJob] == JOB_DSMUGGLER)
	{
        if(PlayerInfo[playerid][pDPackages] == 1) format(string, sizeof(string), "Weed");
        else if(PlayerInfo[playerid][pDPackages] == 2) format(string, sizeof(string), "Crack");
	}
	return string;
}

stock GetVehicleSpeed(vehicleid, get3d)
{
	new Float:x, Float:y, Float:z;
	GetVehicleVelocity(vehicleid, x, y, z);
	return SpeedCheck(x, y, z, 100.0, get3d);
}

stock AddZaiatWantedLevel(playerid, crime[])
{
	PlayerInfo[playerid][pCrimes] ++;
	PlayerInfo[playerid][pWanted] ++;
    SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)+1);
    if(PlayerInfo[playerid][pWanted] == 1) format(PlayerInfo[playerid][pWanted1], 64, "%s", crime);
    if(PlayerInfo[playerid][pWanted] == 2) format(PlayerInfo[playerid][pWanted2], 64, "%s", crime);
    if(PlayerInfo[playerid][pWanted] == 3) format(PlayerInfo[playerid][pWanted3], 64, "%s", crime);
    if(PlayerInfo[playerid][pWanted] == 4) format(PlayerInfo[playerid][pWanted4], 64, "%s", crime);
    if(PlayerInfo[playerid][pWanted] == 5) format(PlayerInfo[playerid][pWanted5], 64, "%s", crime);
    if(PlayerInfo[playerid][pWanted] == 6) format(PlayerInfo[playerid][pWanted6], 64, "%s", crime);
	return 1;
}

stock ClearZaiatWantedLevels(playerid)
{
    PlayerInfo[playerid][pWanted] = 0;
    SetPlayerWantedLevel(playerid, 0);
    format(PlayerInfo[playerid][pWanted1], 64, "");
    format(PlayerInfo[playerid][pWanted2], 64, "");
    format(PlayerInfo[playerid][pWanted3], 64, "");
    format(PlayerInfo[playerid][pWanted4], 64, "");
    format(PlayerInfo[playerid][pWanted5], 64, "");
    format(PlayerInfo[playerid][pWanted6], 64, "");
	return 1;
}

stock IsPlayerNearBankBooth(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 2, 2227.3281,1655.5314,961.7531)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2228.5593,1651.2610,961.7596)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2236.6938,1634.4552,961.7531)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2250.9041,1662.3793,961.7531)) return 1;
	return 0;
}

stock Paycheck()
{
	// Bank Robbery
	if(BankRobberyTime) BankRobberyTime --;
	// Bonus Calculation
	new bonus;
	foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i)) bonus ++;
	}
	bonus = bonus*2;
	// Paycheck
	foreach(Player, i)
	{
	    if(IsPlayerLoggedIn(i))
	    {
	        if(PlayerInfo[i][pMinutes] >= 40)
	        {
	            new string[128], idx;
	            // Calculating Paycheck
		        new paycheck = ((PlayerInfo[i][pMinutes]*PlayerInfo[i][pMinutes]) / 12) * PlayerInfo[i][pLevel];
		        new taxamount = (TaxPercent * paycheck) / 100;
		        new finalpaycheck = paycheck - taxamount;
		        if(PlayerInfo[i][pInternet]) {finalpaycheck = finalpaycheck - 50; TaxMoney += 50;}
		        idx = PlayerInfo[i][pBiz];
		        if(PlayerInfo[i][pBiz]) {finalpaycheck = finalpaycheck - (BizInfo[idx][bLevel] * PlayerInfo[i][pLevel]); TaxMoney += (BizInfo[idx][bLevel] * PlayerInfo[i][pLevel]);}
                idx = PlayerInfo[i][pHouse];
				if(PlayerInfo[i][pHouse]) {finalpaycheck = finalpaycheck - (HouseInfo[idx][hLevel] * PlayerInfo[i][pLevel]); TaxMoney += (HouseInfo[idx][hLevel] * PlayerInfo[i][pLevel]);}
				if(PlayerInfo[i][pVIP] == 2) {finalpaycheck = finalpaycheck * (125/100);}
				if(PlayerInfo[i][pVIP] == 3) {finalpaycheck = finalpaycheck * (150/100);}
				if(PlayerInfo[i][pVIP] == 4) {finalpaycheck = finalpaycheck * (200/100);}
				finalpaycheck = finalpaycheck + ((bonus/100)*finalpaycheck);
				// Increasing Respect
				new calc, stack[4];
				if(PlayerInfo[i][pMinutes] >= 120)
				{
					calc = (PlayerInfo[i][pMinutes]/60);
					format(stack, sizeof(stack), "%d", calc);
			        PlayerInfo[i][pHours] += strval(stack);
		        }
		        else
		        {
		            PlayerInfo[i][pHours] ++;
		        }
		        // Levels: 1-30
				new OldLevel = PlayerInfo[i][pLevel];
		        if(PlayerInfo[i][pLevel] == 1 && PlayerInfo[i][pHours] >= 4) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 2 && PlayerInfo[i][pHours] >= 12) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 3 && PlayerInfo[i][pHours] >= 24) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 4 && PlayerInfo[i][pHours] >= 44) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 5 && PlayerInfo[i][pHours] >= 68) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 6 && PlayerInfo[i][pHours] >= 96) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 7 && PlayerInfo[i][pHours] >= 128) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 8 && PlayerInfo[i][pHours] >= 164) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 9 && PlayerInfo[i][pHours] >= 204) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 10 && PlayerInfo[i][pHours] >= 248) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 11 && PlayerInfo[i][pHours] >= 296) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 12 && PlayerInfo[i][pHours] >= 348) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 13 && PlayerInfo[i][pHours] >= 404) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 14 && PlayerInfo[i][pHours] >= 464) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 15 && PlayerInfo[i][pHours] >= 528) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 16 && PlayerInfo[i][pHours] >= 596) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 17 && PlayerInfo[i][pHours] >= 668) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 18 && PlayerInfo[i][pHours] >= 744) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 19 && PlayerInfo[i][pHours] >= 824) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 20 && PlayerInfo[i][pHours] >= 908) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 21 && PlayerInfo[i][pHours] >= 996) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 22 && PlayerInfo[i][pHours] >= 1088) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 23 && PlayerInfo[i][pHours] >= 1184) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 24 && PlayerInfo[i][pHours] >= 1284) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 25 && PlayerInfo[i][pHours] >= 1388) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 26 && PlayerInfo[i][pHours] >= 1496) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 27 && PlayerInfo[i][pHours] >= 1608) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 28 && PlayerInfo[i][pHours] >= 1724) PlayerInfo[i][pLevel]++;
		        else if(PlayerInfo[i][pLevel] == 29 && PlayerInfo[i][pHours] >= 1840) PlayerInfo[i][pLevel]++;
                new NewLevel = PlayerInfo[i][pLevel];
		        // Setting Level
		        SetPlayerScore(i, PlayerInfo[i][pLevel]);
		        new oldbalance = PlayerInfo[i][pBank];
		        PlayerInfo[i][pBank] += finalpaycheck;
		        TaxMoney += taxamount;
		        // Paycheck Report
	    		SendClientMessage(i, COLOR_LIGHTBLUE, "|________ BANK STATEMENT ________|");
	    		format(string, sizeof(string), "{33CCFF}Minutes Played: {FFFFFF}%d {33CCFF} {33CCFF}Level: {FFFFFF}%d  {33CCFF}Respect: {FFFFFF}%d", PlayerInfo[i][pMinutes], PlayerInfo[i][pLevel], PlayerInfo[i][pHours]);
	    		SendClientMessage(i, COLOR_FADE1, string);
	    		format(string, sizeof(string), "{33CCFF}Paycheck: {FFFFFF}$%d  {33CCFF}Tax: {FFFFFF}$%d (%d percent)  {33CCFF}Final Paycheck: {FFFFFF}$%d", paycheck, taxamount, TaxPercent, finalpaycheck);
				SendClientMessage(i, COLOR_FADE1, string);
	    		format(string, sizeof(string), "{33CCFF}Old Balance: {FFFFFF}$%d  {33CCFF}New Balance: {FFFFFF}$%d", oldbalance, PlayerInfo[i][pBank]);
	    		SendClientMessage(i, COLOR_FADE1, string);
	    		if(PlayerInfo[i][pMinutes] >= 120)
				{
					format(string, sizeof(string), "* You have been given %d respect points for playing for %d minutes.", strval(stack), PlayerInfo[i][pMinutes]);
	            	if(PlayerInfo[i][pVIPBuddy]) PlayerInfo[i][pVIPBuddy] -= strval(stack);
				}
				else
				{
					format(string, sizeof(string), "* You have been given 1 respect point for playing for %d minutes.", PlayerInfo[i][pMinutes]);
	            	if(PlayerInfo[i][pVIPBuddy]) PlayerInfo[i][pVIPBuddy] --;
				}
				SendClientMessage(i, COLOR_LIGHTBLUE, string);
	    		if(OldLevel != NewLevel) SendClientMessage(i, COLOR_LIGHTBLUE, "* You have increased your level by playing a lot.");
				if(PlayerInfo[i][pInternet]) SendClientMessage(i, COLOR_LIGHTBLUE, "* You have been charged $50 for having smartphone internet service activated.");
                idx = PlayerInfo[i][pBiz];
				if(PlayerInfo[i][pBiz])
				{
				    format(string, sizeof(string), "* You have been charged $%d for having a business.", BizInfo[idx][bLevel] * PlayerInfo[i][pLevel]);
				    SendClientMessage(i, COLOR_LIGHTBLUE, string);
				}
				idx = PlayerInfo[i][pHouse];
				if(PlayerInfo[i][pHouse])
				{
				    format(string, sizeof(string), "* You have been charged $%d for having a house.", HouseInfo[idx][hLevel] * PlayerInfo[i][pLevel]);
				    SendClientMessage(i, COLOR_LIGHTBLUE, string);
				}
				if(PlayerInfo[i][pVIP] == 2) SendClientMessage(i, COLOR_VIP, "* Silver VIP: Your paycheck was 25 percent higher than usual.");
				else if(PlayerInfo[i][pVIP] == 3) SendClientMessage(i, COLOR_VIP, "* Gold VIP: Your paycheck was 50 percent higher than usual.");
				else if(PlayerInfo[i][pVIP] == 4) SendClientMessage(i, COLOR_VIP, "* Platinum VIP: Your paycheck was 100 percent higher than usual.");
				// Paycheck Bonus
				format(string, sizeof(string), "* Bonus: Your paycheck was %d percent higher as we have %d players online.", bonus, bonus/2);
				SendClientMessage(i, COLOR_LIME, string);
				// Clearing Playing Minutes
	    		PlayerInfo[i][pMinutes] = 0;
	    		// Giving a reward point
	    		if(!PlayerInfo[i][pVIP])
	    		{
		    		PlayerInfo[i][pReward] ++;
		    		if(PlayerInfo[i][pReward] >= 12)
		    		{
						PlayerInfo[i][pReward] = 0;
						PlayerInfo[i][pVIP] = 1;
						PlayerInfo[i][pVIPTemp] = 60*24;
						format(string, sizeof(string), "RewardWarn: %s has been rewarded a Bronze VIP package for 24 hours for being active.", RPN(i));
						SendClientMessageToAll(COLOR_VIP, string);
						Log("logs/makevip.log", string);
						SendClientMessage(i, COLOR_LIGHTBLUE, " You will not be rewarded again until your Bronze VIP reward time is over.");
		    		}
		    		else
		    		{
						format(string, sizeof(string), "* You have gained an activity point, you have total of %d points.", PlayerInfo[i][pReward]);
						SendClientMessage(i, COLOR_VIP, string);
		    		}
	    		}
	    		// Loyal Points
	    		if(!PlayerInfo[i][pLoyal])
	    		{
	    		    PlayerInfo[i][pLPoints] ++;
   					format(string, sizeof(string), "* You have gained a loyalty point, you have total of %d points.", PlayerInfo[i][pLPoints]);
	    		    SendClientMessage(i, COLOR_LIME, string);
	    		}
    		}
    		else
			{
			    SendClientMessage(i, COLOR_LIGHTRED, " You haven't played long enough to recieve a paycheck.");
			}
			PayChecks = 1;
			SetTimer("PayCheckDone", 5000, false);
		}
    }
	return 1;
}

stock stringContainsIP(const szStr[])
{
    new
        iDots,
        i
    ;
    while(szStr[i] != EOS)
    {
        if('0' <= szStr[i] <= '9')
        {
            do
            {
                if(szStr[i] == '.')
                    iDots++;

                i++;
            }
            while(('0' <= szStr[i] <= '9') || szStr[i] == '.' || szStr[i] == ':');
        }
        if(iDots > 2)
            return 1;
        else
            iDots = 0;

        i++;
    }
    return 0;
}



// new function
stock RPIDFN(playername[])
{
  for(new i = 0; i <= MAX_PLAYERS; i++)
  {
    if(IsPlayerConnected(i))
    {
      new playername2[MAX_PLAYER_NAME];
      GetPlayerName(i, playername2, sizeof(playername2));
      if(strcmp(playername2, playername, true, strlen(playername)) == 0)
      {
        return i;
      }
    }
  }
  return INVALID_PLAYER_ID;
}

stock SetVehicleSpeed(vehicleid,mph) //Miles Per Hour
{
	new Float:Vx,Float:Vy,Float:Vz,Float:DV,Float:multiple;
	GetVehicleVelocity(vehicleid,Vx,Vy,Vz);
	DV = floatsqroot(Vx*Vx + Vy*Vy + Vz*Vz);
	if(DV > 0) //Directional velocity must be greater than 0 (display strobes if 0)
	{
		multiple = (mph / (DV * 100)); //Multiplying DV by 100 calculates speed in MPH
		return SetVehicleVelocity(vehicleid,Vx*multiple,Vy*multiple,Vz*multiple);
	}
	return 0;
}

stock ModifyVehicleSpeed(vehicleid,mph) //Miles Per Hour
{
	new Float:Vx,Float:Vy,Float:Vz,Float:DV,Float:multiple;
	GetVehicleVelocity(vehicleid,Vx,Vy,Vz);
	DV = floatsqroot(Vx*Vx + Vy*Vy + Vz*Vz);
	if(DV > 0) //Directional velocity must be greater than 0 (display strobes if 0)
	{
		multiple = ((mph + DV * 100) / (DV * 100)); //Multiplying DV by 100 calculates speed in MPH
		return SetVehicleVelocity(vehicleid,Vx*multiple,Vy*multiple,Vz*multiple);
	}
	return 0;
}

stock GetPlayerSpeed(playerid, get3d)
{
	new Float:x, Float:y, Float:z;
	if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid), x, y, z);
	else GetPlayerVelocity(playerid, x, y, z);
	return SpeedCheck(x, y, z, 100.0, get3d);
}

stock RVN(carid)
{
    new name[32];
	switch(carid)
	{
	    case 0: format(name, sizeof(name), "None");
	    case 481: format(name, sizeof(name), "BMX");
	    case 462: format(name, sizeof(name), "Faggio");
	    case 463: format(name, sizeof(name), "Freeway");
	    case 468: format(name, sizeof(name), "Sanchez");
	    case 471: format(name, sizeof(name), "Quad");
	    case 461: format(name, sizeof(name), "PCJ-600");
	    case 521: format(name, sizeof(name), "FCR-900");
	    case 480: format(name, sizeof(name), "Comet");
	    case 533: format(name, sizeof(name), "Feltzer");
	    case 439: format(name, sizeof(name), "Stallion");
	    case 555: format(name, sizeof(name), "Windsor");
	    case 579: format(name, sizeof(name), "Huntley");
	    case 400: format(name, sizeof(name), "Landstalker");
	    case 495: format(name, sizeof(name), "Sandking");
	    case 560: format(name, sizeof(name), "Sultan");
	    case 429: format(name, sizeof(name), "Banshee");
	    case 402: format(name, sizeof(name), "Buffalo");
	    case 541: format(name, sizeof(name), "Bullet");
	    case 415: format(name, sizeof(name), "Cheetah");
	    case 559: format(name, sizeof(name), "Jester");
	    case 451: format(name, sizeof(name), "Turismo");
	    case 536: format(name, sizeof(name), "Blade");
	    case 575: format(name, sizeof(name), "Broadway");
	    case 534: format(name, sizeof(name), "Remington");
	    case 567: format(name, sizeof(name), "Savanna");
        case 535: format(name, sizeof(name), "Slamvan");
        case 576: format(name, sizeof(name), "Tornado");
        case 412: format(name, sizeof(name), "Voodo");
        case 405: format(name, sizeof(name), "Sentinel");
	    case 410: format(name, sizeof(name), "Manana");
	}
    return name;
}

// BEGIN OF VIP TUNING
stock CarmodDialog(playerid)
{
	ShowPlayerDialog(playerid,1111,DIALOG_STYLE_LIST,"Select things to put in your car","Nitro\nCar Color\nWheels\nStereo\nHydraulics\nCar Components","Select","Cancel");
	return 1;
}
stock Lowrider(playerid)
{
    ShowPlayerDialog(playerid,1001,DIALOG_STYLE_LIST,"Choose one","Paintjob\nChrome\nSlamin\n{FF0000}Back","Select","Cancel");
    return 1;
}
stock RegularCarDialog(playerid)
{
    new vehmd = GetVehicleModel(GetPlayerVehicleID(playerid));
 	new string[128];
	if(vehmd == 401 || vehmd == 496 || vehmd == 518 || vehmd == 540 || vehmd == 546 || vehmd == 589)
	{string = "Spoiler\nHood\nRoof\nVents\nSideskirt\nLights\n{FF0000}Back";}
	else if(vehmd == 549)
	{string = "Spoiler\nHood\nVents\nSideskirt\nLights\n{FF0000}Back";}
	else if(vehmd == 550)
	{string = "Spoiler\nHood\nRoof\nVents\nLights\n{FF0000}Back";}
	else if(vehmd == 585 || vehmd == 603)
	{string = "Spoiler\nRoof\nVents\nSideskirt\nLights\n{FF0000}Back";}
	else if(vehmd == 410 || vehmd == 436)
	{string = "Spoiler\nRoof\nSideskirt\nLights\n{FF0000}Back";}
	else if(vehmd == 439 || vehmd == 458)
	{string = "Spoiler\nVents\nSideskirt\nLights\n{FF0000}Back";}
	else if(vehmd == 551 || vehmd == 492 || vehmd == 529)
	{string = "Spoiler\nHood\nRoof\nSideskirt\n{FF0000}Back";}
	else if(vehmd == 489 || vehmd == 505)
	{string = "Spoiler\nHood\nRoof\nLights\n{FF0000}Back";}
	else if(vehmd == 516)
	{string = "Spoiler\nHood\nSideskirt\n{FF0000}Back";}
	else if(vehmd == 491 || vehmd == 517)
	{string = "Spoiler\nVents\nSideskirt\n{FF0000}Back";}
	else if(vehmd == 418 || vehmd == 527 || vehmd == 580)
	{string = "Spoiler\nRoof\nSideskirt\n{FF0000}Back";}
	else if(vehmd == 420 || vehmd == 587)
	{string = "Spoiler\nHood\n{FF0000}Back";}
	else if(vehmd == 547)
	{string = "Spoiler\nVents\n{FF0000}Back";}
	else if(vehmd == 415)
	{string = "Spoiler\nSideskirt\n{FF0000}Back";}

    ShowPlayerDialog(playerid,1004,DIALOG_STYLE_LIST,"Choose one",string,"Select","Cancel");
    return 1;
}
stock Mod(playerid)//Alien
{
    ShowPlayerDialog(playerid,1511,DIALOG_STYLE_LIST,"Choose one","Right Sideskirt\nLeft Sideskirt\nExhaust\nRoof\nSpoiler\nFront Bumper\nRear Bumper\n{FF0000}Back","Select","Cancle");
    return 1;
}
stock Mod1(playerid)//X-Flow
{
	ShowPlayerDialog(playerid,1512,DIALOG_STYLE_LIST,"Choose one","Right Sideskirt\nLeft Sideskirt\nExhaust\nRoof\nSpoiler\nFront Bumper\nRear Bumper\n{FF0000}Back","Select","Cancle");
	return 1;
}
stock Mod2(playerid)//Chrome
{
    new vehmd = GetVehicleModel(GetPlayerVehicleID(playerid));
    new string[128];
	if(vehmd == 576 || vehmd == 575)
	{string = "Right Sideskirt\nLeft Sideskirt\nExhaust\nFront Bumper\nRear Bumper\n{FF0000}Back";}
	else if(vehmd == 535)
	{string = "Front Bullbars\nRear Bullbars\nExhaust\nFront Bumper\nRight Sideskirt\nLeft Sideskirt\n{FF0000}Back";}
	else if(vehmd == 567 || vehmd == 536)
	{string = "Exhaust\nRight Sideskirt\nLeft Sideskirt\nRear Bumper\nFront Bumper\n{FF0000}Back";}
	else if(vehmd == 534)
	{string = "Grill\nBars\nLights\nExhaust\nFront Bumper\nRear Bumper\n{FF0000}Back";}

    ShowPlayerDialog(playerid,1513,DIALOG_STYLE_LIST,"Choose one",string,"Select","Cancle");
	return 1;
}
stock Mod3(playerid)//Slamin
{
    new vehmd = GetVehicleModel(GetPlayerVehicleID(playerid));
    new string[128];
    if(vehmd == 575 || vehmd == 576)
	{string = "Exhaust\nFront Bumper\nRear Bumper\n{FF0000}Back";}
	else if(vehmd == 535)
	{string = "Rear Bullbars\nFront Bullbars\nExhaust\nRight Sideskirt\nLeft Sidedkirt\n{FF0000}Back";}
	else if(vehmd == 567 || vehmd == 536 || vehmd == 534)
	{string = "Front Bumper\nRear Bumper\nExhaust\n{FF0000}Back";}
    ShowPlayerDialog(playerid,1514,DIALOG_STYLE_LIST,"Choose one",string,"Select","Cancle");
    return 1;
}
// END OF VIP TUNING

// Anti CS
forward OnPlayerCBug(playerid);
public OnPlayerCBug(playerid) {
	if(!Event[playerid])
	{
		new Float:H;
		GetPlayerHealth(playerid, H);
		SetPlayerHealth(playerid, H-5);
	}
	return 1;
}
forward CrouchCheck(playerid);
public CrouchCheck(playerid) {
	CheckCrouch[playerid] = 0;
	return 1;
}


stock SaveToys(playerid, file[])
{
	// Toys Model
	dini_IntSet(file, "tModel0", PlayerInfo[playerid][pToyModel][0]);
	dini_IntSet(file, "tModel1", PlayerInfo[playerid][pToyModel][1]);
	dini_IntSet(file, "tModel2", PlayerInfo[playerid][pToyModel][2]);
	dini_IntSet(file, "tModel3", PlayerInfo[playerid][pToyModel][3]);
	dini_IntSet(file, "tModel4", PlayerInfo[playerid][pToyModel][4]);
	dini_IntSet(file, "tModel5", PlayerInfo[playerid][pToyModel][5]);
	dini_IntSet(file, "tModel6", PlayerInfo[playerid][pToyModel][6]);
	dini_IntSet(file, "tModel7", PlayerInfo[playerid][pToyModel][7]);
	dini_IntSet(file, "tModel8", PlayerInfo[playerid][pToyModel][8]);
	dini_IntSet(file, "tModel9", PlayerInfo[playerid][pToyModel][9]);
	// Toys X
	dini_FloatSet(file, "tX0", PlayerInfo[playerid][pToyX][0]);	dini_FloatSet(file, "tX1", PlayerInfo[playerid][pToyX][1]);	dini_FloatSet(file, "tX2", PlayerInfo[playerid][pToyX][2]);	dini_FloatSet(file, "tX3", PlayerInfo[playerid][pToyX][3]);
	dini_FloatSet(file, "tX4", PlayerInfo[playerid][pToyX][4]);	dini_FloatSet(file, "tX5", PlayerInfo[playerid][pToyX][5]);	dini_FloatSet(file, "tX6", PlayerInfo[playerid][pToyX][6]);	dini_FloatSet(file, "tX7", PlayerInfo[playerid][pToyX][7]);
	dini_FloatSet(file, "tX8", PlayerInfo[playerid][pToyX][8]);	dini_FloatSet(file, "tX9", PlayerInfo[playerid][pToyX][9]);
	// Toys Y
	dini_FloatSet(file, "tY0", PlayerInfo[playerid][pToyY][0]);	dini_FloatSet(file, "tY1", PlayerInfo[playerid][pToyY][1]);	dini_FloatSet(file, "tY2", PlayerInfo[playerid][pToyY][2]);	dini_FloatSet(file, "tY3", PlayerInfo[playerid][pToyY][3]);
	dini_FloatSet(file, "tY4", PlayerInfo[playerid][pToyY][4]);	dini_FloatSet(file, "tY5", PlayerInfo[playerid][pToyY][5]);	dini_FloatSet(file, "tY6", PlayerInfo[playerid][pToyY][6]);	dini_FloatSet(file, "tY7", PlayerInfo[playerid][pToyY][7]);
	dini_FloatSet(file, "tY8", PlayerInfo[playerid][pToyY][8]); dini_FloatSet(file, "tY9", PlayerInfo[playerid][pToyY][9]);
	// Toy Z
	dini_FloatSet(file, "tZ0", PlayerInfo[playerid][pToyZ][0]);	dini_FloatSet(file, "tZ1", PlayerInfo[playerid][pToyZ][1]);	dini_FloatSet(file, "tZ2", PlayerInfo[playerid][pToyZ][2]);	dini_FloatSet(file, "tZ3", PlayerInfo[playerid][pToyZ][3]);
	dini_FloatSet(file, "tZ4", PlayerInfo[playerid][pToyZ][4]);	dini_FloatSet(file, "tZ5", PlayerInfo[playerid][pToyZ][5]);	dini_FloatSet(file, "tZ6", PlayerInfo[playerid][pToyZ][6]);	dini_FloatSet(file, "tZ7", PlayerInfo[playerid][pToyZ][7]);
	dini_FloatSet(file, "tZ8", PlayerInfo[playerid][pToyZ][8]);	dini_FloatSet(file, "tZ9", PlayerInfo[playerid][pToyZ][9]);
	// Toy RX
	dini_FloatSet(file, "tRX0", PlayerInfo[playerid][pToyRX][0]); dini_FloatSet(file, "tRX1", PlayerInfo[playerid][pToyRX][1]);	dini_FloatSet(file, "tRX2", PlayerInfo[playerid][pToyRX][2]); dini_FloatSet(file, "tRX3", PlayerInfo[playerid][pToyRX][3]);
	dini_FloatSet(file, "tRX4", PlayerInfo[playerid][pToyRX][4]); dini_FloatSet(file, "tRX5", PlayerInfo[playerid][pToyRX][5]);	dini_FloatSet(file, "tRX6", PlayerInfo[playerid][pToyRX][6]); dini_FloatSet(file, "tRX7", PlayerInfo[playerid][pToyRX][7]);
	dini_FloatSet(file, "tRX8", PlayerInfo[playerid][pToyRX][8]); dini_FloatSet(file, "tRX9", PlayerInfo[playerid][pToyRX][9]);
	// Toy RY
	dini_FloatSet(file, "tRY0", PlayerInfo[playerid][pToyRY][0]); dini_FloatSet(file, "tRY1", PlayerInfo[playerid][pToyRY][1]);	dini_FloatSet(file, "tRY2", PlayerInfo[playerid][pToyRY][2]); dini_FloatSet(file, "tRY3", PlayerInfo[playerid][pToyRY][3]);
	dini_FloatSet(file, "tRY4", PlayerInfo[playerid][pToyRY][4]); dini_FloatSet(file, "tRY5", PlayerInfo[playerid][pToyRY][5]);	dini_FloatSet(file, "tRY6", PlayerInfo[playerid][pToyRY][6]); dini_FloatSet(file, "tRY7", PlayerInfo[playerid][pToyRY][7]);
	dini_FloatSet(file, "tRY8", PlayerInfo[playerid][pToyRY][8]); dini_FloatSet(file, "tRY9", PlayerInfo[playerid][pToyRY][9]);
	// Toy RZ
	dini_FloatSet(file, "tRZ0", PlayerInfo[playerid][pToyRZ][0]); dini_FloatSet(file, "tRZ1", PlayerInfo[playerid][pToyRZ][1]);	dini_FloatSet(file, "tRZ2", PlayerInfo[playerid][pToyRZ][2]); dini_FloatSet(file, "tRZ3", PlayerInfo[playerid][pToyRZ][3]);
	dini_FloatSet(file, "tRZ4", PlayerInfo[playerid][pToyRZ][4]); dini_FloatSet(file, "tRZ5", PlayerInfo[playerid][pToyRZ][5]);	dini_FloatSet(file, "tRZ6", PlayerInfo[playerid][pToyRZ][6]); dini_FloatSet(file, "tRZ7", PlayerInfo[playerid][pToyRZ][7]);
	dini_FloatSet(file, "tRZ8", PlayerInfo[playerid][pToyRZ][8]); dini_FloatSet(file, "tRZ9", PlayerInfo[playerid][pToyRZ][9]);
	// Toy SX
	dini_FloatSet(file, "tSX0", PlayerInfo[playerid][pToySX][0]); dini_FloatSet(file, "tSX1", PlayerInfo[playerid][pToySX][1]);	dini_FloatSet(file, "tSX2", PlayerInfo[playerid][pToySX][2]); dini_FloatSet(file, "tSX3", PlayerInfo[playerid][pToySX][3]);
	dini_FloatSet(file, "tSX4", PlayerInfo[playerid][pToySX][4]); dini_FloatSet(file, "tSX5", PlayerInfo[playerid][pToySX][5]);	dini_FloatSet(file, "tSX6", PlayerInfo[playerid][pToySX][6]); dini_FloatSet(file, "tSX7", PlayerInfo[playerid][pToySX][7]);
	dini_FloatSet(file, "tSX8", PlayerInfo[playerid][pToySX][8]); dini_FloatSet(file, "tSX9", PlayerInfo[playerid][pToySX][9]);
	// Toy SY
	dini_FloatSet(file, "tSY0", PlayerInfo[playerid][pToySY][0]); dini_FloatSet(file, "tSY1", PlayerInfo[playerid][pToySY][1]);	dini_FloatSet(file, "tSY2", PlayerInfo[playerid][pToySY][2]); dini_FloatSet(file, "tSY3", PlayerInfo[playerid][pToySY][3]);
	dini_FloatSet(file, "tSY4", PlayerInfo[playerid][pToySY][4]); dini_FloatSet(file, "tSY5", PlayerInfo[playerid][pToySY][5]);	dini_FloatSet(file, "tSY6", PlayerInfo[playerid][pToySY][6]); dini_FloatSet(file, "tSY7", PlayerInfo[playerid][pToySY][7]);
	dini_FloatSet(file, "tSY8", PlayerInfo[playerid][pToySY][8]); dini_FloatSet(file, "tSY9", PlayerInfo[playerid][pToySY][9]);
	// Toy SZ
	dini_FloatSet(file, "tSZ0", PlayerInfo[playerid][pToySZ][0]); dini_FloatSet(file, "tSZ1", PlayerInfo[playerid][pToySZ][1]);	dini_FloatSet(file, "tSZ2", PlayerInfo[playerid][pToySZ][2]); dini_FloatSet(file, "tSZ3", PlayerInfo[playerid][pToySZ][3]);
	dini_FloatSet(file, "tSZ4", PlayerInfo[playerid][pToySZ][4]); dini_FloatSet(file, "tSZ5", PlayerInfo[playerid][pToySZ][5]);	dini_FloatSet(file, "tSZ6", PlayerInfo[playerid][pToySZ][6]); dini_FloatSet(file, "tSZ7", PlayerInfo[playerid][pToySZ][7]);
	dini_FloatSet(file, "tSZ8", PlayerInfo[playerid][pToySZ][8]); dini_FloatSet(file, "tSZ9", PlayerInfo[playerid][pToySZ][9]);
	return 1;
}

stock LoadToys(playerid, file[])
{
	// Toys
	PlayerInfo[playerid][pToyModel][0] = dini_Int(file, "tModel0");
	PlayerInfo[playerid][pToyModel][1] = dini_Int(file, "tModel1");
	PlayerInfo[playerid][pToyModel][2] = dini_Int(file, "tModel2");
	PlayerInfo[playerid][pToyModel][3] = dini_Int(file, "tModel3");
	PlayerInfo[playerid][pToyModel][4] = dini_Int(file, "tModel4");
	PlayerInfo[playerid][pToyModel][5] = dini_Int(file, "tModel5");
	PlayerInfo[playerid][pToyModel][6] = dini_Int(file, "tModel6");
	PlayerInfo[playerid][pToyModel][7] = dini_Int(file, "tModel7");
	PlayerInfo[playerid][pToyModel][8] = dini_Int(file, "tModel8");
	PlayerInfo[playerid][pToyModel][9] = dini_Int(file, "tModel9");
	// Toys X
	PlayerInfo[playerid][pToyX][0] = dini_Float(file, "tX0"); PlayerInfo[playerid][pToyX][1] = dini_Float(file, "tX1");	PlayerInfo[playerid][pToyX][2] = dini_Float(file, "tX2"); PlayerInfo[playerid][pToyX][3] = dini_Float(file, "tX3");
	PlayerInfo[playerid][pToyX][4] = dini_Float(file, "tX4"); PlayerInfo[playerid][pToyX][5] = dini_Float(file, "tX5");	PlayerInfo[playerid][pToyX][6] = dini_Float(file, "tX6"); PlayerInfo[playerid][pToyX][7] = dini_Float(file, "tX7");
	PlayerInfo[playerid][pToyX][8] = dini_Float(file, "tX8"); PlayerInfo[playerid][pToyX][9] = dini_Float(file, "tX9");
	// Toys Y
	PlayerInfo[playerid][pToyY][0] = dini_Float(file, "tY0"); PlayerInfo[playerid][pToyY][1] = dini_Float(file, "tY1");	PlayerInfo[playerid][pToyY][2] = dini_Float(file, "tY2"); PlayerInfo[playerid][pToyY][3] = dini_Float(file, "tY3");
	PlayerInfo[playerid][pToyY][4] = dini_Float(file, "tY4"); PlayerInfo[playerid][pToyY][5] = dini_Float(file, "tY5");	PlayerInfo[playerid][pToyY][6] = dini_Float(file, "tY6"); PlayerInfo[playerid][pToyY][7] = dini_Float(file, "tY7");
	PlayerInfo[playerid][pToyY][8] = dini_Float(file, "tY8"); PlayerInfo[playerid][pToyY][9] = dini_Float(file, "tY9");
	// Toy Z
	PlayerInfo[playerid][pToyZ][0] = dini_Float(file, "tZ0"); PlayerInfo[playerid][pToyZ][1] = dini_Float(file, "tZ1");	PlayerInfo[playerid][pToyZ][2] = dini_Float(file, "tZ2"); PlayerInfo[playerid][pToyZ][3] = dini_Float(file, "tZ3");
	PlayerInfo[playerid][pToyZ][4] = dini_Float(file, "tZ4"); PlayerInfo[playerid][pToyZ][5] = dini_Float(file, "tZ5");	PlayerInfo[playerid][pToyZ][6] = dini_Float(file, "tZ6"); PlayerInfo[playerid][pToyZ][7] = dini_Float(file, "tZ7");
	PlayerInfo[playerid][pToyZ][8] = dini_Float(file, "tZ8"); PlayerInfo[playerid][pToyZ][9] = dini_Float(file, "tZ9");
	// Toy RX
	PlayerInfo[playerid][pToyRX][0] = dini_Float(file, "tRX0"); PlayerInfo[playerid][pToyRX][1] = dini_Float(file, "tRX1");	PlayerInfo[playerid][pToyRX][2] = dini_Float(file, "tRX2"); PlayerInfo[playerid][pToyRX][3] = dini_Float(file, "tRX3");
	PlayerInfo[playerid][pToyRX][4] = dini_Float(file, "tRX4"); PlayerInfo[playerid][pToyRX][5] = dini_Float(file, "tRX5");	PlayerInfo[playerid][pToyRX][6] = dini_Float(file, "tRX6"); PlayerInfo[playerid][pToyRX][7] = dini_Float(file, "tRX7");
	PlayerInfo[playerid][pToyRX][8] = dini_Float(file, "tRX8"); PlayerInfo[playerid][pToyRX][9] = dini_Float(file, "tRX9");
	// Toy RY
	PlayerInfo[playerid][pToyRY][0] = dini_Float(file, "tRY0");	PlayerInfo[playerid][pToyRY][1] = dini_Float(file, "tRY1");	PlayerInfo[playerid][pToyRY][2] = dini_Float(file, "tRY2");	PlayerInfo[playerid][pToyRY][3] = dini_Float(file, "tRY3");
	PlayerInfo[playerid][pToyRY][4] = dini_Float(file, "tRY4");	PlayerInfo[playerid][pToyRY][5] = dini_Float(file, "tRY5");	PlayerInfo[playerid][pToyRY][6] = dini_Float(file, "tRY6");	PlayerInfo[playerid][pToyRY][7] = dini_Float(file, "tRY7");
	PlayerInfo[playerid][pToyRY][8] = dini_Float(file, "tRY8");	PlayerInfo[playerid][pToyRY][9] = dini_Float(file, "tRY9");
	// Toy RZ
	PlayerInfo[playerid][pToyRZ][0] = dini_Float(file, "tRZ0");	PlayerInfo[playerid][pToyRZ][1] = dini_Float(file, "tRZ1");	PlayerInfo[playerid][pToyRZ][2] = dini_Float(file, "tRZ2");	PlayerInfo[playerid][pToyRZ][3] = dini_Float(file, "tRZ3");
	PlayerInfo[playerid][pToyRZ][4] = dini_Float(file, "tRZ4");	PlayerInfo[playerid][pToyRZ][5] = dini_Float(file, "tRZ5");	PlayerInfo[playerid][pToyRZ][6] = dini_Float(file, "tRZ6");	PlayerInfo[playerid][pToyRZ][7] = dini_Float(file, "tRZ7");
	PlayerInfo[playerid][pToyRZ][8] = dini_Float(file, "tRZ8");	PlayerInfo[playerid][pToyRZ][9] = dini_Float(file, "tRZ9");
	// Toy SX
	PlayerInfo[playerid][pToySX][0] = dini_Float(file, "tSX0");	PlayerInfo[playerid][pToySX][1] = dini_Float(file, "tSX1");	PlayerInfo[playerid][pToySX][2] = dini_Float(file, "tSX2");	PlayerInfo[playerid][pToySX][3] = dini_Float(file, "tSX3");
	PlayerInfo[playerid][pToySX][4] = dini_Float(file, "tSX4");	PlayerInfo[playerid][pToySX][5] = dini_Float(file, "tSX5");	PlayerInfo[playerid][pToySX][6] = dini_Float(file, "tSX6");	PlayerInfo[playerid][pToySX][7] = dini_Float(file, "tSX7");
	PlayerInfo[playerid][pToySX][8] = dini_Float(file, "tSX8");	PlayerInfo[playerid][pToySX][9] = dini_Float(file, "tSX9");
	// Toy SY
	PlayerInfo[playerid][pToySY][0] = dini_Float(file, "tSY0");	PlayerInfo[playerid][pToySY][1] = dini_Float(file, "tSY1");	PlayerInfo[playerid][pToySY][2] = dini_Float(file, "tSY2");	PlayerInfo[playerid][pToySY][3] = dini_Float(file, "tSY3");
	PlayerInfo[playerid][pToySY][4] = dini_Float(file, "tSY4");	PlayerInfo[playerid][pToySY][5] = dini_Float(file, "tSY5");	PlayerInfo[playerid][pToySY][6] = dini_Float(file, "tSY6");	PlayerInfo[playerid][pToySY][7] = dini_Float(file, "tSY7");
	PlayerInfo[playerid][pToySY][8] = dini_Float(file, "tSY8");	PlayerInfo[playerid][pToySY][9] = dini_Float(file, "tSY9");
	// Toy SZ
	PlayerInfo[playerid][pToySZ][0] = dini_Float(file, "tSZ0");	PlayerInfo[playerid][pToySZ][1] = dini_Float(file, "tSZ1");	PlayerInfo[playerid][pToySZ][2] = dini_Float(file, "tSZ2");	PlayerInfo[playerid][pToySZ][3] = dini_Float(file, "tSZ3");
	PlayerInfo[playerid][pToySZ][4] = dini_Float(file, "tSZ4");	PlayerInfo[playerid][pToySZ][5] = dini_Float(file, "tSZ5");	PlayerInfo[playerid][pToySZ][6] = dini_Float(file, "tSZ6");	PlayerInfo[playerid][pToySZ][7] = dini_Float(file, "tSZ7");
	PlayerInfo[playerid][pToySZ][8] = dini_Float(file, "tSZ8");	PlayerInfo[playerid][pToySZ][9] = dini_Float(file, "tSZ9");
	for(new i=0; i<10; i++) // Toys
    {
	 	if(PlayerInfo[playerid][pToySX][i] == 0) PlayerInfo[playerid][pToySX][i] = 1;
	    if(PlayerInfo[playerid][pToySY][i] == 0) PlayerInfo[playerid][pToySY][i] = 1;
	    if(PlayerInfo[playerid][pToySZ][i] == 0) PlayerInfo[playerid][pToySZ][i] = 1;
    }
	return 1;
}

stock RPTN(playerid, slot)
{
    new name[24], toy = PlayerInfo[playerid][pToyModel][slot];
    format(name, sizeof(name), "None");
    // Model assigning
	if(toy >= 19006 && toy <= 19035) format(name, sizeof(name), "Glasses");
	else if(toy >= 19039 && toy <= 19053) format(name, sizeof(name), "Watch");
	else if(toy >= 18891 && toy <= 18910) format(name, sizeof(name), "Bandana");
	else if(toy >= 18926 && toy <= 18935) format(name, sizeof(name), "Hat");
	else if(toy >= 18911 && toy <= 18920) format(name, sizeof(name), "Mask");
	else if(toy == 18640 || toy == 18975 || toy == 19077 || toy == 19136 || toy == 19274) format(name, sizeof(name), "Hair");
	else if(toy == 18643 || toy >= 19080 && toy <= 19084) format(name, sizeof(name), "Laser");
	else if(toy >= 19421 && toy <= 19424) format(name, sizeof(name), "Headphones");
	else if(toy == 19317) format(name, sizeof(name), "Guitar");
	else if(toy == 19352) format(name, sizeof(name), "TopHat");
	else if(toy == 18645 || toy >= 18976 && toy <= 18979) format(name, sizeof(name), "Motorcycle Helmet");
	else if(toy == 18675) format(name, sizeof(name), "Smoke Puff");
	return name;
}
